package servants

import (
	"strconv"

	"{{ .PkgName }}/internal/errorx"
	"{{ .PkgName }}/internal/locator"
	"{{ .PkgName }}/internal/utils"
	"{{ .PkgName }}/mirc/gen/api"
	"{{ .PkgName }}/proto/gen/calculator"
	"github.com/gin-gonic/gin"
)

type calculatorSrv struct {
	baseServant
	calSrv *calculator.Calculator
}

func (s *calculatorSrv) Add(c *gin.Context) {
	lhs, rhs := c.Param("lhs"), c.Param("rhs")
	var (
		lh, rh, res int32
		v           int
		err1, err2  error
	)

	if v, err1 = strconv.Atoi(lhs); err1 == nil {
		lh = int32(v)
	}
	if v, err2 = strconv.Atoi(rhs); err2 == nil {
		rh = int32(v)
	}
	if err1 != nil || err2 != nil {
		s.abort(c, errorx.ErrParamNotValide)
		return
	}
	if _, err := s.calSrv.Add(lh, rh, &res); err == nil {
		s.success(c, res)
	} else {
		s.failure(c, err)
	}
}

func (s *calculatorSrv) Sub(c *gin.Context) {
	lhs, rhs := c.Param("lhs"), c.Param("rhs")
	var (
		lh, rh, res int32
		v           int
		err1, err2  error
	)

	if v, err1 = strconv.Atoi(lhs); err1 == nil {
		lh = int32(v)
	}
	if v, err2 = strconv.Atoi(rhs); err2 == nil {
		rh = int32(v)
	}
	if err1 != nil || err2 != nil {
		s.abort(c, errorx.ErrParamNotValide)
		return
	}
	if _, err := s.calSrv.Sub(lh, rh, &res); err == nil {
		s.success(c, res)
	} else {
		s.failure(c, err)
	}
}

// NewCalculator return a Calculator implement object
func NewCalculator() api.Calculator {
	comm := locator.MyCommunicator()
	calObj := utils.ObjFrom("kry.calculator.CalculatorObj")
	calSrv := new(calculator.Calculator)
	comm.StringToProxy(calObj, calSrv)

	return &calculatorSrv{
		baseServant: newBaseServant(),
		calSrv:      calSrv,
	}
}
