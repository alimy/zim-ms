// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/tars/mir/README.tmpl (250B)
// templates/tars/mir/gitignore.tmpl (250B)
// templates/tars/mir/go_mod.tmpl (291B)
// templates/tars/mir/internal/debug/dump.tmpl (419B)
// templates/tars/mir/internal/debug/pprof.tmpl (252B)
// templates/tars/mir/internal/errorx/errorx.tmpl (283B)
// templates/tars/mir/internal/errorx/http_error.tmpl (512B)
// templates/tars/mir/internal/internal.tmpl (17B)
// templates/tars/mir/internal/locator/comm.tmpl (563B)
// templates/tars/mir/internal/locator/locator.tmpl (16B)
// templates/tars/mir/internal/utils/utils.tmpl (310B)
// templates/tars/mir/internal/utils/utils_test.tmpl (747B)
// templates/tars/mir/main.tmpl (655B)
// templates/tars/mir/makefile.tmpl (4.607kB)
// templates/tars/mir/mirc/gen/api/calculator.tmpl (436B)
// templates/tars/mir/mirc/main.tmpl (418B)
// templates/tars/mir/mirc/routes/calculator.tmpl (262B)
// templates/tars/mir/proto/calculator_tars.tmpl (216B)
// templates/tars/mir/proto/gen/calculator/Calculator_IF.tmpl (9.367kB)
// templates/tars/mir/servants/base.tmpl (874B)
// templates/tars/mir/servants/servants.tmpl (1.632kB)
// templates/tars/mir/service_conf.tmpl (937B)
// templates/tars/mir/version/version.tmpl (474B)
// templates/tars/simple/README.tmpl (187B)
// templates/tars/simple/gitignore.tmpl (244B)
// templates/tars/simple/go_mod.tmpl (223B)
// templates/tars/simple/internal/client/client.tmpl (684B)
// templates/tars/simple/internal/debug/dump.tmpl (419B)
// templates/tars/simple/internal/debug/pprof.tmpl (252B)
// templates/tars/simple/internal/internal.tmpl (17B)
// templates/tars/simple/internal/locator/comm.tmpl (563B)
// templates/tars/simple/internal/locator/locator.tmpl (16B)
// templates/tars/simple/internal/utils/utils.tmpl (310B)
// templates/tars/simple/internal/utils/utils_test.tmpl (747B)
// templates/tars/simple/main.tmpl (474B)
// templates/tars/simple/makefile.tmpl (4.403kB)
// templates/tars/simple/proto/calculator_tars.tmpl (212B)
// templates/tars/simple/proto/gen/calculator/Calculator_IF.tmpl (9.367kB)
// templates/tars/simple/servants/servants.tmpl (1.216kB)
// templates/tars/simple/service_conf.tmpl (973B)
// templates/tars/simple/version/version.tmpl (474B)

package generator

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tarsMirReadmeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xb1\xae\x83\x30\x0c\x45\xf7\x7c\xc5\x95\xac\xa7\xb7\xf5\x27\xba\x75\xef\x8e\x09\x26\x20\x02\x46\x8e\xd3\xef\xaf\x88\x40\x55\x7b\xb7\x1c\x9d\x1b\xdb\x44\xb8\x73\x8e\x35\xb3\xab\x85\x47\x2d\x0e\xc6\xe4\xbe\x63\x90\x55\xa1\x23\x9c\xad\x20\x29\x8a\xd8\x4b\xec\x16\x02\x11\x11\x9e\x85\x93\x84\xae\xeb\x7a\x2e\x53\xf8\xc3\xca\x8b\x20\xc9\x26\xc6\x2e\x38\x42\x9f\xe7\xa8\x86\x75\xb6\x4b\x6b\x3f\xe1\x0c\xc1\xea\xd6\xd0\x1c\xe5\x32\x62\x9e\x65\xfb\x36\x1a\x72\xb8\x62\x90\xbe\xa6\xdf\x86\x49\x16\x2e\x72\x35\x76\x8e\x0b\xb4\xfa\x39\xcb\xf5\x38\xe3\xbf\x34\x7e\x2e\xfe\x0e\x00\x00\xff\xff\xde\xeb\x2f\x88\xfa\x00\x00\x00"

func tarsMirReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirReadmeTmpl,
		"tars/mir/README.tmpl",
	)
}

func tarsMirReadmeTmpl() (*asset, error) {
	bytes, err := tarsMirReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/README.tmpl", size: 250, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8d, 0x4e, 0xe4, 0x84, 0xc4, 0x82, 0x9e, 0x2a, 0xbc, 0x47, 0x4f, 0x41, 0x3b, 0xa, 0x8e, 0xd7, 0xf3, 0x3f, 0x6d, 0x9d, 0x59, 0x33, 0x9b, 0x0, 0xac, 0x1d, 0x86, 0x53, 0xd, 0x1e, 0xeb, 0x82}}
	return a, nil
}

var _tarsMirGitignoreTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x8e\x41\x6a\x03\x31\x0c\x45\xf7\x3a\xc5\x87\xec\x4c\xea\xdc\xa1\xb4\x94\x42\xa1\x9b\x1c\x20\xce\x8c\xc6\x51\x51\x46\x83\x2d\x37\x9d\x86\xf4\xec\xc5\xc9\x46\x3c\xd0\xe7\xf1\x36\x78\x96\x39\x15\xe1\x8a\xc9\x0a\x96\x62\xb9\xa4\x73\x45\x9a\x47\x2c\xda\xb2\xcc\x95\x42\xe4\x1f\x7e\xdc\x3f\x0a\x71\x54\xa5\x10\xab\x75\x5c\x55\x8e\x44\x1b\xec\xb9\x3a\x8e\xdd\xb4\x6e\x71\x6c\xa2\x8e\x8b\xf8\x09\x87\x6c\xf0\xfe\x7b\x1a\x0e\x14\x62\xc7\x3e\xff\x6c\xbe\x34\x87\x4d\xf0\x13\x23\x1b\x06\xfb\xe6\x92\x32\xc3\xcd\x74\x8b\xba\xf0\x20\x93\x0c\x49\x75\xc5\xe5\xc4\x33\x5a\xe5\xf1\xa1\xfc\x10\xe7\xf7\x97\x57\x0a\xd1\xda\x5d\xf6\x66\x7a\xaf\x2d\xf6\xc5\x83\x63\x12\xe5\x4a\x51\x46\x4e\x3b\x0a\x51\xce\x4a\xb4\xbb\x5e\x11\xf7\xa9\x64\x76\xdc\x6e\x3d\x24\xff\xfe\x07\x00\x00\xff\xff\x12\x91\xa2\x4c\xfa\x00\x00\x00"

func tarsMirGitignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirGitignoreTmpl,
		"tars/mir/gitignore.tmpl",
	)
}

func tarsMirGitignoreTmpl() (*asset, error) {
	bytes, err := tarsMirGitignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/gitignore.tmpl", size: 250, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0xa, 0x1a, 0xaa, 0xeb, 0x3e, 0xed, 0xfe, 0xed, 0x7f, 0x2e, 0x83, 0x6, 0xee, 0xa, 0xdc, 0x2a, 0x91, 0xf, 0x71, 0x43, 0xe5, 0x9a, 0x30, 0xb0, 0x48, 0x70, 0x46, 0x1d, 0x80, 0xec, 0xef}}
	return a, nil
}

var _tarsMirGo_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcf\xbf\x4a\x04\x41\x0c\x06\xf0\xda\x3c\x45\x4a\x2d\x36\xb3\xb3\x8a\x9d\x36\x16\x76\x62\xe1\x0b\xcc\xee\x85\x31\x38\xb9\x68\xc6\x19\x3c\x8f\x7b\x77\xd9\x53\xf0\x4f\x23\xa4\xf8\x08\xbf\x7c\x10\xb5\x4d\x2b\x8c\xfb\x3d\xd2\xfd\x53\xbe\x4b\xca\x78\x38\x00\x64\xc3\x48\x71\x02\x70\x7e\x69\xe2\x8c\xa7\x70\x92\xe5\xf5\xb1\xcd\xb4\x98\x86\x87\xe4\xf5\xa6\x58\xdb\x1c\xd3\xad\x61\x8f\x14\x29\xfe\x32\xa9\x88\xee\x82\x8a\x87\x3e\x61\x9f\xe8\x82\x46\x40\x44\xfc\x41\xb2\x6c\x87\x6c\x5b\x59\xd6\xb4\x76\x5c\xd2\xf4\xd7\x2c\xe6\x6c\x35\x64\x1b\x2a\x6b\x67\xc7\x3e\xd2\xf9\x77\xd5\xdc\xea\x91\xf1\x5b\x49\x73\x78\x17\x1d\xb4\x86\x22\xb3\x27\xdf\xad\x74\xa4\x08\x67\xeb\x1b\xcf\x25\x2d\xfc\xef\xc5\xd5\x35\x12\x85\xcf\xf9\xda\xc1\x47\x00\x00\x00\xff\xff\x10\x07\xb1\x16\x23\x01\x00\x00"

func tarsMirGo_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirGo_modTmpl,
		"tars/mir/go_mod.tmpl",
	)
}

func tarsMirGo_modTmpl() (*asset, error) {
	bytes, err := tarsMirGo_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/go_mod.tmpl", size: 291, mode: os.FileMode(0644), modTime: time.Unix(1586696481, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x26, 0x7f, 0x9e, 0x41, 0xb3, 0x10, 0xc5, 0xec, 0x23, 0xcf, 0x2c, 0x54, 0x2e, 0x4f, 0x1d, 0x2f, 0xaa, 0x7f, 0xbd, 0xf1, 0x24, 0xe5, 0x4b, 0xf9, 0xd5, 0x2a, 0x75, 0x7f, 0xcb, 0x5, 0x51}}
	return a, nil
}

var _tarsMirInternalDebugDumpTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\x4d\x6b\xe3\x30\x10\x3d\x5b\xbf\x62\xf0\x65\x6d\x48\x64\x79\x59\x76\x21\xb0\xb0\x4b\x4a\x7b\x4b\x0a\xce\x1f\x90\x65\xc5\x71\x12\x69\xc4\x68\x94\x0f\x4a\xff\x7b\x91\x73\x68\x8f\x3d\xe9\xe9\xe9\x69\xde\xbc\x17\xb4\x39\xe9\xd1\xc2\x60\xfb\x34\x0a\x31\xb9\x80\xc4\x50\x89\xa2\x1c\x27\x3e\xa4\x5e\x1a\x74\xcd\x4e\x53\x5c\x9f\x31\x0d\x33\x7a\xc1\x86\x35\xc5\xf2\x1b\x9a\x26\x10\x32\x1a\x3c\x37\x64\x63\xa3\x07\x37\xf9\x7d\x29\x6a\x21\x9a\x06\x9e\x92\x0b\x1d\x6b\x73\x82\x21\xb9\x00\xd1\xd2\x45\x7b\xfe\x11\x21\x66\x32\x2b\xb0\x3f\x82\x1d\x57\xd0\x31\xd9\x18\x77\x36\xb2\x5c\xa3\x67\x7b\xe3\x8c\x3b\x4b\x17\x4b\x5f\x99\x6d\x7f\xdc\xf6\xc7\x7f\x6c\x02\x2c\x0f\xd0\xfe\xfc\x23\x95\x54\xb2\x85\x65\x80\x56\xa9\xf6\x17\x2c\x19\x7e\x2b\xa5\x94\xd8\x27\x6f\x3e\x17\xa8\xb2\x51\x64\x9a\xfc\x58\x43\xf5\x00\x0b\xb0\x44\x48\x35\xbc\x89\xc2\xa0\x73\xb0\xfa\x0b\x39\x91\xdc\xd8\xeb\x1a\x9d\x4b\x7e\x32\x9a\x91\xaa\x5a\x14\x3a\x84\xfc\xec\xed\xb5\x7a\x44\x94\xff\xf3\xf1\x5c\x3f\xbe\xca\x6e\x9e\xb8\xc3\x57\xc2\xdb\x3d\x9b\x2d\x40\x87\x50\x8b\x82\x2c\x27\xf2\xf9\x22\x37\xc8\xd3\xfe\x5e\x95\xb3\x47\x2e\x64\x6e\xa1\xac\xc5\xbb\xf8\x08\x00\x00\xff\xff\x23\xf5\xb1\xdd\xa3\x01\x00\x00"

func tarsMirInternalDebugDumpTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirInternalDebugDumpTmpl,
		"tars/mir/internal/debug/dump.tmpl",
	)
}

func tarsMirInternalDebugDumpTmpl() (*asset, error) {
	bytes, err := tarsMirInternalDebugDumpTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/internal/debug/dump.tmpl", size: 419, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x78, 0xc2, 0x85, 0xf9, 0xf5, 0xb0, 0x89, 0x2d, 0x4c, 0xf9, 0x97, 0x95, 0xab, 0xd4, 0xf0, 0x6e, 0x8, 0x7, 0x22, 0xc8, 0xe, 0xae, 0x5a, 0xb, 0x28, 0x42, 0xc8, 0x62, 0x6e, 0x1a, 0x98}}
	return a, nil
}

var _tarsMirInternalDebugPprofTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xb1\x6a\x03\x31\x10\x44\x6b\xed\x57\x2c\x5b\x49\x24\x58\xae\x5c\xa4\x4b\x9f\x22\x90\x0f\x08\xf2\x9d\x2c\x2f\xd9\xac\x84\xb4\xe7\x26\xf8\xdf\xc3\xdd\x41\x20\x2e\x67\x60\xe6\xbd\x18\xf1\xe9\xbc\xb0\xcc\xd8\x5a\xaf\x17\x80\x96\xa6\xaf\x54\x32\xce\xf9\xbc\x14\x00\xfe\x6e\xb5\x1b\x7a\x70\x24\xb5\x10\x38\xd2\x6c\xf1\x6a\xd6\x08\xdc\x27\xfe\xa5\xb8\xcd\x09\x02\xc0\x65\xd1\x09\x59\xd9\x7c\xc0\x1f\x70\xa5\xe2\xda\xec\xc1\x49\x2d\x87\xf7\xce\x6a\xa2\x9e\x86\xa5\x6e\x98\x76\x34\x8e\xdc\x6f\x3c\x65\x14\x1e\x96\x15\x59\x51\xea\x94\xe4\x5a\x87\xbd\x9c\x8e\xa7\x63\xdc\x94\x76\x50\xa4\xf0\x70\xb6\x4a\x1c\xde\xb6\xe9\xab\xce\x1f\xb9\xdf\xb2\xa7\xff\x07\xf4\x8c\xca\x12\x02\xb8\xbb\x0f\x70\x87\xdf\x00\x00\x00\xff\xff\xa6\x30\xd6\x1f\xfc\x00\x00\x00"

func tarsMirInternalDebugPprofTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirInternalDebugPprofTmpl,
		"tars/mir/internal/debug/pprof.tmpl",
	)
}

func tarsMirInternalDebugPprofTmpl() (*asset, error) {
	bytes, err := tarsMirInternalDebugPprofTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/internal/debug/pprof.tmpl", size: 252, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8, 0x3, 0xcf, 0xc4, 0x4e, 0xce, 0x52, 0xf, 0x5c, 0x86, 0x7c, 0xf8, 0xfb, 0x8a, 0x70, 0x5a, 0x42, 0xbe, 0x2, 0x41, 0xd2, 0xd6, 0x84, 0x42, 0x57, 0xb, 0x4f, 0xa, 0xc7, 0x9b, 0x1c, 0xd3}}
	return a, nil
}

var _tarsMirInternalErrorxErrorxTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xb1\x8a\xc2\x40\x10\x86\xeb\xcc\x53\x0c\x5b\x65\x21\xdc\x3d\xc1\x35\x77\x04\xee\x9a\x70\x18\xb1\x1f\x92\x51\x83\xc9\xee\x3a\x99\xc4\x88\xf8\xee\xb2\x5b\x88\x36\x5a\x7f\xdf\xf7\x0f\x13\xa8\x39\xd0\x8e\x91\x45\xbc\x2c\x00\xdd\x10\xbc\x28\x1a\xc7\xfa\xb9\x57\x0d\x06\x60\x26\xc1\x1c\xb2\x52\xe4\x9f\x84\x86\xca\xeb\x86\xfa\xae\x65\xfc\xc2\x8a\x4f\xbf\xaa\xa1\x8c\x71\x1e\xf5\x8f\x5a\x49\xa7\xf1\x9b\xda\x15\x1f\x27\x1e\xb5\x40\x13\x62\x85\xce\x2b\xce\xa9\x33\x36\x8d\xfd\x39\x65\x71\xd4\xd7\x2c\x33\xcb\x8b\xb1\x67\x31\xe1\x02\x1f\xf8\x9a\x17\x7d\xe3\x5b\x0b\x16\x40\xcf\x81\xf1\x7e\x02\xbb\xe8\x6d\xa9\x61\xbc\x40\x96\xfe\x87\xec\xc7\xb7\x9c\xdb\x88\xe0\x7a\x0b\x00\x00\xff\xff\x50\xa2\x9a\x06\x1b\x01\x00\x00"

func tarsMirInternalErrorxErrorxTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirInternalErrorxErrorxTmpl,
		"tars/mir/internal/errorx/errorx.tmpl",
	)
}

func tarsMirInternalErrorxErrorxTmpl() (*asset, error) {
	bytes, err := tarsMirInternalErrorxErrorxTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/internal/errorx/errorx.tmpl", size: 283, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x61, 0xad, 0x2e, 0xe0, 0xce, 0x47, 0x5a, 0x37, 0xa6, 0x19, 0x7c, 0xec, 0x62, 0x6c, 0x17, 0x36, 0x64, 0x41, 0x12, 0x5d, 0xf9, 0xd8, 0x8b, 0xf, 0x20, 0x8d, 0x7e, 0xe5, 0x54, 0x33, 0x77, 0xd3}}
	return a, nil
}

var _tarsMirInternalErrorxHttp_errorTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcd\x6a\x83\x40\x10\xc7\xcf\x3b\x4f\xf1\x27\x87\xb2\x96\xa0\xf7\x5c\x4b\xa1\xbd\xf4\x92\x27\x58\xcc\xd4\x4a\xeb\x2a\xb3\x63\x3f\x08\x79\xf7\x32\xab\x55\x0b\x29\xbd\xa8\xcc\xfc\x3f\x7e\x83\x43\xa8\x5f\x43\xc3\x60\x91\x5e\x3e\x89\xda\x6e\xe8\x45\xb1\x8b\xac\xd5\x8b\xea\xb0\x23\xd2\xaf\x81\x61\xdf\xf7\xa6\x41\x52\x19\x6b\xc5\x99\x5c\xdd\x9f\x18\x6d\x54\x72\x5d\x6a\x6c\xde\xc6\x86\x2e\x44\xcf\x63\xac\xe1\x19\xb7\x8b\xa9\x40\x7e\xf9\x62\x56\x99\x5b\x58\x47\x89\xe0\xb2\x4b\x7f\xba\xee\xfa\x13\xfb\xc2\x3a\x7e\x39\xac\xd8\x2c\x55\x85\x27\xfe\x78\x58\xd0\x1a\x56\x84\x8c\x3a\xdd\x33\x65\x6e\x25\xfe\x87\x79\x8f\x95\xb9\xc0\x1a\xb1\xd6\xdc\x2c\x1c\x67\x72\xf9\xd6\x03\xec\xb9\x27\x67\xf7\x1e\x60\x09\x7b\x72\x97\x99\xe4\x31\x2a\x4b\x0c\x6f\x47\x96\x77\x96\x0d\x50\xb4\xbe\xbc\x42\xca\xbb\x2d\xdc\x15\x97\x67\x99\x25\xff\x81\x61\x25\xb3\x59\x79\xd4\xa0\x63\xba\x12\xb9\x30\xb3\x48\x39\xff\x8a\x09\xfd\x3b\x00\x00\xff\xff\x56\x13\x90\xf0\x00\x02\x00\x00"

func tarsMirInternalErrorxHttp_errorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirInternalErrorxHttp_errorTmpl,
		"tars/mir/internal/errorx/http_error.tmpl",
	)
}

func tarsMirInternalErrorxHttp_errorTmpl() (*asset, error) {
	bytes, err := tarsMirInternalErrorxHttp_errorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/internal/errorx/http_error.tmpl", size: 512, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x1a, 0x18, 0x18, 0xc, 0x2, 0x3, 0x3c, 0x7, 0x9e, 0xd9, 0x4b, 0xe6, 0x4e, 0xf9, 0x48, 0xc6, 0x51, 0xaa, 0x61, 0x74, 0xc7, 0x16, 0xa8, 0xe5, 0xce, 0xaa, 0x54, 0x9e, 0xe3, 0xcc, 0xec}}
	return a, nil
}

var _tarsMirInternalInternalTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\xcc\x2b\x49\x2d\xca\x4b\xcc\xe1\x02\x04\x00\x00\xff\xff\xea\xb7\x79\x06\x11\x00\x00\x00"

func tarsMirInternalInternalTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirInternalInternalTmpl,
		"tars/mir/internal/internal.tmpl",
	)
}

func tarsMirInternalInternalTmpl() (*asset, error) {
	bytes, err := tarsMirInternalInternalTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/internal/internal.tmpl", size: 17, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0xc8, 0xf2, 0xa7, 0x61, 0xa7, 0xd3, 0xe3, 0x72, 0xd6, 0xef, 0xe2, 0xd1, 0x6f, 0x9b, 0xed, 0x6d, 0xd5, 0xe1, 0xa6, 0xcb, 0x17, 0x5e, 0x39, 0x9b, 0xa7, 0x4e, 0x8a, 0x8f, 0xbb, 0xac, 0x1e}}
	return a, nil
}

var _tarsMirInternalLocatorCommTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x4d\x6e\x83\x30\x10\x85\xd7\x9e\x53\x4c\xbc\xc2\x5d\xc0\x09\x58\xa5\x52\x55\xa9\x3f\x8b\xf6\x02\xae\x4b\xc8\xa8\xd8\x8e\x8c\xdd\x28\xaa\xb8\x7b\x35\x06\x02\xb4\x61\x65\xa1\xf7\x9e\xbf\xcf\x27\x6d\xbe\x74\xdb\x60\xe7\x8d\x8e\x3e\x00\x90\x3d\xf9\x10\xb1\x00\x21\xfb\x8b\x33\x12\x40\xc8\x96\xe2\x31\x7d\x94\xc6\xdb\xea\x5d\x87\x7e\xdf\xf9\xf4\x99\x4f\x0f\xbe\x8a\x3a\xf4\x12\x14\xc0\xb7\x0e\xdc\x32\x29\x3c\x8d\x5b\xd8\xc7\x40\xae\x05\x61\xbc\xb5\x38\x7e\x77\x1c\x2f\xf7\xde\xda\xe4\x68\xbc\x51\x90\xa3\xf8\xea\x4c\x83\x88\x7c\x63\xc9\x67\x1e\xac\x2a\x7c\x74\x14\xe7\x35\x8e\x91\xee\xd0\xac\xca\x78\xa6\x78\xbc\xb2\x1f\x92\x33\xeb\x4a\xd1\x6d\x40\x14\xfe\x80\xa0\xc3\x1c\xc7\x5d\x8d\x52\xf2\xbf\x35\x73\x7d\x5d\x13\x9c\xcd\xe8\xbb\x1a\x1d\x75\x39\x99\x5d\xca\xb7\xe6\xef\x15\x0a\x84\x18\x40\x0c\x30\x64\xee\xe7\xcb\x5a\x11\x43\x13\x53\x70\xa8\xb7\xec\xe4\xfa\xa8\xd9\x35\x73\x6f\x2b\x85\xba\xf1\x54\x99\x7f\x7a\xac\xf2\xde\x17\xdc\x2b\xd4\x68\xc0\x9c\x35\xe6\xca\x4b\x73\xde\x4e\x4d\x2a\x8b\xe4\x62\xfe\xcf\x67\x49\xcd\x4a\x0a\xc4\xc4\xcf\x59\x18\xe0\x37\x00\x00\xff\xff\x75\x14\xc7\xd7\x33\x02\x00\x00"

func tarsMirInternalLocatorCommTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirInternalLocatorCommTmpl,
		"tars/mir/internal/locator/comm.tmpl",
	)
}

func tarsMirInternalLocatorCommTmpl() (*asset, error) {
	bytes, err := tarsMirInternalLocatorCommTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/internal/locator/comm.tmpl", size: 563, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x59, 0xac, 0x8, 0x7c, 0x46, 0x79, 0x4d, 0xb1, 0xfe, 0x18, 0x7a, 0x92, 0x25, 0xa9, 0x3b, 0xe4, 0x4a, 0x76, 0x71, 0x2c, 0xcf, 0xdc, 0x13, 0x70, 0x3f, 0xb, 0x68, 0xe8, 0xf7, 0x88, 0x75}}
	return a, nil
}

var _tarsMirInternalLocatorLocatorTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\xc9\x4f\x4e\x2c\xc9\x2f\xe2\x02\x04\x00\x00\xff\xff\x4e\xa4\x3b\x24\x10\x00\x00\x00"

func tarsMirInternalLocatorLocatorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirInternalLocatorLocatorTmpl,
		"tars/mir/internal/locator/locator.tmpl",
	)
}

func tarsMirInternalLocatorLocatorTmpl() (*asset, error) {
	bytes, err := tarsMirInternalLocatorLocatorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/internal/locator/locator.tmpl", size: 16, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xdd, 0xfb, 0xf4, 0xc0, 0xb1, 0x9, 0xbc, 0x45, 0xb8, 0x49, 0xb0, 0x12, 0x81, 0xa2, 0x82, 0x60, 0xb5, 0xcb, 0x95, 0x60, 0xac, 0xf8, 0xb1, 0xf1, 0x9b, 0x35, 0xa8, 0x16, 0x19, 0x2d, 0xa7}}
	return a, nil
}

var _tarsMirInternalUtilsUtilsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x31\x6b\xfb\x30\x10\x47\x67\xdd\xa7\xf8\x91\x25\x16\x04\xe5\x3f\x07\x0c\x7f\x32\x74\xed\xd0\xa1\xb3\x94\xca\xe6\x52\x5b\x12\x77\x52\xa1\x84\x7c\xf7\x52\xdb\xe9\x50\x3a\xde\x7b\xdc\x3b\xae\xf8\xcb\xbb\x1f\x23\x5a\xe5\x49\x89\x78\x2e\x59\x2a\x3a\x32\x3b\xad\xc2\x69\xd4\x1d\x59\xa2\xe3\x11\xcf\xe1\xfa\x24\x79\x86\xc4\xda\x24\xc1\x27\xe4\x70\x45\x13\xa6\xa1\xa5\xcb\x43\x77\xc9\xcf\x11\xeb\xea\x01\x25\x73\xaa\x0a\xe7\xdc\x4a\xec\x66\x70\x23\xf3\xe1\x05\x1a\x36\xa0\xee\xdc\x78\x7a\x8b\x42\x46\x83\x7b\x15\xae\xf1\x65\x11\x4b\xcf\x92\x19\xb2\x80\x0f\x28\x38\xf5\x10\x9f\xc6\xf8\x68\xdf\xc8\x18\x1e\xc0\xe8\x7b\xfc\x5b\xa6\x9f\xc2\xf9\xb3\xc6\x6e\xff\x7f\x6f\xc9\x98\x3b\xe2\xa4\xf1\x2f\x7f\x5a\x3d\x99\xdf\x97\x8b\xa5\x6f\xbc\xfd\xab\xc1\x6d\xdc\xd2\x9d\xbe\x02\x00\x00\xff\xff\xfc\x82\xdd\xa0\x36\x01\x00\x00"

func tarsMirInternalUtilsUtilsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirInternalUtilsUtilsTmpl,
		"tars/mir/internal/utils/utils.tmpl",
	)
}

func tarsMirInternalUtilsUtilsTmpl() (*asset, error) {
	bytes, err := tarsMirInternalUtilsUtilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/internal/utils/utils.tmpl", size: 310, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0xf4, 0x4c, 0x24, 0xb7, 0xd5, 0xc2, 0x8e, 0x8b, 0xb1, 0x78, 0x8a, 0xf9, 0xd7, 0x27, 0xdd, 0x6d, 0x5a, 0xf9, 0x88, 0x67, 0x35, 0xdb, 0x87, 0x65, 0x1, 0xa5, 0x43, 0xd3, 0xa2, 0x6c, 0x53}}
	return a, nil
}

var _tarsMirInternalUtilsUtils_testTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4d\x4b\xf3\x40\x10\x3e\x67\x7f\xc5\xbc\x81\x42\xfb\x92\x0e\x9b\x0a\x56\x23\x05\x41\xf4\xda\x4b\x6f\xa5\x87\xcd\xba\x49\xd3\xa6\xbb\x61\x77\x82\x8a\xe4\xbf\xcb\x6e\xda\xa0\xe2\x47\x0f\x1e\x12\x86\x9d\xe7\x63\x66\x78\x1a\x21\xf7\xa2\x54\xd0\x52\x55\x3b\xc6\xaa\x43\x63\x2c\x41\x4c\xca\x51\xa5\xcb\x98\xb1\xa2\xd5\x12\x56\xca\xd1\x32\xdf\x3d\x58\x73\x18\x13\xfc\x3f\x76\x71\x35\x81\x57\x16\x15\xc6\x42\x95\x80\x82\x6c\x01\x56\xe8\x52\xc1\x7a\xe3\xc8\xb6\x92\x7c\x37\xd2\xe2\xa0\x00\xc0\x91\xad\x74\xc9\xa2\xa8\x31\x95\x26\xd7\x63\xfa\x17\xf5\xdc\x28\x49\x03\xa2\xf3\x2c\xff\x05\x6a\x06\xf1\xde\xbe\xa0\x14\xb5\x6c\x6b\x41\xc6\xe2\xdd\x50\x2e\xf3\x5d\x9c\x78\x60\xaf\x99\x0d\xa2\x81\x1d\xc5\x24\x1b\x98\x6e\x21\x9d\xcd\x91\x23\xc7\x14\xa6\x0d\xa4\x9c\xcf\xae\x60\x4a\x70\xc9\x39\xe7\x3d\xbd\x0b\xff\x7e\x8c\x5f\xfc\x6e\xcf\xd4\x0c\x92\xef\x97\x10\x98\xa3\xfc\x93\x69\x07\x64\x6d\xa4\xa8\xb7\xc6\xd1\x09\x79\xfd\x09\x90\xce\x67\x1f\xa4\x2e\xbe\xde\x37\x8c\x76\xc6\x62\xd9\xb7\xbe\xd9\xcf\x86\xde\xaf\x0b\x61\xa8\x0a\xb0\xca\xf9\xa4\x9c\xe2\xa4\xd0\x1f\x28\x01\x85\xfd\x59\x10\x71\x72\x13\x40\xff\x16\xa0\xf0\x98\x8d\x70\x22\xc2\x7b\x6b\x8d\x2d\xc6\xf1\x7a\xf4\xb8\x81\x27\xa1\x09\x46\x0e\xf2\x96\xa0\x54\xbe\x8c\x93\x10\xc4\x23\x29\xf1\x2a\x13\x6f\xcf\xa2\x8e\x75\xec\x2d\x00\x00\xff\xff\xee\x27\x8e\xfd\xeb\x02\x00\x00"

func tarsMirInternalUtilsUtils_testTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirInternalUtilsUtils_testTmpl,
		"tars/mir/internal/utils/utils_test.tmpl",
	)
}

func tarsMirInternalUtilsUtils_testTmpl() (*asset, error) {
	bytes, err := tarsMirInternalUtilsUtils_testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/internal/utils/utils_test.tmpl", size: 747, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xd7, 0x79, 0x3a, 0x1f, 0xa8, 0x9e, 0xe3, 0x9a, 0x3e, 0x7a, 0xdb, 0x5f, 0x99, 0x4d, 0x2a, 0xa8, 0x2, 0xa4, 0x9f, 0x7f, 0x9a, 0x37, 0x3f, 0xe5, 0xda, 0x78, 0x8d, 0x68, 0x6d, 0xce, 0xd3}}
	return a, nil
}

var _tarsMirMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x8f\xd3\x30\x10\xc5\xcf\xf1\xa7\x18\xf9\x80\x1c\xb6\x6b\xdf\x57\xe2\xb0\x6a\x61\x7b\x80\x6d\xb5\xdb\x3b\x72\x9c\x89\x71\xd7\x7f\x22\xc7\x2e\x85\xaa\xdf\x1d\xd9\x4d\x40\x02\x6e\xe3\xbc\xf7\xb3\xdf\xbc\x8c\x52\xbd\x49\x8d\xe0\xa4\xf1\x84\x18\x37\x86\x98\x80\x91\x86\x6a\x93\xbe\xe5\x8e\xab\xe0\xc4\x41\xc6\x69\x6d\x43\xee\xeb\xf4\x14\x44\x92\x71\xa2\x37\x4f\x97\xa7\xea\xc1\xb3\x95\x9d\xf8\x69\xdc\xbd\x9b\x84\x35\x5d\x94\xf1\x87\xb0\x41\xe7\x6a\xbc\x5c\x80\xef\xdf\xf4\xb3\x74\x08\xd7\xab\x70\x26\x2a\xa1\xd1\x0b\x39\x9a\xff\xc8\x13\xc6\x93\xf4\x69\x79\x62\x89\xa1\x8d\xbf\xd7\xc1\x1b\x55\x26\x4a\x48\xf3\x15\xfe\x26\x8d\x4f\x18\xbd\xb4\xa2\xc7\x2e\x6b\x4a\x5a\x42\x86\xec\x15\x18\x6f\x12\x6b\xe1\x42\x9a\x1a\x89\xbf\x62\xfa\x8c\x27\xb4\xec\x76\xac\xf3\xa6\x20\x2d\xb9\x92\x99\x29\x8d\xdc\x18\x84\x87\x0f\xa0\x8d\xe7\x1b\x1c\x64\xb6\x89\xb5\xa4\x89\xa8\xcd\x94\x30\xbe\xce\x59\x19\xb6\x84\x34\x2e\x9f\x8b\xf7\x5d\x29\x88\x97\xb2\xb6\x29\x8d\x5f\xf2\xf9\x72\xad\x1a\xdf\x4a\xdf\x5b\xfc\x94\xbd\x62\x54\xd0\x15\x20\x2f\x3c\x6e\x0f\x87\x7d\xc1\xd5\xa0\x0b\x5e\xe9\x27\x4c\x55\x8b\xeb\xe0\x07\xa3\xcb\x9b\xa1\x3b\x16\x59\x0d\x9a\x3f\x8e\x23\xdc\x01\xe5\x14\xee\xea\xf9\x66\xad\x9f\xf6\x21\x26\x69\x77\xdd\x91\x92\xa6\xde\xf4\xd8\xf7\x25\xc6\x9c\x94\xb9\x7c\x5e\x41\xe8\x8e\xed\x2c\xbf\x64\xcf\xea\xda\x75\xeb\x7f\xf7\x82\xf7\x65\xf5\x8f\x5e\x1b\x8f\xb5\x0e\x21\xe0\xb0\xdb\xec\x1e\x7e\x7b\x21\x86\x9c\x70\x82\x14\x00\x49\x23\x47\xc3\x5f\x66\x65\x2d\xad\xca\x56\xa6\xb0\xdc\xc7\x70\x05\xcb\xef\xe5\xcf\xf8\xfd\x8f\x81\xb5\x25\xc4\xaf\x00\x00\x00\xff\xff\x93\x7f\xc2\x13\x8f\x02\x00\x00"

func tarsMirMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirMainTmpl,
		"tars/mir/main.tmpl",
	)
}

func tarsMirMainTmpl() (*asset, error) {
	bytes, err := tarsMirMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/main.tmpl", size: 655, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x5a, 0x3f, 0x86, 0xff, 0xdd, 0x6d, 0x57, 0xe3, 0xa3, 0xa1, 0x66, 0x64, 0x9a, 0x4, 0x3b, 0xb8, 0x8b, 0x26, 0x3c, 0x31, 0xf1, 0xaf, 0xfa, 0xae, 0xfb, 0x20, 0x6c, 0x14, 0x73, 0x4f, 0xac}}
	return a, nil
}

var _tarsMirMakefileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x7b\x6f\x9b\xc8\x16\xff\x9b\xf9\x14\xe7\xba\x8e\x6c\xd2\x0c\xdc\x46\x57\x57\x2b\x22\x76\x43\x1c\x42\xd2\x25\xc6\xb2\xdd\x6a\xbb\x6d\x65\x11\x18\xf0\xa8\xc0\xb0\xc3\xd8\x79\x35\xdf\x7d\x35\x03\x7e\x6e\x92\xee\x76\xe3\xa2\x28\x1e\xce\x63\xce\xef\x3c\xe6\x9c\xa1\xdd\x25\xf3\x30\x03\x4c\x8b\x28\x9b\xc5\x04\x0c\xc3\xac\xff\xae\x66\x34\x8b\xcd\x3c\xfc\x42\x12\x9a\x11\x43\x84\xbc\xd2\xd1\xd8\x19\x8e\x26\x43\xd7\x77\x9d\x91\x3b\x19\x38\xe3\x73\xb0\x6c\x68\x77\x37\xc8\xc3\x20\x18\xeb\xe6\xfd\x3d\x18\xbd\x50\x90\x94\xf1\x5b\x78\x78\x50\xef\x83\x30\xfa\x42\x44\x3f\xcc\x09\x3c\x3c\x20\xe4\x0c\x06\x50\x3f\x96\x0d\x92\xef\x94\xe5\x82\x39\x76\x86\x9e\x3b\x5e\xe3\x8d\x43\x9e\x12\x21\x59\x97\x67\xbe\xe3\x8d\x6a\x16\x3a\x5d\x7f\xe9\x05\xfd\xb3\x0b\xaf\x51\xaa\x08\x9f\xd3\x88\x18\x11\x2b\x12\x34\x1a\x0f\x2f\x06\x13\x29\x6b\xd9\xd0\x47\xaf\xf0\xcb\x3e\xe8\x55\x42\x6f\x20\x4a\x19\x44\x2c\x2f\x69\x46\x80\x70\xce\x38\x22\x37\x25\xe3\x02\xfc\xde\xc4\xf1\x7d\x00\xb0\x81\x14\x93\x77\x23\xe3\xdd\xf8\x0c\xff\xb4\xe4\x3a\x7d\x85\x79\x8b\xfb\xe2\x18\xbd\x40\x25\xec\x17\x99\xb0\x6a\x4a\xb2\x0c\x52\x06\xa4\x98\x43\xcd\xd0\x91\x17\xc8\xd4\x3d\x2a\xa0\x72\x8a\xbc\xe0\xec\x52\xf1\x53\x96\xe4\x02\x70\x05\xf8\x1a\x79\x01\x34\xe8\xdb\xf7\xb5\xe0\x83\x79\x45\x0b\x33\x65\x68\x2c\x53\x63\x43\x59\x72\x96\x20\xbf\x49\xd5\x6b\x1b\xf0\x6f\xd0\x4a\xa9\xb8\x9a\x55\x46\xc4\x72\x93\xdc\x64\xe1\x95\x79\x47\x73\x9c\x57\x66\x58\x96\xa6\x0c\x4b\x98\x99\xb3\x8a\xf0\xca\x9c\x13\x5e\x51\x56\x18\x27\xb2\x1e\xc7\x34\x27\xf6\x02\x5d\x1c\x0a\x02\x78\x06\x9d\xd7\x7b\x1f\xf0\x5e\x8e\xf7\x62\xd8\xbb\xb0\xf6\x2e\xad\xbd\x11\xec\xfd\xde\xd1\x5b\xff\xda\xa6\x47\xc5\x79\x58\x4d\x97\x16\x53\x2a\x80\x93\x39\x2e\x43\x5e\x11\x38\x77\x9d\x53\xbd\xf5\xf2\x89\xca\xe8\x55\x19\x8a\xa9\xdd\xbe\xaf\x66\x57\x95\x00\xeb\x00\x0e\xda\xdd\x26\x4b\xea\x68\x8c\x0e\x9b\xa8\xab\xd3\x97\x50\x5e\x89\x6b\xc6\x63\x99\xb7\xa5\xc6\x13\x59\xd6\x75\x95\x1d\x79\x9c\x0f\x53\x86\xde\x1e\x7a\x81\x3a\x17\xf5\x66\x98\xcd\x44\x4c\xb9\x5d\x72\x26\x98\x99\x92\xe2\xe5\xbd\x53\xbd\x62\x34\xec\xad\xf0\x5f\xd3\x2c\x8e\x42\x1e\x43\x6d\x75\xbf\xe9\x35\x5e\xb0\x14\xdb\x92\xdb\x37\x52\xa6\xaa\xf1\xc2\x77\x47\x35\xaf\x76\x35\xa1\x45\x0c\x06\xe0\x42\x76\x91\x96\x14\x6b\x01\x16\xb7\x25\x81\x44\x7f\x71\x4f\xa4\x33\x11\x2b\x6f\x65\x7b\x04\x1b\x68\x02\x82\x54\x02\xf0\x1d\xb4\xda\x5d\x67\x30\xd0\x5b\xf0\xf5\xeb\x3a\xad\xee\x69\x7a\xeb\x08\xc4\x94\x14\xf0\x09\xc1\xe6\x43\xa2\x29\x83\xd6\xc7\x8e\x33\x18\x74\x80\x71\xe8\xd4\x0a\x1d\x60\xa5\xa0\xac\x00\x5a\x01\xc9\x4b\x71\x6b\x7c\x6e\x1d\x01\xb9\xa1\x02\xde\x1c\x6d\xee\xa2\x91\xac\x22\xf0\x09\x69\xda\x82\xb0\x40\xf5\x1f\xc0\xb2\x3c\x0e\xf5\x27\x8c\x6b\x5a\x63\xbd\xcf\xa0\x9a\x45\x53\x88\x29\xb7\xa4\xfc\x01\x14\xec\x1a\xae\x09\x44\x9c\xc8\xf3\x46\x85\x34\x5f\xab\x6b\x9a\xa6\xe5\x5f\x62\xca\x01\x97\xf5\xe6\xd2\xb4\xa6\x25\x74\x03\xd7\x72\xef\x1e\x2b\x6f\x41\x85\xab\xdd\x7d\xa3\x03\xfe\x59\x29\x49\x6f\x36\xa4\xa3\x12\xf0\xbc\x16\xa9\x11\xab\x5d\x13\x7a\x84\x90\xe3\xfb\x16\x2c\x23\xb9\x93\x94\x2e\x77\xb7\x20\x25\x05\x96\xb5\x08\xf2\xf4\xc9\x62\xd4\x91\x26\x97\x3a\xa8\xe1\x08\x38\x8b\x93\x2c\x4c\x2b\xe8\xb4\xbb\x4d\xab\xd1\x3b\xb5\xf0\xc9\xbb\x0b\xff\x54\x1d\x2c\x1d\x30\x83\xf6\xf1\x4e\xb0\xaa\xce\xfa\xbd\x38\xb1\x68\x48\xe3\x67\x70\xef\x34\xd4\x72\x44\x93\xe7\xe0\xf3\x59\xf1\x77\x83\x9c\x87\xb4\x30\x52\x06\x18\xcb\x81\x4f\x53\xbb\xdd\xad\xaf\x03\x3b\x84\x8e\xbf\x19\xff\xa7\x1d\xf8\x66\xf4\x7f\xb0\x43\x51\x46\x49\x21\xbe\xcf\x17\x5a\x08\xc2\x8b\x30\x33\xeb\x4d\x9a\x9f\x1f\x08\xde\x18\x9c\x07\xfd\x0f\x2b\xf0\x68\xb1\xb0\x16\x97\xd3\x85\x23\xcd\xf0\x94\x9d\x65\x39\xfa\xf4\x0d\xa1\x1d\xe3\x23\x3c\x14\x04\x2d\x16\x16\xd2\x8e\x53\xb6\xa4\x43\x4e\x79\x64\x36\x99\x47\xda\xb1\x0c\xfc\xd9\xe5\x58\x07\xc3\xdc\x29\xae\x8c\x16\xb3\x1b\x1c\xe6\xf1\xff\xff\x87\xd6\xd6\x8f\x57\x43\xcf\x0b\x26\x6e\xdf\x39\xf1\xdd\x53\xfb\xbf\xe0\x05\xc1\xc8\x56\x3a\xe0\x05\xce\xb0\x77\x6e\x2b\x55\xf8\xce\x3e\xb9\xd3\x7e\xb3\x70\x97\x93\x8c\x84\x15\x41\xcd\xef\x86\xff\xb0\xaa\x54\xed\x98\x26\xf0\xb1\x1e\x9c\x0d\xac\x89\xc8\xcb\x89\x1c\x78\x9f\x97\x73\x74\x31\xdd\x24\x75\x1a\x56\x72\x30\x57\xc2\xfa\x8b\xc6\x01\x84\x57\x8c\x0b\xa3\x55\x8f\xb3\xd5\xf8\x5e\xcd\xec\xb5\x51\xba\xa5\x6c\x2e\x29\xdb\x1f\x5b\xea\x4e\xa7\xc6\xae\x9c\x9a\x3c\x81\x75\xc9\xc6\x91\xe7\xf6\x33\x6b\x38\xd1\x23\x3e\x1e\x81\x08\x39\x60\x4c\x6e\xd4\x97\xa1\xdd\x32\xaa\x79\xd1\x5a\x27\x4c\x6a\x42\x74\x37\x5f\xb3\x6b\x88\xf4\x0e\xd6\xf7\x8f\x62\xc0\xb5\x95\x7c\xfe\x1c\x94\x95\xe2\xb6\x7b\x4a\x99\xe7\x9b\xfe\xad\x60\xae\x72\x20\x01\x47\xf3\xe4\x6e\x0b\x8d\x61\x34\x61\x4f\x28\x42\x34\x29\xc8\x1f\xd0\x5d\x3b\xf2\x07\x3a\x42\x23\x77\xf8\xde\x1d\x4e\xfa\xce\xa5\xbb\xfc\xa4\x55\x75\x88\x48\x11\xd3\x64\xa7\xe5\x28\x2f\x68\x48\xfe\xb3\x20\xc9\x05\xd2\x52\x56\xdf\xd9\xe4\x67\xb8\xb1\x53\xcb\xd2\x5c\x92\x0b\xab\x6e\xf1\xaa\xd3\xa8\x85\xbc\x57\xef\x6a\xcc\x90\xb0\xb0\x90\xca\xa6\xaa\x9a\x53\x77\xe0\xf6\x4f\x27\x2a\x19\xc1\xc9\x5b\x09\xe0\xa2\xff\x3e\xf8\xd5\x9d\x3c\xc2\xf1\x83\x9e\xe3\x2f\x5e\x36\x4e\x84\xe7\x8e\x47\x7a\xbd\xdd\x44\xc2\xd7\xa1\x7d\xdf\xf3\x5d\xa7\x2f\x5f\x1e\xc0\xd8\x37\x62\x43\xe4\x25\xa4\x39\x2b\x0c\x36\x13\xbb\x73\x2e\xcc\xb2\xa7\xfc\x3b\xd7\xb7\x08\xbd\xc1\x60\x9b\xf4\x98\xa7\xe7\x3d\xb7\xd6\x95\x8b\x46\xe7\x9f\x78\xbf\x6f\xb0\x55\x04\xe4\x62\x15\x86\x3f\x03\x00\x00\xff\xff\x47\x2c\x0c\x18\xff\x11\x00\x00"

func tarsMirMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirMakefileTmpl,
		"tars/mir/makefile.tmpl",
	)
}

func tarsMirMakefileTmpl() (*asset, error) {
	bytes, err := tarsMirMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/makefile.tmpl", size: 4607, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0x97, 0x3f, 0x5d, 0x3b, 0x8f, 0x62, 0xde, 0x36, 0x9b, 0x53, 0x5c, 0xff, 0x3, 0x35, 0xc7, 0x6, 0x40, 0x47, 0xe1, 0x29, 0xd6, 0x82, 0x4, 0x79, 0x5e, 0x13, 0x8e, 0x45, 0x2a, 0x4a, 0xb}}
	return a, nil
}

var _tarsMirMircGenApiCalculatorTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4f\x6b\x32\x31\x10\xc6\xcf\x3b\x9f\x62\xd8\xd3\xee\x8b\x26\x77\xe1\x3d\x88\x4a\xdb\x4b\x85\xea\x17\xc8\x26\x63\x1c\xba\x3b\x59\xf2\xa7\x54\x4a\xbf\x7b\x59\x6b\x51\x04\x6f\x21\xcf\x33\xbf\xdf\x30\x5a\xe3\x2a\x38\x42\x4f\x42\xd1\x64\x72\xd8\x9d\xd0\x87\xf9\xc0\x51\xe1\x7a\x8b\xaf\xdb\x3d\x6e\xd6\x2f\x7b\x05\x30\x1a\xfb\x6e\x3c\xa1\x19\x19\x80\x87\x31\xc4\x8c\x0d\x54\xb5\xe7\x7c\x2c\x9d\xb2\x61\xd0\x9e\x65\xee\x83\xb0\x9d\x5e\x35\xb4\x00\xf9\x34\x12\xae\x4c\x6f\x4b\x6f\x72\x88\xc8\x92\x29\x1e\x8c\x25\xfc\x82\x6a\xe9\x5c\xf3\xcf\xb3\xa8\x55\x90\x4c\x9f\xb9\x85\x6a\x57\xba\xbb\xaf\x6f\x00\xad\xf1\x8d\x3c\xa7\x4c\xf1\x8a\xda\x51\xfc\x30\x92\x31\x5e\x92\x5b\x4b\xba\x64\x39\xa0\x67\x81\x43\x11\xfb\x98\xd0\x10\x9e\x8d\x1b\xf1\x2c\x34\xc3\x74\x43\x6a\xa7\x35\x63\x28\x13\x7f\xf1\x1f\x09\xa0\xd2\xfa\xaa\x3c\x27\x09\x59\x0e\x61\x72\xfd\x16\xff\x06\xd4\xb3\x11\xd7\x53\x53\x3f\x6d\xf6\xf5\x0c\x6b\x6d\x9c\xd3\x8b\xfe\x98\xf4\x22\x1e\x53\x3d\xc3\xa4\x96\xce\xb5\x0f\xeb\xa9\x74\x77\xf5\x5d\xe9\xa6\x7b\xfc\x04\x00\x00\xff\xff\x2f\xdd\x8b\x30\xb4\x01\x00\x00"

func tarsMirMircGenApiCalculatorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirMircGenApiCalculatorTmpl,
		"tars/mir/mirc/gen/api/calculator.tmpl",
	)
}

func tarsMirMircGenApiCalculatorTmpl() (*asset, error) {
	bytes, err := tarsMirMircGenApiCalculatorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/mirc/gen/api/calculator.tmpl", size: 436, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0x87, 0x66, 0x87, 0x8e, 0xdb, 0xda, 0xe7, 0x71, 0x3a, 0x36, 0x79, 0xb7, 0x1f, 0x63, 0x23, 0x15, 0xfd, 0x82, 0x82, 0xf4, 0xf, 0x66, 0xe0, 0xca, 0x24, 0x6, 0x57, 0x45, 0xdc, 0x91, 0xd4}}
	return a, nil
}

var _tarsMirMircMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xcd\x6a\xeb\x30\x10\x85\xd7\x9a\xa7\xd0\xd5\x4a\x86\x8b\x05\x5d\xa6\x64\x57\x1a\xba\x68\x1b\x9a\x07\x28\x8a\x33\x51\x86\xc8\x33\x66\x2c\x17\x8a\xf1\xbb\x17\xb9\x25\xcb\x2c\xe7\xe8\xfc\x7c\x1a\x62\x77\x8d\x09\x6d\x1f\x89\x01\xa8\x1f\x44\x8b\xf5\x60\x5c\x96\xe4\x00\x4c\x6b\x5d\xa2\x72\x99\x8e\x6d\x27\x7d\x88\x99\xfa\xef\xd0\x93\x86\xaf\x87\xd0\x89\xa2\xbb\xeb\x40\x4e\xc4\x58\x6b\x3e\xad\x9b\x67\xdb\xee\xaf\xe9\x2d\xf6\x68\x97\xa5\x5a\xba\xa0\x32\x15\x1c\x1d\x34\x00\x21\x24\xd9\x24\x64\xd4\x58\xd0\x26\xb1\x3a\xf1\x4a\xd5\x26\x81\xf3\xc4\xdd\x7a\xf8\xc6\xce\x60\xb2\xa4\x76\xaf\xc4\x25\xb3\x77\xb7\x4c\x27\x27\xb4\x63\x89\x5a\x5c\x03\x46\x86\x32\xda\xcd\xd6\xbe\x0f\x85\x84\xc7\x19\x8c\xf9\x98\xf8\x55\x4e\xe8\x5f\xf8\x80\x4a\x31\x3f\xe1\x71\x4a\x55\x69\xfe\x83\x31\xbb\xdf\x1e\xd1\x4a\xe8\x6f\xd7\x8e\x78\x7d\x3e\x10\x5f\xf7\xb1\x5c\xbc\x6b\x43\x42\x76\x55\x5c\xc0\xd0\xd9\xa2\x6a\x1d\xfa\x4b\xa0\xaf\xcb\xcd\xe3\x2a\xff\xdb\x5a\xa6\x5c\x91\x57\xe6\xe7\x58\x62\xf6\xa8\xda\xac\xd9\x3b\xdf\x38\x13\xd3\x78\x71\x0d\x2c\xf0\x13\x00\x00\xff\xff\x86\x0e\x79\x4b\xa2\x01\x00\x00"

func tarsMirMircMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirMircMainTmpl,
		"tars/mir/mirc/main.tmpl",
	)
}

func tarsMirMircMainTmpl() (*asset, error) {
	bytes, err := tarsMirMircMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/mirc/main.tmpl", size: 418, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0xf7, 0xa3, 0x95, 0x45, 0xba, 0x1e, 0x27, 0x4e, 0x17, 0x7d, 0x50, 0xec, 0x70, 0x26, 0x51, 0x2d, 0xb7, 0xba, 0xb8, 0x33, 0xe8, 0x93, 0x76, 0xd5, 0xd8, 0xd0, 0x2d, 0x22, 0x33, 0xa3, 0x96}}
	return a, nil
}

var _tarsMirMircRoutesCalculatorTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x3d\x4e\xc4\x40\x0c\xc5\xf1\x3a\x3e\x85\x35\x55\xd2\xac\x25\xca\x74\x08\x21\x0e\xc0\x05\x76\x32\x31\x89\xc5\x7c\xc9\xe3\x01\x45\x68\xef\x4e\x83\x20\x34\xdb\xfe\x7f\x4f\xaf\xfa\xf0\xee\x37\x46\x2d\xdd\xb8\x01\x48\xaa\x45\x0d\x47\x18\x2e\xe8\x36\xb1\xbd\x2f\x97\x50\x12\xf9\x28\xe9\xa0\x24\x4a\x1f\x0f\xee\x1e\x12\xe7\x4d\x32\x3b\x98\x00\xde\x7a\x0e\x28\x59\x6c\x9c\xf0\x0b\x86\xc7\x75\x7d\xce\xa6\xc7\x98\xf9\x73\x7c\xf2\x31\xf4\xe8\xad\xe8\x34\xc1\x0d\x80\x08\xff\x12\x7a\x6c\x92\x6a\x64\x0c\xbf\x0d\xec\xa8\x7c\xde\x34\xd3\x1e\xec\xe7\x18\x5f\xd8\xf0\x9a\x44\x67\x47\x7e\x5d\x69\x8e\x7b\xa3\x59\xf7\xe6\xae\x30\xbc\xf6\xe5\xec\xad\x2f\xff\xfc\x06\xdf\x01\x00\x00\xff\xff\xab\xa1\x19\xaf\x06\x01\x00\x00"

func tarsMirMircRoutesCalculatorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirMircRoutesCalculatorTmpl,
		"tars/mir/mirc/routes/calculator.tmpl",
	)
}

func tarsMirMircRoutesCalculatorTmpl() (*asset, error) {
	bytes, err := tarsMirMircRoutesCalculatorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/mirc/routes/calculator.tmpl", size: 262, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x26, 0xa6, 0x52, 0x52, 0xfd, 0xaf, 0x98, 0x4a, 0x97, 0xed, 0x57, 0x85, 0xc4, 0xe6, 0xf4, 0x75, 0x92, 0x6d, 0xd7, 0x76, 0x6, 0x53, 0x87, 0x2d, 0xb8, 0x16, 0xe0, 0x1e, 0xb5, 0x3c, 0xda}}
	return a, nil
}

var _tarsMirProtoCalculator_tarsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\x41\xaa\xc3\x30\x0c\x44\xf7\x3e\xc5\x2c\xff\x87\x40\x0e\xe0\x55\xe9\x11\x72\x02\xdb\x52\x89\xc1\xb1\x40\x91\xe8\xa2\xe4\xee\xc5\x2d\x94\x52\x28\xd5\x46\x33\xbc\xe1\x6d\x42\xde\x18\x25\xb5\xe2\x2d\x99\xe8\x2d\x00\x40\xed\xc6\x7a\x49\x85\x71\xfe\x20\xe3\xe6\x19\x27\x22\x24\x22\xd8\x55\xd0\x7d\xcb\xac\x2f\x5a\xbb\x0d\xfc\x37\x7e\x5b\xa7\x47\xd7\x75\x82\xb8\x3d\x33\xef\xff\x31\xbc\xcb\x16\xcf\xd8\x3d\x9b\xa6\x62\x55\xfa\x37\xe9\xe2\xf9\x87\x74\x2c\x8f\x18\x8e\x18\xee\x01\x00\x00\xff\xff\xc4\x0c\x0c\xee\xd8\x00\x00\x00"

func tarsMirProtoCalculator_tarsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirProtoCalculator_tarsTmpl,
		"tars/mir/proto/calculator_tars.tmpl",
	)
}

func tarsMirProtoCalculator_tarsTmpl() (*asset, error) {
	bytes, err := tarsMirProtoCalculator_tarsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/proto/calculator_tars.tmpl", size: 216, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0x34, 0xca, 0x52, 0x5c, 0xdb, 0xb7, 0xef, 0x9b, 0xf2, 0x39, 0x92, 0x7d, 0x39, 0xb7, 0x91, 0xab, 0xe8, 0x6c, 0xbb, 0x68, 0x70, 0x9d, 0xcf, 0x8, 0x78, 0xe6, 0xe5, 0x2d, 0xb1, 0xbe, 0xc6}}
	return a, nil
}

var _tarsMirProtoGenCalculatorCalculator_ifTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6e\xdb\x3a\x12\xbe\x16\x9f\x62\xd6\x17\x81\x14\x08\x72\x92\x2e\x16\x0b\x03\xbe\x68\x73\x76\xbb\x01\x7a\x0e\x0e\xe2\x60\xcf\x45\x51\x18\xb2\x34\xb2\x58\x4b\xa2\x4a\x52\x4e\x8c\x22\xef\xbe\x18\x52\xbf\x49\x14\x3b\xed\xa2\x3f\xa8\x03\x14\x91\x48\xce\x37\xc3\xe1\xcc\xa7\xe1\x34\xd3\xe9\x9f\x61\xb4\x09\xd7\x08\x97\x61\x16\x55\x59\xa8\x85\x84\x48\xe4\x39\x16\x9a\x4d\xa7\x70\x93\x72\x05\x09\xcf\x10\x6e\x43\x05\x6b\x2c\x50\x86\x1a\x63\x58\xed\x40\x87\x52\x5d\xac\x05\x9c\x07\xe7\xb4\xf2\x6d\x3b\x97\x48\x91\x43\xd4\xc2\x05\xb4\x90\x95\x8f\xd4\x30\xc6\xf3\x52\x48\x0d\x2e\x73\x26\x91\x28\x34\xde\xe9\x09\x73\x26\x49\x6e\x7e\xad\xb9\x4e\xab\x55\x10\x89\x7c\x7a\x13\x4a\x75\x99\x89\x2a\x36\x4f\x6f\xc5\x94\x10\x27\xcc\xc9\x61\xef\xaa\x69\x2e\x62\xcc\x0e\xc1\x9b\x96\x52\x68\x11\x89\x6c\x1a\x89\x18\xa3\x97\x89\x48\x54\x53\x89\x9f\x2a\x54\x3a\x39\x48\xb2\xd2\x3c\x9b\x46\x95\x94\x58\x1c\xb4\x5b\x2b\xa0\x85\xc8\xd4\x84\x79\x8c\x4d\xa7\xbd\xf3\x52\x5a\x56\x91\x66\x7a\x57\x0e\x8e\xd1\x0e\xc3\x67\xe6\x28\xc8\x83\x05\xca\x6d\x58\x68\x76\x4f\xc2\xaf\xe3\x18\xb8\x02\x9d\x22\x94\x52\xdc\xed\x20\xa9\x8a\x48\x73\x51\x40\x22\xa4\x19\xce\x51\xa7\x22\x86\x18\x13\x5e\x60\x0c\xbc\x30\xa3\x64\x8a\x09\x07\x1f\x6e\xb9\x4e\xcd\x58\x7d\x74\x8c\x20\xc0\x5d\x8a\xd5\x47\x38\xed\xac\xf0\xe0\x75\x1c\xbb\xef\x52\xe0\x85\x7e\x75\xe1\xc3\x75\xf7\x84\x0a\x4e\xeb\xe7\xa5\x28\x35\x04\x41\x90\x87\xe5\x7b\xa5\x25\x2f\xd6\x1f\xec\x2f\x0f\x5c\x89\xba\x11\x41\x29\xe9\x1f\xa1\x7e\x66\xcc\xd9\x86\x12\x32\x2c\xd6\xba\xc6\xb4\x23\x69\xb8\x45\x58\x09\x91\xd9\x57\xbd\x83\xd5\x4e\x23\x73\x96\x42\xc1\x6c\x0e\xe6\x74\x83\x3f\xf0\xf6\x4d\x95\x24\x28\x5d\x8f\x39\x04\x3b\x87\xa5\x50\xc1\x5f\x92\x6b\x5c\x1a\x30\xf7\x5d\xea\xc3\xb9\xc7\x1c\x9e\x18\xbd\x7f\x9b\x43\xc1\x33\xf2\xa6\x23\x51\x57\xb2\x00\x89\xda\x98\xc4\x9c\x7b\x36\x06\x72\x9d\xfa\x70\x71\x38\x08\x19\xbc\x54\x3a\xd4\x95\x82\x47\xbe\xa8\xa7\x6b\x7f\x3f\x35\xcf\x13\xf2\x87\x4b\xde\xf4\x60\x3e\x87\x73\xa3\xa9\x95\x98\x1b\x3f\xbf\x3f\xfb\xc0\x9c\x7b\xc0\x4c\x21\x3c\x14\xb8\x18\x15\x70\x1a\xb3\xea\xb1\x73\x02\x61\xce\x52\xa2\x2a\xc9\xad\x05\xde\xba\x4d\x06\x04\xd7\xa8\x4a\x51\x28\x24\x6e\x41\xed\x31\x27\xd2\x77\xd6\xf7\x06\x37\x78\x13\x46\x9b\xb5\x14\x55\x11\xf7\xdd\xbf\xfa\x18\xa8\x80\x62\x7e\xc9\x8b\xad\xd8\xa0\x1b\xe9\x3b\x1f\xce\x7c\x98\xbc\x8e\xe3\x89\x6f\x7c\x7b\x23\xde\xec\x34\x2a\xd7\xf3\x1b\x3f\xf9\xad\x47\x7c\x30\xd6\x1c\xea\x6d\x67\xc9\x87\x01\x71\x8d\x61\x8c\xd2\x35\x49\x16\x5c\x15\xfa\x9f\x56\x99\x6b\x50\x83\x85\x8d\x17\xaf\x33\x98\xab\x80\x44\xea\x93\x3e\x31\xd8\x67\x3e\x68\x59\xe1\x8b\xc3\xe6\x01\x96\x7b\x7a\x8d\xca\xf3\xe1\xd5\x4b\xe1\xac\x17\x51\xff\x1e\x96\x6e\x7b\xb2\xb5\x63\x06\x9e\xb2\xce\xf3\x98\xb3\x84\x79\x9d\x44\xf6\x99\xd2\xc7\x3e\xe9\x1d\x1b\x28\x29\x78\xd6\xb2\xc7\x5f\x5c\xa7\x97\x75\x94\x7c\x43\x22\xe9\xa9\xa5\xe8\x68\x03\xea\xb2\xd9\xd7\x91\x68\x7e\x6d\xa2\x39\x72\xc9\x4f\xc6\x25\x8b\x6a\xf5\xcd\x08\x64\x51\xad\x8e\x95\xc8\x2f\x4e\x10\x5f\x59\x89\x2c\xaa\xd5\x91\x3d\x7e\x28\xf6\xf8\x1e\x95\xc8\x50\xed\xb1\x12\x39\x12\xcd\x97\x54\x22\x47\x2e\xf9\xb1\xb8\x04\x75\xdd\x23\x01\x85\x5a\x81\xaa\x5f\x1a\xfa\xa0\x77\x1e\x61\x30\xce\x0a\x2d\x80\xdb\x6b\xb8\x50\xde\xd6\x1b\x80\x39\x28\xab\x8b\xe2\x61\x81\xfa\x86\xe7\x28\xaa\x5a\x9f\x21\xa3\x7a\xa0\xaf\x93\x6c\xb8\x4d\x79\x94\x12\xbd\xf1\x02\x72\x35\x6e\xc2\x10\xd7\x35\x2c\xd2\x33\x20\x78\x38\xef\x0d\xcc\xf9\x4f\xa8\xd2\x4b\x11\x63\x67\x4f\x1a\xaa\xd4\x84\x92\xb1\x28\xca\x38\x16\x1a\xa2\x30\xcb\x78\xb1\x6e\x0d\x44\x09\x7e\x67\x21\x2d\xfc\x1d\x95\x0a\xd7\x3d\xf1\xbd\x16\x37\xaa\x5d\xa3\x8c\x17\xfa\x1f\x7f\xf7\x6c\xe7\x6a\xd6\x26\x91\x7b\x4a\x5c\xdd\xf8\xf5\x4f\x22\x79\x8f\x39\xed\xa6\x06\x10\xb4\xb1\x31\x95\x4d\x20\x91\x1a\x1f\x24\x71\xf2\x48\x1a\xfb\x40\xd4\xfe\x88\x75\x7c\x50\xfa\x09\xb2\x32\x06\x13\xbd\x74\x3c\x44\xce\xd8\xf8\xb0\xa4\x5d\xc8\xb0\x58\xa3\x01\xa4\x19\x27\xc6\x0c\x75\xcd\x06\x1b\x8f\x39\x94\xbb\xcd\xfa\x6d\xb7\x5e\xa2\x6a\xbe\x29\x56\x2e\xd2\x77\xef\x37\x1f\x60\x0e\x5b\x2b\xd3\xa3\xb5\x8e\xce\xbe\x81\xde\x27\x74\x90\x57\xfa\x3a\x94\x56\x7b\x75\x2c\x2c\xc5\x1a\x31\xa5\xd5\x70\x6b\x6d\xbb\xa1\x49\xcc\x30\x8e\xbb\xc4\x3c\x3c\x33\x3b\x04\x97\xe7\x25\x2c\x79\x5e\x76\xd3\x3e\xd0\xfa\xde\x11\x9a\x28\xeb\x89\x10\x9e\x0f\x3c\x2f\xcd\x4a\xef\x65\x46\xd9\xa2\xa2\xa9\x0e\x0e\xb0\xb0\x5f\x58\x3c\x36\xb6\x37\xbb\xcf\xee\x3e\xd0\x13\x5b\x30\xdd\xe2\x21\x38\x25\x04\xca\x24\x8c\x90\xe0\xf6\xf7\x6d\xc7\x2a\x15\xe6\xec\xbf\x69\x8d\xca\xde\x3f\x65\xd9\xa0\xc8\x7b\x68\xe4\x17\x94\x5f\xcf\x5b\xfe\xff\x04\xbc\x67\xf6\xcc\x47\x0d\x5d\x6e\xc3\xac\xdb\xd3\xe7\x7b\x53\x11\xc0\xa9\xfd\x7e\xdb\xaf\xb3\x4f\x5f\xd2\x66\xc8\x7e\xcf\x6d\xb1\xda\xb8\x84\x4a\x3f\x0f\xdc\x41\xad\xf8\xc2\x52\x91\x5e\xde\xb5\x2b\x9f\xfe\x7e\x9b\xf2\x70\xff\xb7\xbb\xa9\x44\x08\xf2\x7a\x0f\xa4\x29\x16\x5f\x08\x89\xaa\xc1\xe4\xc9\xc0\x0d\xf3\x39\x24\x21\x91\xa1\xa9\xe8\x28\x79\xe8\xe3\xb1\x0d\xb3\xc0\x1d\x86\x93\x67\x91\xed\x41\xd1\x1a\x9e\x97\x81\x8d\x77\x3a\x5e\x1f\x4e\xa8\x50\x61\xce\x13\x06\x0d\x2c\x32\xc5\xc9\x48\x19\x6c\x0b\xa7\xc3\x40\x1a\x12\xdf\x67\x77\x2f\x0d\x46\xb7\x60\x88\xfd\xbb\xed\x63\xfc\x56\x80\xca\x87\x57\x07\x9c\xf1\x81\xb5\x9b\x2d\xdb\x4c\x6a\x8d\xa6\xec\x31\xb5\x7e\x90\xd4\xb2\x9f\x83\x9f\x3a\xb5\xea\x20\xfb\x75\x52\x8b\x4d\xa7\xbf\x71\x55\x86\xda\x96\xf5\x95\xc2\x18\xb4\x30\xc5\x7f\xbf\xf2\x57\x9c\xea\xf5\xbc\xcc\x30\x2f\x50\x1f\xda\x6b\x09\x06\xc1\xa5\x52\x71\x4b\x1a\xe8\x52\xd1\xdc\xc3\x85\x84\x42\x3c\x53\x30\x35\xb6\x1d\x9a\xf9\x12\x3f\x0d\xca\x7c\xf3\xd0\x54\xf9\xe6\x46\x3f\x7e\x09\xd8\xcb\x07\x87\xde\xb9\x25\x7e\xea\xdf\xb8\xc7\xdb\x33\xea\x96\x93\xdf\xcd\xfa\x7f\x57\x45\xf4\x47\x98\x9b\x10\x8e\x42\x85\xf6\xbf\x30\x66\x75\x54\xcd\xe6\xd0\xb2\x3e\xed\xda\x70\x9c\x61\xb5\x81\xdd\x07\x06\x99\xc5\x5f\x54\xab\x3e\x7e\x1b\xfa\x5f\x8d\xcf\x9c\x18\x93\xb0\xca\xf4\xac\x8b\xcd\x24\xd7\xc1\xbf\xc8\x93\x89\x3b\x31\x87\x9d\x73\x95\xd3\xc9\x4e\xbc\x96\x97\x9e\xe9\x0f\x29\x1f\xc4\xc6\x78\xd1\xfe\x31\x45\xf0\x16\x75\x73\x7e\xf6\x6e\x41\xb6\xdb\xe4\x10\x1b\x38\x39\x01\xd5\xb7\xb0\x6b\xf1\xa8\x4e\xdb\x33\xed\xa6\xe8\x19\x75\xbd\x76\x60\x5f\x5f\x34\xd0\xd7\xf5\x99\x22\xa3\xf0\xd4\xc4\xde\x1c\x46\x82\x8f\x64\xae\xfe\x8b\x52\x71\x51\xcc\x80\x7e\xce\x7d\xe6\x38\x97\x76\xf6\x66\x57\xe2\x0c\xe0\x8c\x86\xae\xea\x98\xbe\x8a\x69\x1d\x45\x4e\x37\x62\xe6\xeb\x4b\xb9\x95\x69\x44\xb4\x05\xa5\x1f\x33\x54\x47\x67\x3d\x6a\x03\x98\x42\xf7\x46\x50\x18\xbb\x83\x66\x95\x67\x04\x8c\xff\x1a\x94\xa6\x7b\x45\x13\xd7\xa8\xaa\x4c\xff\x86\x2a\x9a\x01\x4c\x26\xc6\x6c\xbb\xf9\x7a\x75\xdb\xb7\x31\x8e\x18\x90\xcf\xff\x02\x00\x00\xff\xff\xf0\x46\x43\x36\x97\x24\x00\x00"

func tarsMirProtoGenCalculatorCalculator_ifTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirProtoGenCalculatorCalculator_ifTmpl,
		"tars/mir/proto/gen/calculator/Calculator_IF.tmpl",
	)
}

func tarsMirProtoGenCalculatorCalculator_ifTmpl() (*asset, error) {
	bytes, err := tarsMirProtoGenCalculatorCalculator_ifTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/proto/gen/calculator/Calculator_IF.tmpl", size: 9367, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x9a, 0x4a, 0x22, 0x1e, 0x26, 0xb1, 0xde, 0x80, 0x8f, 0x23, 0xda, 0xc3, 0xc8, 0x13, 0xc8, 0x7f, 0x35, 0x77, 0xb3, 0x6f, 0x1, 0xf2, 0x1a, 0xb7, 0x73, 0x4e, 0xcb, 0x3d, 0xa1, 0xd, 0x8}}
	return a, nil
}

var _tarsMirServantsBaseTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x6a\x1b\x31\x10\xc6\xcf\x9a\xa7\x18\x74\x28\xbb\xc1\xdd\xbd\x1b\x7a\x69\x28\xf4\x0f\x4d\x4a\xf3\x02\x96\xe5\xb1\xa2\xc4\x2b\x2d\xa3\x51\x9b\xb0\xec\xbb\x17\xc9\x36\xd9\xb4\x04\xf7\x36\x7c\xf3\xe9\x9b\x9f\x46\x1a\x8d\x7d\x34\x8e\x30\x11\xff\x32\x41\x12\x80\x1f\xc6\xc8\x82\x0d\x28\x1d\x48\xfa\x7b\x91\x51\x03\x28\x3d\x4d\xd8\xfd\x78\x74\x37\x66\x20\x9c\xe7\xde\x07\x21\x0e\xe6\xd0\x13\x73\xe4\x27\x0d\x4a\x3b\x2f\xf7\x79\xdb\xd9\x38\xf4\xce\x87\xf7\x2e\x06\x6f\x4b\xa5\xa1\x05\x90\xe7\x91\x70\x6b\x12\xdd\x1d\x27\x61\x12\xce\x56\x70\x02\xd5\xf7\xf8\x90\x93\x20\x0d\xa3\x3c\xc3\x7c\xf2\x32\xa5\x31\x86\x44\x0b\xe3\x75\xdc\x11\xfa\x20\xb8\x79\x48\x31\xac\xb5\x8d\x3b\xd2\x1b\x50\xdf\x93\x2b\x2e\x1f\xdc\xb9\x33\x24\x57\x1a\x3f\x29\xe5\x83\x60\x65\xdd\x1b\x4b\xd3\x7c\x36\x70\xed\xac\xe2\xe0\xa5\x8e\xd5\x9b\x32\x78\x9f\x83\xc5\x26\xe1\xd5\x02\xb4\xc5\x94\xad\xa5\x94\x1a\x8b\x57\xce\x87\xee\x3a\x06\xa1\x27\x59\xe1\xce\x88\x59\x66\xb7\x13\xa8\x42\x8d\xeb\x0f\xf8\xee\x8c\x3f\x81\xaa\xdc\x6b\x44\x2c\xbb\xec\xee\xc4\x48\x4e\xb7\xdf\x56\xa0\x0a\x78\xd1\x51\x9f\x46\xe8\x22\x1e\xa1\xd7\x35\x7e\x05\x6a\x06\x65\xbb\xaf\x77\xb7\x37\xcd\xeb\xe3\x75\x41\xed\xdb\xd4\x66\x1b\x59\xfe\x61\x26\x66\x3c\xbe\x58\xf7\x59\x64\xfc\x54\xca\x16\x2f\x81\x13\x73\x57\xea\xa6\x5d\x52\x17\xb5\x06\x54\xf9\x85\x73\xe1\xbe\x04\xb9\x37\xfe\x90\x99\xde\xc6\xbc\xcc\xb6\xd8\xca\x97\xd3\x9f\x2c\xf1\xc4\x15\xed\x7f\x78\x2f\x24\xfc\x75\x87\x40\xbf\x3f\xbe\x5c\xa1\x69\x5f\x7d\xea\x0a\x2b\x99\xc3\x52\x9d\xe6\x72\xf8\x4f\x00\x00\x00\xff\xff\xa4\xa3\x27\x00\x6a\x03\x00\x00"

func tarsMirServantsBaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirServantsBaseTmpl,
		"tars/mir/servants/base.tmpl",
	)
}

func tarsMirServantsBaseTmpl() (*asset, error) {
	bytes, err := tarsMirServantsBaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/servants/base.tmpl", size: 874, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8, 0xd7, 0x6c, 0x72, 0x8c, 0x5d, 0xe9, 0x6e, 0xbb, 0x8, 0x0, 0x9f, 0xca, 0xa, 0x18, 0x15, 0xdf, 0x61, 0xd7, 0x45, 0x35, 0xe5, 0x95, 0xf2, 0x42, 0x5f, 0xb1, 0xc2, 0xfc, 0x7e, 0xbf, 0x25}}
	return a, nil
}

var _tarsMirServantsServantsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x54\x31\x6f\xdb\x3c\x10\x9d\xc9\x5f\x71\xd1\x10\x48\x81\x3e\x0a\xf1\xb7\xb9\xf0\x90\x06\xed\xd6\x24\x80\x8b\xae\x05\xc5\x30\x12\x6d\x8a\x14\x8e\x94\x62\xc3\xf1\x7f\x2f\x28\xca\x91\x52\x18\xde\xda\xa9\x9e\x44\xdd\xbb\x77\x4f\xef\xd1\xd7\x72\xb1\xe5\x95\x04\x27\xb1\xe7\xc6\x3b\x4a\x55\xd3\x5a\xf4\x90\x52\x92\x38\x8f\xc2\x9a\x3e\xa1\x94\x24\x87\x03\xb0\xa7\x6d\xf5\xc0\x1b\x09\xc7\x63\xa1\x8c\x97\x68\xb8\x2e\x24\xa2\xc5\x5d\x72\x01\xa1\xad\xe0\xde\xe2\x25\x48\xe7\x95\x76\x67\x00\x8d\x42\x51\x54\xd2\x14\xbc\x55\x67\xca\x2d\x5a\x6f\x87\xba\xe0\x5a\x74\xfa\x34\xa6\x52\xbe\xee\x4a\x26\x6c\x53\x54\xca\xfc\x57\x59\xa3\x44\x78\x4a\x68\x46\xa9\xdf\xb7\x12\x26\xfc\x1a\x7b\x70\x1e\x3b\xe1\xe1\x40\x49\xc9\x9d\x5c\x47\x2b\x28\x11\x5c\x87\xea\xcd\x04\x66\xf7\xef\x8f\xf4\x48\xe9\x4b\x67\x04\xa4\x6e\x8e\x58\x63\x9f\xc1\xdd\xf3\x73\x2a\xe0\xa6\x52\x86\xdd\x5b\xe3\xe5\xce\x67\x81\x5c\xd7\x2e\x07\xac\x1d\x2c\x57\x20\xd8\x13\x47\xde\xa4\x89\xae\x5d\x92\xe5\xd3\x19\xc3\x99\x92\x9e\x63\x88\x80\xe8\x3a\xb4\xe4\x80\xd2\x81\x32\xfe\xff\x05\x25\xa4\x87\xe9\xa7\x82\x50\x22\x11\x6f\x73\x90\x88\x0b\x80\x21\x10\x4a\x32\x4a\x89\x7a\x81\x7e\x78\x7d\x0b\x2b\x18\xc3\x64\x77\xde\xaa\x54\xd7\x2e\xfb\x34\x56\x56\x60\x94\x0e\xfa\x88\xae\x61\x15\xa7\xa4\x7d\x46\xc9\x71\xc6\xb0\xf8\x9d\x01\x4f\x0c\x8b\x39\x03\x9e\x63\x18\xc6\x5c\x45\xd0\xdb\x5b\xec\xb9\x9a\x7a\x1c\xe3\xa5\x45\x9f\x8a\x3c\x6a\xdf\xb1\x2f\x88\x83\x1b\x0f\xd6\xff\xe0\x5a\x3d\xcb\x2c\x50\x4b\xdf\xa1\x39\x71\xfe\x1c\xc0\xc1\x49\xc7\x62\x4e\x2c\xb8\x7e\xb2\xeb\x1a\xe5\x28\x6f\xae\xce\x31\xd7\x09\x21\x9d\x0b\xb3\x02\x82\x92\x23\x48\xed\xe4\x58\x7d\xe1\x4a\x77\x28\x47\x25\x83\xfe\x0b\x29\xaf\xbb\xf2\x5f\xca\x7f\x3d\xe5\xe0\xfa\x9f\x48\xb9\x28\xe0\x41\xbe\x4e\xff\x6f\x88\x4a\x80\xc3\xec\x9d\x6a\x5a\x2d\x1b\x69\x3c\xd8\x72\x23\x85\x8f\x77\xe3\x43\x5f\x9a\x01\x6f\xd5\x6c\x51\x84\xa9\xc2\x36\x4d\xf8\x8a\x71\x15\xb2\x6f\xfb\x7b\xdb\x34\x9d\x51\x22\xb6\x0c\xbb\xe6\xb1\xdc\x04\xcc\xb0\x0b\xd9\x63\xb9\xf9\x8a\xb6\x49\x93\x2d\xee\xd9\xd9\x05\xf4\x58\x6e\x92\xec\x7d\x49\x2d\x57\x60\xe4\x6b\x7a\x16\x99\x45\x01\x6c\xed\x51\x99\xea\xbb\x7d\x42\xbb\xdb\xa7\x71\x62\x0e\x91\x20\x5c\xa4\xf1\x8b\xaf\x3f\xdc\xf3\xe0\xd9\x6c\x2b\x2e\xc3\x98\xcf\xd3\x39\xcd\x72\x4a\x46\x11\xcb\x78\x59\xe3\x21\x8f\xbe\xfe\x0a\x00\x00\xff\xff\xe5\x1d\xa9\x39\x60\x06\x00\x00"

func tarsMirServantsServantsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirServantsServantsTmpl,
		"tars/mir/servants/servants.tmpl",
	)
}

func tarsMirServantsServantsTmpl() (*asset, error) {
	bytes, err := tarsMirServantsServantsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/servants/servants.tmpl", size: 1632, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xd3, 0xf9, 0x7d, 0xaf, 0x24, 0xf9, 0xaa, 0xa4, 0x4e, 0xfe, 0xc1, 0xbf, 0xd3, 0x2a, 0xbc, 0x8c, 0xd, 0x14, 0xc4, 0x21, 0x73, 0xd4, 0x7e, 0x7a, 0xe, 0x2c, 0x24, 0x7a, 0x75, 0x5e, 0x6b}}
	return a, nil
}

var _tarsMirService_confTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x5b\x4e\xc4\x30\x0c\xfc\x66\x4f\x91\x0b\xb4\x4d\x77\x25\x96\x8f\x04\x89\x13\xc0\x15\x4c\x1a\x6d\x4a\xd3\xd8\xa4\x2e\xd0\xdb\xa3\xb6\xb0\x88\x47\x68\xd6\x3f\x91\xe2\xf1\x78\x6c\x8d\x15\x43\x1c\x6e\x77\xe2\x23\x14\x10\xf9\xd6\x00\xb7\x18\xbe\x7e\xcf\xd9\xc1\xc6\x17\x1b\x7f\x27\x3e\x03\x88\x74\x17\xa7\x64\x7e\xad\xd7\x84\x91\xc1\x27\x51\x1e\x0d\x78\xcd\x86\x44\xe1\x44\xbd\x3f\x96\xb2\x94\x65\x2d\x0a\x12\xb5\x94\x87\xa3\x28\x58\x1c\xa4\x94\x72\x77\xb5\x84\xc7\x13\x01\x3b\x5d\x71\x4f\x49\x4e\xd5\xc5\xa9\x5c\xfb\x96\x0f\xcb\x73\xff\xf8\x74\xd7\x00\xf1\x7f\xf3\x9c\xe7\xf2\x1e\x5f\x37\x51\x36\x34\x84\x6d\xe0\xa4\xf4\x9b\x59\xfa\xf5\x22\x7d\x8b\xcb\x41\x68\xbc\x3d\x45\x1c\x97\x8d\xa6\xa4\x6f\xf2\xf4\xf0\x66\x30\x84\x41\xef\x65\x56\x5f\x8a\xc8\x68\xd0\xeb\xd9\x17\x9b\xe8\xe7\xd1\x8e\xd6\x00\xe9\x3a\x8b\x7c\x81\x73\xdb\x5b\x1c\x59\xe7\xed\x61\x76\x0c\x04\xfe\x73\x07\xdb\xc5\xae\x9f\xc5\x65\x74\x71\x7d\x67\xa7\x0c\x20\xbb\x68\xa1\x19\x74\x9d\x36\x5a\x75\x91\xd3\x54\xf5\xf3\xa6\x54\xf5\xed\x06\x55\xb5\x5e\xe8\x7b\x00\x00\x00\xff\xff\xde\xc1\x14\x9b\xa9\x03\x00\x00"

func tarsMirService_confTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirService_confTmpl,
		"tars/mir/service_conf.tmpl",
	)
}

func tarsMirService_confTmpl() (*asset, error) {
	bytes, err := tarsMirService_confTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/service_conf.tmpl", size: 937, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0xe6, 0x3c, 0xe6, 0xe, 0xe, 0x1c, 0x60, 0xcd, 0xb3, 0xa6, 0x95, 0x70, 0x62, 0xc, 0x6a, 0x99, 0x2a, 0xbd, 0x9f, 0x20, 0xce, 0xb0, 0x90, 0x23, 0x10, 0xcd, 0x67, 0x58, 0xea, 0x1, 0x29}}
	return a, nil
}

var _tarsMirVersionVersionTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x31\x6b\xc3\x30\x10\x85\x67\xdf\xaf\x38\x04\x01\x1b\xdc\xa8\x5d\x03\x19\xda\xa5\xed\x10\x28\xb4\x64\x57\x1c\xd9\xbe\xd6\xd6\x09\x9d\x94\x0c\x21\xff\xbd\xc8\x4e\x1a\x32\x75\xd2\xe9\xf4\x3d\xdd\xbd\xe7\x4d\xf3\x63\x3a\x8b\x07\x1b\x84\xd8\x01\xd0\xe8\x39\x44\x2c\xa1\x50\x1d\xc5\x3e\xed\x96\x0d\x8f\xba\xe1\x60\x59\x74\xc7\x0f\x62\xc7\x83\x0d\x7a\x3e\xd4\x3d\x25\x14\x92\x17\xeb\xf4\xc0\x5d\x48\xa2\xa0\x02\x38\x98\x90\x3f\xd3\x1a\x5f\x29\xbe\x19\xe9\x71\x6b\x86\x64\xf1\x48\xc3\x80\x3b\x8b\x62\x23\xee\x53\x20\xd7\xe1\x2e\xd1\xb0\x87\xe2\xca\xad\x51\xa9\x49\xf8\x92\xfb\x5f\x34\xda\x7f\xa5\x37\x72\x12\x57\x00\x5a\xe3\xb3\xf7\x5b\x1b\xd0\x78\x3f\x50\x63\x22\xb1\xbb\xba\x45\x72\x2d\x4f\x1b\x5e\x98\x35\xce\xbe\x96\xdb\x19\x38\x41\xb1\x31\xdf\x1c\x56\xf8\x58\x43\xb1\x21\x97\xcb\xa7\x1a\x8a\x0f\x13\x9b\x7e\xea\x9e\xa7\x19\x9f\x3d\x1f\xdf\x5d\xcb\x28\x3d\x1f\xef\x46\xe5\x11\x61\x9c\x6a\x68\x93\x6b\xfe\xd0\xb2\xc2\x13\x14\x73\x52\xcb\xdc\x68\x4b\x25\xd1\x84\x98\xe5\xe5\x25\x84\xd5\x42\x6e\xf6\xf3\x65\x5e\x74\xb5\x10\x55\x5f\x03\xad\x6f\x44\x7d\x79\xaf\xe0\x0c\xbf\x01\x00\x00\xff\xff\xea\xf2\x64\xb0\xda\x01\x00\x00"

func tarsMirVersionVersionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirVersionVersionTmpl,
		"tars/mir/version/version.tmpl",
	)
}

func tarsMirVersionVersionTmpl() (*asset, error) {
	bytes, err := tarsMirVersionVersionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/version/version.tmpl", size: 474, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xec, 0x6c, 0xe5, 0x9e, 0x84, 0x7a, 0x8a, 0xc6, 0x36, 0x96, 0xe2, 0xbe, 0x5b, 0x2e, 0x2c, 0x3e, 0x98, 0x44, 0x25, 0x56, 0xf6, 0x1f, 0x7, 0xca, 0x96, 0x9e, 0x4a, 0xe9, 0xf5, 0xd8, 0x33}}
	return a, nil
}

var _tarsSimpleReadmeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xb1\x0e\xc2\x30\x0c\x44\xf7\x7c\xc5\x49\x16\x62\xe3\x27\xd8\xd8\xd9\xeb\xa6\xa6\x54\x4d\x6b\x64\x3b\x7c\x3f\x6a\x08\x0b\xdb\xc9\xf7\xf4\x7c\x44\xb8\x72\xc9\xb5\x70\xa8\xa5\x5b\xf5\x00\x63\x92\x4d\xa1\x0f\x04\x9b\x63\x56\xb8\xd8\x5b\xec\x92\x12\x11\x11\xee\xce\xb3\xa4\x61\x18\x46\xf6\x67\x3a\x61\xe3\x55\xbe\x08\x08\x56\xf7\x96\x97\x2c\xbf\x2a\x97\x45\xf6\x5e\xb5\x1c\x08\xc5\x24\x63\x9d\xff\x51\x93\x22\xec\x87\xe7\xc5\x79\x85\xd6\xe8\xe2\xd0\x63\xcc\xd9\xdb\xbd\xbf\xff\x04\x00\x00\xff\xff\x2e\x02\x2d\x89\xbb\x00\x00\x00"

func tarsSimpleReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleReadmeTmpl,
		"tars/simple/README.tmpl",
	)
}

func tarsSimpleReadmeTmpl() (*asset, error) {
	bytes, err := tarsSimpleReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/README.tmpl", size: 187, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0x39, 0xa9, 0x29, 0x3f, 0x65, 0xb2, 0xc3, 0x51, 0xd6, 0x13, 0x5d, 0xe6, 0x93, 0x6d, 0x9f, 0x54, 0x37, 0x19, 0x3f, 0xe2, 0x89, 0xa, 0x42, 0xf6, 0xfb, 0x79, 0xe6, 0x31, 0x62, 0x50, 0x37}}
	return a, nil
}

var _tarsSimpleGitignoreTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x8e\x51\x6a\xc3\x30\x10\x44\xff\xf7\x14\x03\xf9\x13\xa9\x72\x87\xd2\x52\x0a\x85\xfe\xe4\x00\x91\xed\xb5\xbc\x65\xe3\x35\xd2\xaa\xa9\x09\xe9\xd9\x83\x93\x9f\xe1\xc1\x0c\x8f\xd9\xe1\x55\xe6\x54\x84\x2b\x46\x2b\x58\x8a\xe5\x92\xce\x15\x69\x1e\xb0\x68\xcb\x32\x57\x0a\x91\xff\xf8\x99\xff\x14\xe2\xa0\x4a\x21\x56\xdb\x70\x55\xe9\x88\x76\x38\x72\x75\x74\x9b\x69\xdd\xa3\x6b\xa2\x8e\x8b\xf8\x84\x53\x36\xf8\xd6\xbd\xf4\x27\x0a\x71\xc3\x6d\xfe\xdd\x7c\x69\x0e\x1b\xe1\x13\x23\x1b\x7a\xfb\xe5\x92\x32\xc3\xcd\x74\x8f\xba\x70\x2f\xa3\xf4\x49\x75\xc5\x65\xe2\x19\xad\xf2\xf0\x54\x7e\x89\xf3\xe7\xdb\x3b\x85\x68\xed\x21\xfb\x30\x7d\xbc\x2d\xf6\xc3\xbd\x63\x14\xe5\x4a\x51\x06\x4e\x07\x0a\x51\xce\x4a\x74\xb8\x5e\x11\x8f\xa9\x64\x76\xdc\x6e\xf7\x00\x00\x00\xff\xff\xc7\xa8\xb8\xb9\xf4\x00\x00\x00"

func tarsSimpleGitignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleGitignoreTmpl,
		"tars/simple/gitignore.tmpl",
	)
}

func tarsSimpleGitignoreTmpl() (*asset, error) {
	bytes, err := tarsSimpleGitignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/gitignore.tmpl", size: 244, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0x28, 0xe9, 0x3d, 0xdd, 0xfa, 0xf4, 0xa3, 0x5a, 0x75, 0x88, 0x7e, 0x55, 0xc3, 0xe8, 0x5a, 0xeb, 0xbe, 0x81, 0x37, 0xa5, 0x2c, 0xe8, 0x60, 0x66, 0x3, 0x51, 0x6f, 0xf0, 0x48, 0x2, 0xd1}}
	return a, nil
}

var _tarsSimpleGo_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xce\xb1\x0a\xc2\x30\x10\x06\xe0\xd9\x7b\x8a\x1b\x75\xe8\xa5\xd1\x59\x17\x07\x37\x71\xf0\x05\x92\xf6\x88\xc1\x84\xd3\xc4\x14\xb5\xf4\xdd\xa5\x55\xc1\x4d\xb8\xe1\xf8\xf9\x7e\xf8\xa3\xb4\x25\x30\xf6\x3d\xd2\xe1\xec\xf6\x26\x32\x0e\x03\x80\x13\xd4\xa4\x97\x00\x89\xaf\xc5\x27\xc6\x39\xcc\x9c\xbf\x9d\x8a\xa5\x46\xa2\x3a\x9a\x94\xb7\x41\x4a\x3b\x7d\x3b\xc1\x4e\x93\x26\x0d\x88\x88\x3f\xac\x91\xc4\x92\x95\x93\x2a\x73\xec\x38\x61\x57\xd3\x8a\xea\x2f\xb3\x25\x4f\x8c\xef\xc1\x58\xf5\xf4\xb1\x8a\x59\x05\x6f\x93\x49\x8f\x91\xd6\xa4\x61\x31\x4e\xb8\x04\xd3\xf0\xdf\xc6\x7a\x83\x44\xea\x7d\x9f\x0c\x5e\x01\x00\x00\xff\xff\x0d\x37\xe4\x97\xdf\x00\x00\x00"

func tarsSimpleGo_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleGo_modTmpl,
		"tars/simple/go_mod.tmpl",
	)
}

func tarsSimpleGo_modTmpl() (*asset, error) {
	bytes, err := tarsSimpleGo_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/go_mod.tmpl", size: 223, mode: os.FileMode(0644), modTime: time.Unix(1586696481, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0xf5, 0x96, 0x2b, 0xfb, 0xcc, 0x86, 0xe9, 0xc, 0x85, 0x3a, 0xed, 0xfd, 0xd1, 0xec, 0xec, 0xf0, 0xc3, 0x60, 0x76, 0x34, 0x92, 0x9d, 0xfb, 0xff, 0xeb, 0x93, 0x17, 0xa, 0x12, 0xd0, 0x44}}
	return a, nil
}

var _tarsSimpleInternalClientClientTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xcf\x8a\xdb\x30\x10\x87\xcf\xd2\x53\x4c\x05\x5b\x6c\x70\x14\x25\x85\xb6\x04\xb2\xd0\x06\x7a\x6b\x37\xd0\x42\x0f\x6d\x0f\x8a\xac\x24\x4a\xac\x3f\x19\x8f\x77\x13\x42\xde\xbd\xc8\x4e\x1b\x5a\x96\x3d\x18\x8d\xf1\xcc\xf7\xfb\x3c\x4a\xda\xec\xf5\xc6\x82\xd7\x2e\x70\xee\x7c\x8a\x48\x50\x70\x26\x4c\x0c\x64\x8f\x24\x38\x13\x6b\x4f\x82\x73\x26\xce\x67\x90\xcb\xfd\xe6\x8b\xf6\x16\x2e\x97\xb1\x0b\x64\x31\xe8\x66\xdc\x44\xa3\x29\xa2\x78\xa1\xa5\x23\xd7\xb4\xcf\x34\x24\x8c\x14\xc7\x1b\x1b\xc6\x46\x37\xa6\x6b\x06\x4e\xc9\xf9\xba\x0b\xa6\x97\x2a\x4a\x38\x73\x66\xa2\xf7\x30\x9b\xc3\x35\x4a\x7e\x3e\x2d\xa2\xf7\x5d\x70\xfd\x6b\x51\x72\x16\x57\xbb\xdc\xd0\x07\xc9\x87\xd5\xee\x13\x46\x5f\x88\x3d\x9e\xe4\x8d\x2c\x17\x7f\xcb\x87\xd5\x4e\x54\x20\xc8\x24\x18\x6d\x61\x32\x7d\x27\x95\x54\x72\x02\xa3\x04\x13\xa5\xa6\xef\x61\x44\xf0\x56\x29\xa5\x44\xc9\x99\x4e\x29\xb3\x83\x7d\x2a\x9e\x85\x95\x83\xa0\xfc\x4a\xe8\xc2\xe6\x5b\x5c\x62\x3c\x9e\x8a\xb8\xda\x55\xa0\x53\x2a\x39\x67\x8f\x1a\x01\x6d\x0b\x2e\xd0\x9b\x29\x67\x26\xe3\xae\x1b\x96\x1f\xb5\xd9\x6f\x30\x76\xa1\xce\xff\x81\x87\x63\xfe\xe8\x75\xfa\xd1\xf6\xb8\x5f\xc3\x71\xe6\x8c\x89\xda\xfa\x28\x66\x20\x08\x3b\x2b\x2a\xce\x2e\x9c\xb3\xb5\x27\xb9\x44\x17\x68\x5d\x08\xb4\x07\xdb\xd2\xfc\x1e\x74\x5d\xc3\x44\x81\x0e\xfd\x01\x4f\x8e\xb6\x80\xf6\xb0\xa0\xe3\xec\xee\xf1\x67\x10\x15\xe0\xe1\x98\xd3\x2c\x55\x60\x11\x73\xa4\x4e\x49\x7e\xa8\xeb\xef\x8e\xb6\x8b\x41\xad\x30\x15\x4c\xd4\xf0\xbc\x46\xdb\xfe\x99\x72\xeb\x7e\xe6\xd5\x1c\x82\x6b\xf2\xf5\xdc\x24\x9a\x50\x58\xcc\x0b\xc9\xe8\x0e\x43\x76\xfc\x4f\xb1\x4d\x31\xb4\x76\x7e\x0f\x68\x69\x76\x57\xe7\xbd\x74\xcd\xb5\xfa\xc7\x30\xbb\xdd\x52\x2f\xfc\x77\x00\x00\x00\xff\xff\x1f\x86\xc9\xc2\xac\x02\x00\x00"

func tarsSimpleInternalClientClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleInternalClientClientTmpl,
		"tars/simple/internal/client/client.tmpl",
	)
}

func tarsSimpleInternalClientClientTmpl() (*asset, error) {
	bytes, err := tarsSimpleInternalClientClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/internal/client/client.tmpl", size: 684, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0x5f, 0x8a, 0x66, 0x5, 0x76, 0xe8, 0xc7, 0xca, 0x31, 0x50, 0x1f, 0x47, 0x81, 0x96, 0x96, 0xd6, 0xde, 0x5a, 0x96, 0x56, 0x31, 0x4f, 0xbc, 0xa2, 0x44, 0xb9, 0xc8, 0xbc, 0xbc, 0x32, 0x8e}}
	return a, nil
}

var _tarsSimpleInternalDebugDumpTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\x4d\x6b\xe3\x30\x10\x3d\x5b\xbf\x62\xf0\x65\x6d\x48\x64\x79\x59\x76\x21\xb0\xb0\x4b\x4a\x7b\x4b\x0a\xce\x1f\x90\x65\xc5\x71\x12\x69\xc4\x68\x94\x0f\x4a\xff\x7b\x91\x73\x68\x8f\x3d\xe9\xe9\xe9\x69\xde\xbc\x17\xb4\x39\xe9\xd1\xc2\x60\xfb\x34\x0a\x31\xb9\x80\xc4\x50\x89\xa2\x1c\x27\x3e\xa4\x5e\x1a\x74\xcd\x4e\x53\x5c\x9f\x31\x0d\x33\x7a\xc1\x86\x35\xc5\xf2\x1b\x9a\x26\x10\x32\x1a\x3c\x37\x64\x63\xa3\x07\x37\xf9\x7d\x29\x6a\x21\x9a\x06\x9e\x92\x0b\x1d\x6b\x73\x82\x21\xb9\x00\xd1\xd2\x45\x7b\xfe\x11\x21\x66\x32\x2b\xb0\x3f\x82\x1d\x57\xd0\x31\xd9\x18\x77\x36\xb2\x5c\xa3\x67\x7b\xe3\x8c\x3b\x4b\x17\x4b\x5f\x99\x6d\x7f\xdc\xf6\xc7\x7f\x6c\x02\x2c\x0f\xd0\xfe\xfc\x23\x95\x54\xb2\x85\x65\x80\x56\xa9\xf6\x17\x2c\x19\x7e\x2b\xa5\x94\xd8\x27\x6f\x3e\x17\xa8\xb2\x51\x64\x9a\xfc\x58\x43\xf5\x00\x0b\xb0\x44\x48\x35\xbc\x89\xc2\xa0\x73\xb0\xfa\x0b\x39\x91\xdc\xd8\xeb\x1a\x9d\x4b\x7e\x32\x9a\x91\xaa\x5a\x14\x3a\x84\xfc\xec\xed\xb5\x7a\x44\x94\xff\xf3\xf1\x5c\x3f\xbe\xca\x6e\x9e\xb8\xc3\x57\xc2\xdb\x3d\x9b\x2d\x40\x87\x50\x8b\x82\x2c\x27\xf2\xf9\x22\x37\xc8\xd3\xfe\x5e\x95\xb3\x47\x2e\x64\x6e\xa1\xac\xc5\xbb\xf8\x08\x00\x00\xff\xff\x23\xf5\xb1\xdd\xa3\x01\x00\x00"

func tarsSimpleInternalDebugDumpTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleInternalDebugDumpTmpl,
		"tars/simple/internal/debug/dump.tmpl",
	)
}

func tarsSimpleInternalDebugDumpTmpl() (*asset, error) {
	bytes, err := tarsSimpleInternalDebugDumpTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/internal/debug/dump.tmpl", size: 419, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x78, 0xc2, 0x85, 0xf9, 0xf5, 0xb0, 0x89, 0x2d, 0x4c, 0xf9, 0x97, 0x95, 0xab, 0xd4, 0xf0, 0x6e, 0x8, 0x7, 0x22, 0xc8, 0xe, 0xae, 0x5a, 0xb, 0x28, 0x42, 0xc8, 0x62, 0x6e, 0x1a, 0x98}}
	return a, nil
}

var _tarsSimpleInternalDebugPprofTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xb1\x6a\x03\x31\x10\x44\x6b\xed\x57\x2c\x5b\x49\x24\x58\xae\x5c\xa4\x4b\x9f\x22\x90\x0f\x08\xf2\x9d\x2c\x2f\xd9\xac\x84\xb4\xe7\x26\xf8\xdf\xc3\xdd\x41\x20\x2e\x67\x60\xe6\xbd\x18\xf1\xe9\xbc\xb0\xcc\xd8\x5a\xaf\x17\x80\x96\xa6\xaf\x54\x32\xce\xf9\xbc\x14\x00\xfe\x6e\xb5\x1b\x7a\x70\x24\xb5\x10\x38\xd2\x6c\xf1\x6a\xd6\x08\xdc\x27\xfe\xa5\xb8\xcd\x09\x02\xc0\x65\xd1\x09\x59\xd9\x7c\xc0\x1f\x70\xa5\xe2\xda\xec\xc1\x49\x2d\x87\xf7\xce\x6a\xa2\x9e\x86\xa5\x6e\x98\x76\x34\x8e\xdc\x6f\x3c\x65\x14\x1e\x96\x15\x59\x51\xea\x94\xe4\x5a\x87\xbd\x9c\x8e\xa7\x63\xdc\x94\x76\x50\xa4\xf0\x70\xb6\x4a\x1c\xde\xb6\xe9\xab\xce\x1f\xb9\xdf\xb2\xa7\xff\x07\xf4\x8c\xca\x12\x02\xb8\xbb\x0f\x70\x87\xdf\x00\x00\x00\xff\xff\xa6\x30\xd6\x1f\xfc\x00\x00\x00"

func tarsSimpleInternalDebugPprofTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleInternalDebugPprofTmpl,
		"tars/simple/internal/debug/pprof.tmpl",
	)
}

func tarsSimpleInternalDebugPprofTmpl() (*asset, error) {
	bytes, err := tarsSimpleInternalDebugPprofTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/internal/debug/pprof.tmpl", size: 252, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8, 0x3, 0xcf, 0xc4, 0x4e, 0xce, 0x52, 0xf, 0x5c, 0x86, 0x7c, 0xf8, 0xfb, 0x8a, 0x70, 0x5a, 0x42, 0xbe, 0x2, 0x41, 0xd2, 0xd6, 0x84, 0x42, 0x57, 0xb, 0x4f, 0xa, 0xc7, 0x9b, 0x1c, 0xd3}}
	return a, nil
}

var _tarsSimpleInternalInternalTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\xcc\x2b\x49\x2d\xca\x4b\xcc\xe1\x02\x04\x00\x00\xff\xff\xea\xb7\x79\x06\x11\x00\x00\x00"

func tarsSimpleInternalInternalTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleInternalInternalTmpl,
		"tars/simple/internal/internal.tmpl",
	)
}

func tarsSimpleInternalInternalTmpl() (*asset, error) {
	bytes, err := tarsSimpleInternalInternalTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/internal/internal.tmpl", size: 17, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0xc8, 0xf2, 0xa7, 0x61, 0xa7, 0xd3, 0xe3, 0x72, 0xd6, 0xef, 0xe2, 0xd1, 0x6f, 0x9b, 0xed, 0x6d, 0xd5, 0xe1, 0xa6, 0xcb, 0x17, 0x5e, 0x39, 0x9b, 0xa7, 0x4e, 0x8a, 0x8f, 0xbb, 0xac, 0x1e}}
	return a, nil
}

var _tarsSimpleInternalLocatorCommTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x4d\x6e\x83\x30\x10\x85\xd7\x9e\x53\x4c\xbc\xc2\x5d\xc0\x09\x58\xa5\x52\x55\xa9\x3f\x8b\xf6\x02\xae\x4b\xc8\xa8\xd8\x8e\x8c\xdd\x28\xaa\xb8\x7b\x35\x06\x02\xb4\x61\x65\xa1\xf7\x9e\xbf\xcf\x27\x6d\xbe\x74\xdb\x60\xe7\x8d\x8e\x3e\x00\x90\x3d\xf9\x10\xb1\x00\x21\xfb\x8b\x33\x12\x40\xc8\x96\xe2\x31\x7d\x94\xc6\xdb\xea\x5d\x87\x7e\xdf\xf9\xf4\x99\x4f\x0f\xbe\x8a\x3a\xf4\x12\x14\xc0\xb7\x0e\xdc\x32\x29\x3c\x8d\x5b\xd8\xc7\x40\xae\x05\x61\xbc\xb5\x38\x7e\x77\x1c\x2f\xf7\xde\xda\xe4\x68\xbc\x51\x90\xa3\xf8\xea\x4c\x83\x88\x7c\x63\xc9\x67\x1e\xac\x2a\x7c\x74\x14\xe7\x35\x8e\x91\xee\xd0\xac\xca\x78\xa6\x78\xbc\xb2\x1f\x92\x33\xeb\x4a\xd1\x6d\x40\x14\xfe\x80\xa0\xc3\x1c\xc7\x5d\x8d\x52\xf2\xbf\x35\x73\x7d\x5d\x13\x9c\xcd\xe8\xbb\x1a\x1d\x75\x39\x99\x5d\xca\xb7\xe6\xef\x15\x0a\x84\x18\x40\x0c\x30\x64\xee\xe7\xcb\x5a\x11\x43\x13\x53\x70\xa8\xb7\xec\xe4\xfa\xa8\xd9\x35\x73\x6f\x2b\x85\xba\xf1\x54\x99\x7f\x7a\xac\xf2\xde\x17\xdc\x2b\xd4\x68\xc0\x9c\x35\xe6\xca\x4b\x73\xde\x4e\x4d\x2a\x8b\xe4\x62\xfe\xcf\x67\x49\xcd\x4a\x0a\xc4\xc4\xcf\x59\x18\xe0\x37\x00\x00\xff\xff\x75\x14\xc7\xd7\x33\x02\x00\x00"

func tarsSimpleInternalLocatorCommTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleInternalLocatorCommTmpl,
		"tars/simple/internal/locator/comm.tmpl",
	)
}

func tarsSimpleInternalLocatorCommTmpl() (*asset, error) {
	bytes, err := tarsSimpleInternalLocatorCommTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/internal/locator/comm.tmpl", size: 563, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x59, 0xac, 0x8, 0x7c, 0x46, 0x79, 0x4d, 0xb1, 0xfe, 0x18, 0x7a, 0x92, 0x25, 0xa9, 0x3b, 0xe4, 0x4a, 0x76, 0x71, 0x2c, 0xcf, 0xdc, 0x13, 0x70, 0x3f, 0xb, 0x68, 0xe8, 0xf7, 0x88, 0x75}}
	return a, nil
}

var _tarsSimpleInternalLocatorLocatorTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\xc9\x4f\x4e\x2c\xc9\x2f\xe2\x02\x04\x00\x00\xff\xff\x4e\xa4\x3b\x24\x10\x00\x00\x00"

func tarsSimpleInternalLocatorLocatorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleInternalLocatorLocatorTmpl,
		"tars/simple/internal/locator/locator.tmpl",
	)
}

func tarsSimpleInternalLocatorLocatorTmpl() (*asset, error) {
	bytes, err := tarsSimpleInternalLocatorLocatorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/internal/locator/locator.tmpl", size: 16, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xdd, 0xfb, 0xf4, 0xc0, 0xb1, 0x9, 0xbc, 0x45, 0xb8, 0x49, 0xb0, 0x12, 0x81, 0xa2, 0x82, 0x60, 0xb5, 0xcb, 0x95, 0x60, 0xac, 0xf8, 0xb1, 0xf1, 0x9b, 0x35, 0xa8, 0x16, 0x19, 0x2d, 0xa7}}
	return a, nil
}

var _tarsSimpleInternalUtilsUtilsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x31\x6b\xfb\x30\x10\x47\x67\xdd\xa7\xf8\x91\x25\x16\x04\xe5\x3f\x07\x0c\x7f\x32\x74\xed\xd0\xa1\xb3\x94\xca\xe6\x52\x5b\x12\x77\x52\xa1\x84\x7c\xf7\x52\xdb\xe9\x50\x3a\xde\x7b\xdc\x3b\xae\xf8\xcb\xbb\x1f\x23\x5a\xe5\x49\x89\x78\x2e\x59\x2a\x3a\x32\x3b\xad\xc2\x69\xd4\x1d\x59\xa2\xe3\x11\xcf\xe1\xfa\x24\x79\x86\xc4\xda\x24\xc1\x27\xe4\x70\x45\x13\xa6\xa1\xa5\xcb\x43\x77\xc9\xcf\x11\xeb\xea\x01\x25\x73\xaa\x0a\xe7\xdc\x4a\xec\x66\x70\x23\xf3\xe1\x05\x1a\x36\xa0\xee\xdc\x78\x7a\x8b\x42\x46\x83\x7b\x15\xae\xf1\x65\x11\x4b\xcf\x92\x19\xb2\x80\x0f\x28\x38\xf5\x10\x9f\xc6\xf8\x68\xdf\xc8\x18\x1e\xc0\xe8\x7b\xfc\x5b\xa6\x9f\xc2\xf9\xb3\xc6\x6e\xff\x7f\x6f\xc9\x98\x3b\xe2\xa4\xf1\x2f\x7f\x5a\x3d\x99\xdf\x97\x8b\xa5\x6f\xbc\xfd\xab\xc1\x6d\xdc\xd2\x9d\xbe\x02\x00\x00\xff\xff\xfc\x82\xdd\xa0\x36\x01\x00\x00"

func tarsSimpleInternalUtilsUtilsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleInternalUtilsUtilsTmpl,
		"tars/simple/internal/utils/utils.tmpl",
	)
}

func tarsSimpleInternalUtilsUtilsTmpl() (*asset, error) {
	bytes, err := tarsSimpleInternalUtilsUtilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/internal/utils/utils.tmpl", size: 310, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0xf4, 0x4c, 0x24, 0xb7, 0xd5, 0xc2, 0x8e, 0x8b, 0xb1, 0x78, 0x8a, 0xf9, 0xd7, 0x27, 0xdd, 0x6d, 0x5a, 0xf9, 0x88, 0x67, 0x35, 0xdb, 0x87, 0x65, 0x1, 0xa5, 0x43, 0xd3, 0xa2, 0x6c, 0x53}}
	return a, nil
}

var _tarsSimpleInternalUtilsUtils_testTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4d\x4b\xf3\x40\x10\x3e\x67\x7f\xc5\xbc\x81\x42\xfb\x92\x0e\x9b\x0a\x56\x23\x05\x41\xf4\xda\x4b\x6f\xa5\x87\xcd\xba\x49\xd3\xa6\xbb\x61\x77\x82\x8a\xe4\xbf\xcb\x6e\xda\xa0\xe2\x47\x0f\x1e\x12\x86\x9d\xe7\x63\x66\x78\x1a\x21\xf7\xa2\x54\xd0\x52\x55\x3b\xc6\xaa\x43\x63\x2c\x41\x4c\xca\x51\xa5\xcb\x98\xb1\xa2\xd5\x12\x56\xca\xd1\x32\xdf\x3d\x58\x73\x18\x13\xfc\x3f\x76\x71\x35\x81\x57\x16\x15\xc6\x42\x95\x80\x82\x6c\x01\x56\xe8\x52\xc1\x7a\xe3\xc8\xb6\x92\x7c\x37\xd2\xe2\xa0\x00\xc0\x91\xad\x74\xc9\xa2\xa8\x31\x95\x26\xd7\x63\xfa\x17\xf5\xdc\x28\x49\x03\xa2\xf3\x2c\xff\x05\x6a\x06\xf1\xde\xbe\xa0\x14\xb5\x6c\x6b\x41\xc6\xe2\xdd\x50\x2e\xf3\x5d\x9c\x78\x60\xaf\x99\x0d\xa2\x81\x1d\xc5\x24\x1b\x98\x6e\x21\x9d\xcd\x91\x23\xc7\x14\xa6\x0d\xa4\x9c\xcf\xae\x60\x4a\x70\xc9\x39\xe7\x3d\xbd\x0b\xff\x7e\x8c\x5f\xfc\x6e\xcf\xd4\x0c\x92\xef\x97\x10\x98\xa3\xfc\x93\x69\x07\x64\x6d\xa4\xa8\xb7\xc6\xd1\x09\x79\xfd\x09\x90\xce\x67\x1f\xa4\x2e\xbe\xde\x37\x8c\x76\xc6\x62\xd9\xb7\xbe\xd9\xcf\x86\xde\xaf\x0b\x61\xa8\x0a\xb0\xca\xf9\xa4\x9c\xe2\xa4\xd0\x1f\x28\x01\x85\xfd\x59\x10\x71\x72\x13\x40\xff\x16\xa0\xf0\x98\x8d\x70\x22\xc2\x7b\x6b\x8d\x2d\xc6\xf1\x7a\xf4\xb8\x81\x27\xa1\x09\x46\x0e\xf2\x96\xa0\x54\xbe\x8c\x93\x10\xc4\x23\x29\xf1\x2a\x13\x6f\xcf\xa2\x8e\x75\xec\x2d\x00\x00\xff\xff\xee\x27\x8e\xfd\xeb\x02\x00\x00"

func tarsSimpleInternalUtilsUtils_testTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleInternalUtilsUtils_testTmpl,
		"tars/simple/internal/utils/utils_test.tmpl",
	)
}

func tarsSimpleInternalUtilsUtils_testTmpl() (*asset, error) {
	bytes, err := tarsSimpleInternalUtilsUtils_testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/internal/utils/utils_test.tmpl", size: 747, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xd7, 0x79, 0x3a, 0x1f, 0xa8, 0x9e, 0xe3, 0x9a, 0x3e, 0x7a, 0xdb, 0x5f, 0x99, 0x4d, 0x2a, 0xa8, 0x2, 0xa4, 0x9f, 0x7f, 0x9a, 0x37, 0x3f, 0xe5, 0xda, 0x78, 0x8d, 0x68, 0x6d, 0xce, 0xd3}}
	return a, nil
}

var _tarsSimpleMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x4f\x6f\xe3\x20\x10\xc5\xcf\xe6\x53\x20\x9f\xb0\xb2\x0b\xf7\x95\xf6\x10\xb9\x52\x2e\x55\x5a\x35\x95\x7a\xac\x00\x8f\x09\x09\x06\xc4\x1f\x27\x6d\x94\xef\x5e\x81\xdb\x46\xaa\x7a\x9b\xf1\xfb\x3d\xbf\x37\x78\x2e\x8f\x5c\x01\x9e\xb8\xb6\x08\xe9\xc9\xbb\x90\x30\x41\x4d\xab\x74\xda\x67\x41\xa5\x9b\xd8\x33\x0f\xb1\x37\x2e\x0f\x75\xda\x38\x96\x78\x88\xed\xc2\x88\x1c\x2b\x03\x67\xc3\x05\x7b\xd7\xd3\xdf\x29\x32\xa3\x45\xe0\xe1\x8d\x19\xa7\x72\x05\x2f\x17\x4c\x1f\x8f\x6a\xcb\x27\xc0\xd7\x2b\xf3\xc1\x25\xc7\x14\x58\x26\xb9\x91\xd9\xf0\xe4\xc2\x2f\x58\x84\x30\x73\x9b\x62\x8b\x50\xf3\x8a\x7f\xaa\xda\x26\x08\x96\x1b\x36\x80\xc8\xaa\x45\x1d\x42\x63\xb6\x12\x6b\xab\x13\xe9\xf0\x05\x35\x35\x9e\xee\x20\xdd\xc3\x0c\x86\x2c\x6b\x9d\xef\x8a\xa5\x43\xd7\x4f\x4b\x39\x7e\xb1\x70\xef\xf1\xbf\xff\xd8\xc2\x89\xdc\xaa\xd1\xfe\x7b\xec\x50\x13\xc3\x5c\x90\xaf\x72\x74\x0b\xa7\x9b\x4e\x3a\xd4\xc8\x51\x15\xa0\x3c\x12\xdd\x40\xda\x41\x98\x21\xf4\xce\x8e\x5a\x15\xd9\x89\x43\x91\xe5\xa8\xe8\xda\x7b\xbc\xc2\x2d\x6d\xf1\xaa\xee\x0b\x5a\x3f\xdd\x7e\xf9\x20\x0e\x6d\x2d\x46\xd7\xc3\xb0\x5b\x52\x5f\x74\xda\xf7\xce\x26\x38\x27\x12\xc3\xfc\x07\x3b\x71\xe8\x50\x53\x23\x9f\xb2\x25\xe5\xb4\x8f\x00\x00\x00\xff\xff\xde\xc7\x6c\x2f\xda\x01\x00\x00"

func tarsSimpleMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleMainTmpl,
		"tars/simple/main.tmpl",
	)
}

func tarsSimpleMainTmpl() (*asset, error) {
	bytes, err := tarsSimpleMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/main.tmpl", size: 474, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0xd8, 0x40, 0xcd, 0xf7, 0x3e, 0xa2, 0x83, 0x1, 0xf0, 0x63, 0x36, 0x4e, 0xf6, 0xed, 0xf7, 0x96, 0xf8, 0x84, 0xc2, 0x41, 0xff, 0x68, 0x4f, 0x32, 0xe6, 0xc4, 0x9a, 0x5e, 0xb3, 0xb8, 0x72}}
	return a, nil
}

var _tarsSimpleMakefileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x7b\x6f\x9b\xc8\x16\xff\x9b\xf9\x14\xe7\xba\xb6\x6c\xd2\x0c\xbe\x8d\xae\xae\x56\x44\xec\x96\x38\x04\xa7\x4b\x8c\x65\xbb\xd5\x76\xdb\xca\x22\x30\xe0\x51\x80\x61\x87\xb1\xf3\x6a\xbe\xfb\x6a\x06\xfc\xdc\x24\xed\x56\x71\x51\x14\xc3\x79\xcd\xef\x77\xce\x99\x39\xd0\xec\x90\x45\x90\x02\xa6\x79\x98\xce\x23\x02\x86\xd1\xad\xfe\x2e\xe7\x34\x8d\xba\x59\x70\x45\x62\x9a\x12\x43\x04\xbc\xd4\xd1\xc4\x1e\x8d\xa7\x23\xc7\x73\xec\xb1\x33\x1d\xda\x93\x3e\x98\x16\x34\x3b\x5b\xe2\x91\xef\x4f\xf4\xee\xfd\x3d\x18\xbd\x40\x90\x84\xf1\x5b\x78\x78\x50\xcf\xc3\x20\xbc\x22\x62\x10\x64\x04\x1e\x1e\x10\xb2\x87\x43\xa8\x2e\xd3\x02\xa9\xb7\x8b\x62\xa9\x9c\xd8\x23\xd7\x99\x6c\xe8\x26\x01\x4f\x88\x90\xaa\x8b\x33\xcf\x76\xc7\x95\x0a\x9d\x6e\x3e\xf4\xfc\xc1\xd9\xb9\x5b\x3b\x95\x84\x2f\x68\x48\x8c\x90\xe5\x31\x1a\x4f\x46\xe7\xc3\xa9\xb4\x35\x2d\x18\xa0\x57\xf8\x65\x2f\xf4\x2a\xa6\x37\x10\x26\x0c\x42\x96\x15\x34\x25\x40\x38\x67\x1c\x91\x9b\x82\x71\x01\x5e\x6f\x6a\x7b\x1e\x00\x58\x40\xf2\xe9\xfb\xb1\xf1\x7e\x72\x86\x7f\x59\x69\xed\x81\xc2\xbc\xa3\x7d\x71\x8c\xae\xaf\x0a\xf6\x9b\x2c\x58\x39\x23\x69\x0a\x09\x03\x92\x2f\xa0\x52\xe8\xc8\xf5\x65\xe9\x1e\x35\x50\x35\x45\xae\x7f\x76\xa1\xf4\x09\x8b\x33\x01\xb8\x04\x7c\x8d\x5c\x1f\x6a\xf4\xcd\xfb\xca\xf0\xa1\x7b\x49\xf3\x6e\xc2\xd0\x44\x96\xc6\x82\xa2\xe0\x2c\x46\x5e\x5d\xaa\xd7\x16\xe0\x3f\xa0\xa1\xfa\xe1\x2a\xa9\xeb\xdd\x5d\x10\x5e\x52\x96\x1b\x27\xb2\xeb\x26\x34\x23\xd6\x12\x43\x14\x08\x02\x78\x0e\xed\xd7\xad\x8f\xb8\x95\xe1\x56\x04\xad\x73\xb3\x75\x61\xb6\xc6\xd0\xfa\xb3\xad\x37\xbe\x33\xb2\x4b\x45\x3f\x28\x67\xab\xb8\x09\x15\xc0\xc9\x02\x17\x01\x2f\x09\xf4\x1d\xfb\x54\x6f\xbc\x7c\xd2\x53\x7a\x59\x04\x62\x66\x35\xef\xcb\xf9\x65\x29\xc0\x3c\x84\xc3\x66\xa7\xce\xb8\x6a\xf3\xf1\x51\x9d\x41\xb5\x93\x62\xca\x4b\x71\xcd\x78\x24\x6b\xb0\xf2\x78\xa2\x62\xba\xae\x32\x2d\xb7\xe6\x51\xc2\xd0\xbb\x23\xd7\x57\x3d\x5e\x05\xc3\x6c\x2e\x22\xca\xad\x82\x33\xc1\xba\x09\xc9\x5f\x9e\x9d\xda\xf7\xe3\x51\x6f\x8d\xff\x9a\xa6\x51\x18\xf0\x08\xaa\x55\x0f\xea\x73\xc3\xf5\x57\x66\x3b\x76\x07\x46\xc2\x54\x67\x9d\x7b\xce\xb8\xd2\x55\x54\x63\x9a\x47\x60\x00\xce\x65\x1d\x1b\xd2\xac\x01\x58\xdc\x16\x04\x62\xfd\xc5\x99\x48\x32\x21\x2b\x6e\xe5\x51\x07\x16\xd0\x18\x04\x29\x05\xe0\x3b\x68\x34\x3b\xf6\x70\xa8\x37\xe0\xeb\xd7\x4d\x59\x75\x3e\xe9\x8d\x63\x10\x33\x92\xc3\x67\x04\xdb\x17\x09\x67\x0c\x1a\x9f\xda\xf6\x70\xd8\x06\xc6\xa1\x5d\x39\xb4\x81\x15\x82\xb2\x1c\x68\x09\x24\x2b\xc4\xad\xf1\xa5\x71\x0c\xe4\x86\x0a\x78\x73\xbc\x1d\x45\x23\x69\x49\xe0\x33\xd2\xb4\xa5\x60\x89\xea\x3f\x80\x65\x7b\x1c\xe9\x4f\x2c\xae\x69\xf5\xea\x03\x06\xe5\x3c\x9c\x41\x44\xb9\x29\xed\x0f\x21\x67\xd7\x70\x4d\x20\xe4\x44\xee\x2a\x2a\xe4\xf2\x95\xbb\xa6\x69\x5a\x76\x15\x51\x0e\xb8\xa8\x82\xcb\xa5\x35\x2d\xa6\x5b\xb8\x56\xb1\x7b\xac\xb8\x05\x95\xae\x66\xe7\x8d\x0e\xf8\x57\xe5\x24\xd9\x6c\x59\x87\x05\xe0\x45\x65\x52\x21\x56\x51\x63\x7a\x8c\x90\xed\x79\x26\xac\x32\xb9\x97\x92\xae\xa2\x9b\x90\x90\x1c\xcb\x5e\x04\xb9\xfb\x64\x33\xea\x48\x93\xb7\x3a\xa8\x41\x07\x38\x8d\xe2\x34\x48\x4a\x68\x37\x3b\xf5\x81\xa2\xb7\x2b\xe3\x93\xf7\xe7\xde\xa9\xda\x58\x3a\x60\x06\xcd\xb7\x7b\xc1\xaa\x4e\xc9\x1f\xc5\x89\x45\x2d\x9a\x3c\x83\x7b\xaf\xa9\x96\xe3\x96\x3c\x07\x9f\xcf\xf3\xef\x4d\x72\x16\xd0\xdc\x48\x18\x60\x2c\x87\x37\x4d\xac\x66\xa7\x1a\xed\x7b\x84\x8e\xbf\x99\xff\xa7\x09\x7c\x33\xfb\x3f\x99\x50\x98\x52\x92\x8b\x1f\xe3\x42\x73\x41\x78\x1e\xa4\xdd\x2a\x48\xfd\xf3\x13\xc1\x1b\xc3\xbe\x3f\xf8\xb8\x06\x8f\x96\x37\xe6\xf2\x45\x73\x49\xa4\x1e\x9e\xf2\x64\x59\x8d\x3e\x7d\xcb\x68\x9f\xf8\x52\x9a\xcf\x6f\x70\x90\x45\xff\xff\x1f\xda\xb8\x7f\x3c\xeb\x3d\xd7\x9f\x3a\x03\xfb\xc4\x73\x4e\xad\xff\x82\xeb\xfb\x63\x4b\xf9\x80\xeb\xdb\xa3\x5e\xdf\x52\xae\xf0\x83\xe7\xd1\x5e\xf7\xf5\x92\x2e\x27\x29\x09\x4a\x82\xea\xdf\x2d\xfe\xb0\xee\x08\xed\x2d\x8d\xe1\x53\x35\xa0\x6a\x58\x53\x91\x15\x53\x39\x58\xbe\xac\xe6\xd5\x72\x8a\x48\xe9\x2c\x28\xe5\x00\x2c\x85\xf9\x0f\x8f\x43\x08\x2e\x19\x17\x46\xa3\x1a\x1b\xeb\x31\xb9\x9e\x8d\x1b\x23\x6b\xc7\xb9\xbb\x92\xec\x7e\xa0\xa8\x77\x27\x35\xde\xe4\x74\xe2\x31\x6c\x5a\xd6\x44\x9e\x8b\xd7\xad\xe0\x84\x8f\x70\x3c\x06\x11\x70\xc0\x98\xdc\xa8\xaf\x29\xab\x61\x94\x8b\xbc\xb1\x29\x98\x56\x82\xf0\x6e\xb1\xb1\xae\x21\x92\x3b\xd8\x8c\x1f\x46\x80\xab\x55\xb2\xc5\x73\x50\xd6\x8e\xbb\xf4\x94\x33\xcf\xb6\xf9\xad\x61\xae\x6b\x20\x01\x87\x8b\xf8\x6e\x07\x8d\x61\xd4\x69\x8f\x29\x42\x34\xce\xc9\x5f\xd0\xd9\xd8\x5a\x87\x3a\x42\x63\x67\xf4\xc1\x19\x4d\x07\xf6\x85\xb3\xfa\x0c\x54\x7d\x88\x48\x1e\xd1\x78\xaf\xed\x28\x5f\x84\x90\xfc\x67\x42\x9c\x09\xa4\x25\xac\x7a\x37\x92\x9f\xae\xc6\x5e\x57\x96\xcb\xc5\x99\x30\xab\xa3\xf4\xec\x42\x75\x4d\xfd\xfe\xba\xaf\xe3\x9c\x04\xb9\x89\x54\x35\x55\xd7\x9c\x3a\x43\x67\x70\x3a\x55\xc5\xf0\x4f\xde\x49\x00\xe7\x83\x0f\xfe\xef\xce\xf4\x11\x8d\xe7\xf7\x6c\x6f\xf9\xb0\xb5\x23\x5c\x67\x32\xd6\xab\x70\x53\x09\x5f\x87\xe6\x7d\xcf\x73\xec\x81\x7c\x78\x00\xe3\xc0\x88\x0c\x91\x15\x90\x64\x2c\x37\xd8\x5c\xec\x8f\x5c\x90\xa6\x4f\xf1\xeb\xeb\x3b\x82\xde\x70\xb8\x2b\x7a\x8c\x69\xbf\xe7\x54\xbe\xf2\xa6\xf6\xf9\x37\xec\x0f\x0c\xb6\xce\x80\xbc\x59\xa7\xe1\xef\x00\x00\x00\xff\xff\x45\xf7\xdb\xb4\x33\x11\x00\x00"

func tarsSimpleMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleMakefileTmpl,
		"tars/simple/makefile.tmpl",
	)
}

func tarsSimpleMakefileTmpl() (*asset, error) {
	bytes, err := tarsSimpleMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/makefile.tmpl", size: 4403, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0xa3, 0x86, 0xe8, 0x11, 0x79, 0xd3, 0xa7, 0x48, 0xa1, 0xb7, 0x5f, 0x5e, 0x6e, 0xcd, 0x1b, 0x91, 0xe1, 0x71, 0xa, 0xa8, 0x22, 0x16, 0x71, 0xbe, 0x98, 0xd, 0xcf, 0x9, 0x5c, 0xab, 0xd1}}
	return a, nil
}

var _tarsSimpleProtoCalculator_tarsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x3d\x0a\x02\x41\x0c\xc5\xf1\x7e\x4e\xf1\x4a\x85\x85\x3d\xc0\x54\xe2\x11\xf6\x04\xf3\x11\xd9\x81\xd9\x09\x64\x13\x2c\x64\xef\x2e\xb1\x10\x11\x34\xcd\x2b\x7e\xe1\xbf\x71\xb5\x4e\x28\xa9\x17\xeb\x49\x59\x1e\x01\x00\xda\x50\x92\x5b\x2a\x84\xeb\x97\xf8\xcd\x33\x2e\xb5\x22\xd5\x0a\xbd\x33\x86\x6d\x99\xe4\xad\x6d\xa8\xf3\xc9\xb7\xaf\x93\x8f\xac\x13\x9b\xbe\x44\x68\x3f\xc7\xf0\x99\x5a\x2c\x63\xb7\xac\x92\x8a\x36\x1e\xbf\x92\x8b\xe5\xbf\x49\xff\x3b\x62\x38\x62\x78\x06\x00\x00\xff\xff\x06\xc9\x90\xb6\xd4\x00\x00\x00"

func tarsSimpleProtoCalculator_tarsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleProtoCalculator_tarsTmpl,
		"tars/simple/proto/calculator_tars.tmpl",
	)
}

func tarsSimpleProtoCalculator_tarsTmpl() (*asset, error) {
	bytes, err := tarsSimpleProtoCalculator_tarsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/proto/calculator_tars.tmpl", size: 212, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0x4f, 0x74, 0xda, 0xab, 0x9a, 0xf9, 0x2e, 0x5, 0x85, 0x6, 0x4e, 0x29, 0x5e, 0x16, 0xb7, 0xd7, 0xe6, 0x6a, 0x9a, 0xb4, 0x4e, 0xb9, 0xb4, 0x13, 0x73, 0x71, 0xe1, 0x13, 0xc7, 0x37, 0xc8}}
	return a, nil
}

var _tarsSimpleProtoGenCalculatorCalculator_ifTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6e\xdb\x3a\x12\xbe\x16\x9f\x62\xd6\x17\x81\x14\x08\x72\x92\x2e\x16\x0b\x03\xbe\x68\x73\x76\xbb\x01\x7a\x0e\x0e\xe2\x60\xcf\x45\x51\x18\xb2\x34\xb2\x58\x4b\xa2\x4a\x52\x4e\x8c\x22\xef\xbe\x18\x52\xbf\x49\x14\x3b\xed\xa2\x3f\xa8\x03\x14\x91\x48\xce\x37\xc3\xe1\xcc\xa7\xe1\x34\xd3\xe9\x9f\x61\xb4\x09\xd7\x08\x97\x61\x16\x55\x59\xa8\x85\x84\x48\xe4\x39\x16\x9a\x4d\xa7\x70\x93\x72\x05\x09\xcf\x10\x6e\x43\x05\x6b\x2c\x50\x86\x1a\x63\x58\xed\x40\x87\x52\x5d\xac\x05\x9c\x07\xe7\xb4\xf2\x6d\x3b\x97\x48\x91\x43\xd4\xc2\x05\xb4\x90\x95\x8f\xd4\x30\xc6\xf3\x52\x48\x0d\x2e\x73\x26\x91\x28\x34\xde\xe9\x09\x73\x26\x49\x6e\x7e\xad\xb9\x4e\xab\x55\x10\x89\x7c\x7a\x13\x4a\x75\x99\x89\x2a\x36\x4f\x6f\xc5\x94\x10\x27\xcc\xc9\x61\xef\xaa\x69\x2e\x62\xcc\x0e\xc1\x9b\x96\x52\x68\x11\x89\x6c\x1a\x89\x18\xa3\x97\x89\x48\x54\x53\x89\x9f\x2a\x54\x3a\x39\x48\xb2\xd2\x3c\x9b\x46\x95\x94\x58\x1c\xb4\x5b\x2b\xa0\x85\xc8\xd4\x84\x79\x8c\x4d\xa7\xbd\xf3\x52\x5a\x56\x91\x66\x7a\x57\x0e\x8e\xd1\x0e\xc3\x67\xe6\x28\xc8\x83\x05\xca\x6d\x58\x68\x76\x4f\xc2\xaf\xe3\x18\xb8\x02\x9d\x22\x94\x52\xdc\xed\x20\xa9\x8a\x48\x73\x51\x40\x22\xa4\x19\xce\x51\xa7\x22\x86\x18\x13\x5e\x60\x0c\xbc\x30\xa3\x64\x8a\x09\x07\x1f\x6e\xb9\x4e\xcd\x58\x7d\x74\x8c\x20\xc0\x5d\x8a\xd5\x47\x38\xed\xac\xf0\xe0\x75\x1c\xbb\xef\x52\xe0\x85\x7e\x75\xe1\xc3\x75\xf7\x84\x0a\x4e\xeb\xe7\xa5\x28\x35\x04\x41\x90\x87\xe5\x7b\xa5\x25\x2f\xd6\x1f\xec\x2f\x0f\x5c\x89\xba\x11\x41\x29\xe9\x1f\xa1\x7e\x66\xcc\xd9\x86\x12\x32\x2c\xd6\xba\xc6\xb4\x23\x69\xb8\x45\x58\x09\x91\xd9\x57\xbd\x83\xd5\x4e\x23\x73\x96\x42\xc1\x6c\x0e\xe6\x74\x83\x3f\xf0\xf6\x4d\x95\x24\x28\x5d\x8f\x39\x04\x3b\x87\xa5\x50\xc1\x5f\x92\x6b\x5c\x1a\x30\xf7\x5d\xea\xc3\xb9\xc7\x1c\x9e\x18\xbd\x7f\x9b\x43\xc1\x33\xf2\xa6\x23\x51\x57\xb2\x00\x89\xda\x98\xc4\x9c\x7b\x36\x06\x72\x9d\xfa\x70\x71\x38\x08\x19\xbc\x54\x3a\xd4\x95\x82\x47\xbe\xa8\xa7\x6b\x7f\x3f\x35\xcf\x13\xf2\x87\x4b\xde\xf4\x60\x3e\x87\x73\xa3\xa9\x95\x98\x1b\x3f\xbf\x3f\xfb\xc0\x9c\x7b\xc0\x4c\x21\x3c\x14\xb8\x18\x15\x70\x1a\xb3\xea\xb1\x73\x02\x61\xce\x52\xa2\x2a\xc9\xad\x05\xde\xba\x4d\x06\x04\xd7\xa8\x4a\x51\x28\x24\x6e\x41\xed\x31\x27\xd2\x77\xd6\xf7\x06\x37\x78\x13\x46\x9b\xb5\x14\x55\x11\xf7\xdd\xbf\xfa\x18\xa8\x80\x62\x7e\xc9\x8b\xad\xd8\xa0\x1b\xe9\x3b\x1f\xce\x7c\x98\xbc\x8e\xe3\x89\x6f\x7c\x7b\x23\xde\xec\x34\x2a\xd7\xf3\x1b\x3f\xf9\xad\x47\x7c\x30\xd6\x1c\xea\x6d\x67\xc9\x87\x01\x71\x8d\x61\x8c\xd2\x35\x49\x16\x5c\x15\xfa\x9f\x56\x99\x6b\x50\x83\x85\x8d\x17\xaf\x33\x98\xab\x80\x44\xea\x93\x3e\x31\xd8\x67\x3e\x68\x59\xe1\x8b\xc3\xe6\x01\x96\x7b\x7a\x8d\xca\xf3\xe1\xd5\x4b\xe1\xac\x17\x51\xff\x1e\x96\x6e\x7b\xb2\xb5\x63\x06\x9e\xb2\xce\xf3\x98\xb3\x84\x79\x9d\x44\xf6\x99\xd2\xc7\x3e\xe9\x1d\x1b\x28\x29\x78\xd6\xb2\xc7\x5f\x5c\xa7\x97\x75\x94\x7c\x43\x22\xe9\xa9\xa5\xe8\x68\x03\xea\xb2\xd9\xd7\x91\x68\x7e\x6d\xa2\x39\x72\xc9\x4f\xc6\x25\x8b\x6a\xf5\xcd\x08\x64\x51\xad\x8e\x95\xc8\x2f\x4e\x10\x5f\x59\x89\x2c\xaa\xd5\x91\x3d\x7e\x28\xf6\xf8\x1e\x95\xc8\x50\xed\xb1\x12\x39\x12\xcd\x97\x54\x22\x47\x2e\xf9\xb1\xb8\x04\x75\xdd\x23\x01\x85\x5a\x81\xaa\x5f\x1a\xfa\xa0\x77\x1e\x61\x30\xce\x0a\x2d\x80\xdb\x6b\xb8\x50\xde\xd6\x1b\x80\x39\x28\xab\x8b\xe2\x61\x81\xfa\x86\xe7\x28\xaa\x5a\x9f\x21\xa3\x7a\xa0\xaf\x93\x6c\xb8\x4d\x79\x94\x12\xbd\xf1\x02\x72\x35\x6e\xc2\x10\xd7\x35\x2c\xd2\x33\x20\x78\x38\xef\x0d\xcc\xf9\x4f\xa8\xd2\x4b\x11\x63\x67\x4f\x1a\xaa\xd4\x84\x92\xb1\x28\xca\x38\x16\x1a\xa2\x30\xcb\x78\xb1\x6e\x0d\x44\x09\x7e\x67\x21\x2d\xfc\x1d\x95\x0a\xd7\x3d\xf1\xbd\x16\x37\xaa\x5d\xa3\x8c\x17\xfa\x1f\x7f\xf7\x6c\xe7\x6a\xd6\x26\x91\x7b\x4a\x5c\xdd\xf8\xf5\x4f\x22\x79\x8f\x39\xed\xa6\x06\x10\xb4\xb1\x31\x95\x4d\x20\x91\x1a\x1f\x24\x71\xf2\x48\x1a\xfb\x40\xd4\xfe\x88\x75\x7c\x50\xfa\x09\xb2\x32\x06\x13\xbd\x74\x3c\x44\xce\xd8\xf8\xb0\xa4\x5d\xc8\xb0\x58\xa3\x01\xa4\x19\x27\xc6\x0c\x75\xcd\x06\x1b\x8f\x39\x94\xbb\xcd\xfa\x6d\xb7\x5e\xa2\x6a\xbe\x29\x56\x2e\xd2\x77\xef\x37\x1f\x60\x0e\x5b\x2b\xd3\xa3\xb5\x8e\xce\xbe\x81\xde\x27\x74\x90\x57\xfa\x3a\x94\x56\x7b\x75\x2c\x2c\xc5\x1a\x31\xa5\xd5\x70\x6b\x6d\xbb\xa1\x49\xcc\x30\x8e\xbb\xc4\x3c\x3c\x33\x3b\x04\x97\xe7\x25\x2c\x79\x5e\x76\xd3\x3e\xd0\xfa\xde\x11\x9a\x28\xeb\x89\x10\x9e\x0f\x3c\x2f\xcd\x4a\xef\x65\x46\xd9\xa2\xa2\xa9\x0e\x0e\xb0\xb0\x5f\x58\x3c\x36\xb6\x37\xbb\xcf\xee\x3e\xd0\x13\x5b\x30\xdd\xe2\x21\x38\x25\x04\xca\x24\x8c\x90\xe0\xf6\xf7\x6d\xc7\x2a\x15\xe6\xec\xbf\x69\x8d\xca\xde\x3f\x65\xd9\xa0\xc8\x7b\x68\xe4\x17\x94\x5f\xcf\x5b\xfe\xff\x04\xbc\x67\xf6\xcc\x47\x0d\x5d\x6e\xc3\xac\xdb\xd3\xe7\x7b\x53\x11\xc0\xa9\xfd\x7e\xdb\xaf\xb3\x4f\x5f\xd2\x66\xc8\x7e\xcf\x6d\xb1\xda\xb8\x84\x4a\x3f\x0f\xdc\x41\xad\xf8\xc2\x52\x91\x5e\xde\xb5\x2b\x9f\xfe\x7e\x9b\xf2\x70\xff\xb7\xbb\xa9\x44\x08\xf2\x7a\x0f\xa4\x29\x16\x5f\x08\x89\xaa\xc1\xe4\xc9\xc0\x0d\xf3\x39\x24\x21\x91\xa1\xa9\xe8\x28\x79\xe8\xe3\xb1\x0d\xb3\xc0\x1d\x86\x93\x67\x91\xed\x41\xd1\x1a\x9e\x97\x81\x8d\x77\x3a\x5e\x1f\x4e\xa8\x50\x61\xce\x13\x06\x0d\x2c\x32\xc5\xc9\x48\x19\x6c\x0b\xa7\xc3\x40\x1a\x12\xdf\x67\x77\x2f\x0d\x46\xb7\x60\x88\xfd\xbb\xed\x63\xfc\x56\x80\xca\x87\x57\x07\x9c\xf1\x81\xb5\x9b\x2d\xdb\x4c\x6a\x8d\xa6\xec\x31\xb5\x7e\x90\xd4\xb2\x9f\x83\x9f\x3a\xb5\xea\x20\xfb\x75\x52\x8b\x4d\xa7\xbf\x71\x55\x86\xda\x96\xf5\x95\xc2\x18\xb4\x30\xc5\x7f\xbf\xf2\x57\x9c\xea\xf5\xbc\xcc\x30\x2f\x50\x1f\xda\x6b\x09\x06\xc1\xa5\x52\x71\x4b\x1a\xe8\x52\xd1\xdc\xc3\x85\x84\x42\x3c\x53\x30\x35\xb6\x1d\x9a\xf9\x12\x3f\x0d\xca\x7c\xf3\xd0\x54\xf9\xe6\x46\x3f\x7e\x09\xd8\xcb\x07\x87\xde\xb9\x25\x7e\xea\xdf\xb8\xc7\xdb\x33\xea\x96\x93\xdf\xcd\xfa\x7f\x57\x45\xf4\x47\x98\x9b\x10\x8e\x42\x85\xf6\xbf\x30\x66\x75\x54\xcd\xe6\xd0\xb2\x3e\xed\xda\x70\x9c\x61\xb5\x81\xdd\x07\x06\x99\xc5\x5f\x54\xab\x3e\x7e\x1b\xfa\x5f\x8d\xcf\x9c\x18\x93\xb0\xca\xf4\xac\x8b\xcd\x24\xd7\xc1\xbf\xc8\x93\x89\x3b\x31\x87\x9d\x73\x95\xd3\xc9\x4e\xbc\x96\x97\x9e\xe9\x0f\x29\x1f\xc4\xc6\x78\xd1\xfe\x31\x45\xf0\x16\x75\x73\x7e\xf6\x6e\x41\xb6\xdb\xe4\x10\x1b\x38\x39\x01\xd5\xb7\xb0\x6b\xf1\xa8\x4e\xdb\x33\xed\xa6\xe8\x19\x75\xbd\x76\x60\x5f\x5f\x34\xd0\xd7\xf5\x99\x22\xa3\xf0\xd4\xc4\xde\x1c\x46\x82\x8f\x64\xae\xfe\x8b\x52\x71\x51\xcc\x80\x7e\xce\x7d\xe6\x38\x97\x76\xf6\x66\x57\xe2\x0c\xe0\x8c\x86\xae\xea\x98\xbe\x8a\x69\x1d\x45\x4e\x37\x62\xe6\xeb\x4b\xb9\x95\x69\x44\xb4\x05\xa5\x1f\x33\x54\x47\x67\x3d\x6a\x03\x98\x42\xf7\x46\x50\x18\xbb\x83\x66\x95\x67\x04\x8c\xff\x1a\x94\xa6\x7b\x45\x13\xd7\xa8\xaa\x4c\xff\x86\x2a\x9a\x01\x4c\x26\xc6\x6c\xbb\xf9\x7a\x75\xdb\xb7\x31\x8e\x18\x90\xcf\xff\x02\x00\x00\xff\xff\xf0\x46\x43\x36\x97\x24\x00\x00"

func tarsSimpleProtoGenCalculatorCalculator_ifTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleProtoGenCalculatorCalculator_ifTmpl,
		"tars/simple/proto/gen/calculator/Calculator_IF.tmpl",
	)
}

func tarsSimpleProtoGenCalculatorCalculator_ifTmpl() (*asset, error) {
	bytes, err := tarsSimpleProtoGenCalculatorCalculator_ifTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/proto/gen/calculator/Calculator_IF.tmpl", size: 9367, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x9a, 0x4a, 0x22, 0x1e, 0x26, 0xb1, 0xde, 0x80, 0x8f, 0x23, 0xda, 0xc3, 0xc8, 0x13, 0xc8, 0x7f, 0x35, 0x77, 0xb3, 0x6f, 0x1, 0xf2, 0x1a, 0xb7, 0x73, 0x4e, 0xcb, 0x3d, 0xa1, 0xd, 0x8}}
	return a, nil
}

var _tarsSimpleServantsServantsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x51\x6b\xdb\x30\x14\x85\x9f\xad\x5f\x71\x26\x28\xd8\x9d\x17\x8f\xed\x2d\xa3\x0f\x23\x6c\xa5\x30\xc6\x58\xf7\x56\xfa\xe0\x3a\xd7\x8e\x1a\x5b\x52\xae\xae\xb3\x84\x92\xff\x3e\xe4\x78\x69\x52\xba\xb2\xc1\x9e\x24\xae\x8e\x74\xbe\x7b\x7d\xb0\x2f\xab\x65\xd9\x10\x02\xf1\xba\xb4\x12\x94\x32\x9d\x77\x2c\x48\x55\xa2\x2b\x67\x85\x36\xa2\x95\x4a\x74\x63\x64\xd1\xdf\x4d\x2a\xd7\x15\x3f\x4a\x0e\xb3\xd6\xf5\xf3\x61\x77\xe9\x0a\x29\x39\xe8\xbf\xd0\x14\xbd\x98\xb6\xa8\x7a\x66\xb2\xa2\x55\xa6\x94\x6c\x3d\xa1\x2a\xdb\xaa\x6f\x4b\x71\x7c\xcd\x6b\x04\xe1\xbe\x12\x3c\xa8\xa4\x28\x70\xdf\x07\x01\x75\x5e\xb6\x6a\xa7\x54\xdd\xdb\x0a\x69\x38\xbd\x90\xe1\xe3\x7c\x9e\x56\x18\x61\x27\xb3\xfd\x9a\xa3\x5d\xc0\x58\x79\xff\x2e\x07\x3f\xee\x28\xe0\x7c\xd8\x67\x48\xc7\x1a\x31\x3b\xce\xa2\x61\xeb\x9a\x86\x18\xd3\x0b\x44\xda\xc9\x25\xc9\x97\xa1\x92\x1e\x26\x91\xa9\xc4\xf8\x1c\x6e\x19\x45\x63\x23\x51\x37\x6b\x0d\x59\xb9\xfa\xf6\x99\x5d\x37\x02\xa4\x55\x14\xd7\x78\xe5\x96\xf1\xed\xf1\xf1\xc9\xa7\xe8\x96\xea\x61\x41\x43\x22\xc6\x36\x30\x1e\x35\xbb\x0e\x47\x36\xbb\xdf\x38\x93\x2b\x5b\xbb\x3a\xd5\x97\x24\xd8\xdb\xe0\xca\x63\x8a\xb3\x70\x7a\x27\x87\xf1\x99\x4a\x78\xb5\x79\x86\xef\x3b\xad\x7a\x0a\x72\x8c\xc6\x61\x13\x45\x5d\xe9\x6f\x82\xb0\xb1\xcd\xed\x7e\x89\xac\x9a\x29\x78\x3d\xc5\xb0\xd6\x8e\x8f\x5c\x06\x32\x53\xe3\xb4\xab\x23\xc6\x51\x79\x02\x37\xc5\xd9\x5a\xe7\xe0\xd5\x26\x53\x49\x52\x3b\xc6\x32\xc7\x3a\xda\x73\x69\x1b\x8a\x07\xc3\x6b\x11\xea\x66\x7d\x8b\x0b\x2c\x55\x12\x8d\x76\xa0\x36\xd0\x70\x16\x8f\xb4\x75\xbc\xda\xe8\x28\xd0\x5b\x8a\x99\x7b\x71\xac\x4c\xab\xe7\x68\xc6\xf1\xee\x9b\x78\x1c\xd3\x75\x1c\x53\xf0\xce\x06\x3a\xcc\x29\x07\x87\x4d\xf6\xe1\x0f\x1f\x71\x48\x0e\xc2\xc1\x2d\x78\x17\xe8\x89\x4b\x51\x88\x9b\xbb\x29\x82\xeb\x48\x16\xc3\xc7\xb6\xd8\xba\x9e\x11\xd3\x2c\xc6\x59\x95\x9c\xc7\x58\x5e\xc4\xc0\xbe\x06\x2f\x54\xc2\x24\x3d\x5b\xbc\xcd\x61\x4d\xfb\x42\xf0\xaf\xfb\xbb\xff\x13\xfc\x7f\x83\x7c\xf3\x3c\x64\x51\xe0\x2b\xfd\x9c\x1d\x10\x31\x2a\x4a\x1c\xd5\x4c\xe7\x5b\xea\x62\x88\xdd\xdd\x3d\x55\xb2\x6f\xed\xe4\x5e\x9a\x3d\xf9\x23\x3c\x1c\xcc\x4e\xea\x0f\x3b\xb5\x53\xbf\x02\x00\x00\xff\xff\x5e\xc8\xc8\x31\xc0\x04\x00\x00"

func tarsSimpleServantsServantsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleServantsServantsTmpl,
		"tars/simple/servants/servants.tmpl",
	)
}

func tarsSimpleServantsServantsTmpl() (*asset, error) {
	bytes, err := tarsSimpleServantsServantsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/servants/servants.tmpl", size: 1216, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0xe7, 0xb9, 0x20, 0xa3, 0x86, 0xad, 0x8e, 0x2b, 0xa2, 0x21, 0xcf, 0xe3, 0x8, 0x5e, 0x33, 0xc9, 0x18, 0x18, 0xca, 0xe, 0x4c, 0x5e, 0xb6, 0x7b, 0x92, 0xf4, 0xb7, 0xff, 0x6a, 0x74, 0x12}}
	return a, nil
}

var _tarsSimpleService_confTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x51\x4e\xec\x30\x0c\xfc\x7e\x7b\x8a\x5c\xa0\x6d\xda\x27\xb1\x7c\x24\x48\x88\x03\x70\x06\x93\x46\x9b\xd2\x34\x36\xa9\x0b\xf4\xf6\xa8\x5d\xe8\x0a\x50\x37\x11\xfe\x8a\xe2\xc9\x38\x63\xcd\x28\x86\x38\xde\x1d\xc4\x67\x29\x20\xf2\x9d\x01\xee\x30\x5c\x6e\xb7\xee\x68\xe3\xab\x8d\xbf\x1b\x5f\x05\x44\xba\x8f\xf3\x6e\xff\xfc\x5e\x1b\xf0\x66\xf2\xc0\x18\x77\x91\x1e\x0d\x78\xcd\x86\x44\xe1\x44\xdd\x1c\x4b\x59\xca\xb2\x16\x05\x89\x5a\xca\xe6\x28\x0a\x16\xff\xa5\x94\xf2\xf0\x6f\x2d\x8f\x27\x02\x76\xba\xe2\x81\x76\x39\x55\x1f\xe7\xf2\x32\xbb\x7c\xd8\x8e\x8f\x4f\xcf\xf7\x2d\x10\x5f\xd3\xb6\x69\xf4\x1e\xdf\x92\x28\x1b\x5a\xc2\x2e\xf0\xae\x84\xdb\x45\xc2\xcd\x2a\x21\xc5\xe5\x20\xb4\xde\x9e\x22\x4e\xeb\x76\x53\x12\x92\x7c\x03\xbc\x1b\x0c\x61\xd4\x8d\xcc\x9a\x4f\x11\x19\x0d\x7a\xbd\x78\x25\x89\x7e\x99\xec\x64\x0d\x90\xae\xb3\xc8\x57\x38\x77\x83\xc5\x89\x75\xde\x3e\x16\x17\x41\xe0\xab\xbb\x48\x93\xb8\x61\xf9\x64\xc6\x34\x37\xf4\x76\xce\x00\xb2\x8b\x16\xda\x51\xd7\xfb\x06\xac\xfe\xe4\x40\x55\xfd\xcc\x9d\xaa\xbe\xe5\x54\x55\xe7\x14\x7f\x04\x00\x00\xff\xff\x00\x19\x58\xcb\xcd\x03\x00\x00"

func tarsSimpleService_confTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleService_confTmpl,
		"tars/simple/service_conf.tmpl",
	)
}

func tarsSimpleService_confTmpl() (*asset, error) {
	bytes, err := tarsSimpleService_confTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/service_conf.tmpl", size: 973, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0x13, 0xe3, 0x53, 0xb, 0xb8, 0xb2, 0xa7, 0x11, 0x58, 0xe4, 0xb2, 0x1a, 0x4c, 0x3c, 0xce, 0xe2, 0x29, 0xf8, 0x51, 0xf0, 0xbc, 0x9d, 0xe2, 0xb5, 0x5f, 0xaf, 0x32, 0xa4, 0xe6, 0xdf, 0x91}}
	return a, nil
}

var _tarsSimpleVersionVersionTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x31\x6b\xc3\x30\x10\x85\x67\xdf\xaf\x38\x04\x01\x1b\xdc\xa8\x5d\x03\x19\xda\xa5\xed\x10\x28\xb4\x64\x57\x1c\xd9\xbe\xd6\xd6\x09\x9d\x94\x0c\x21\xff\xbd\xc8\x4e\x1a\x32\x75\xd2\xe9\xf4\x3d\xdd\xbd\xe7\x4d\xf3\x63\x3a\x8b\x07\x1b\x84\xd8\x01\xd0\xe8\x39\x44\x2c\xa1\x50\x1d\xc5\x3e\xed\x96\x0d\x8f\xba\xe1\x60\x59\x74\xc7\x0f\x62\xc7\x83\x0d\x7a\x3e\xd4\x3d\x25\x14\x92\x17\xeb\xf4\xc0\x5d\x48\xa2\xa0\x02\x38\x98\x90\x3f\xd3\x1a\x5f\x29\xbe\x19\xe9\x71\x6b\x86\x64\xf1\x48\xc3\x80\x3b\x8b\x62\x23\xee\x53\x20\xd7\xe1\x2e\xd1\xb0\x87\xe2\xca\xad\x51\xa9\x49\xf8\x92\xfb\x5f\x34\xda\x7f\xa5\x37\x72\x12\x57\x00\x5a\xe3\xb3\xf7\x5b\x1b\xd0\x78\x3f\x50\x63\x22\xb1\xbb\xba\x45\x72\x2d\x4f\x1b\x5e\x98\x35\xce\xbe\x96\xdb\x19\x38\x41\xb1\x31\xdf\x1c\x56\xf8\x58\x43\xb1\x21\x97\xcb\xa7\x1a\x8a\x0f\x13\x9b\x7e\xea\x9e\xa7\x19\x9f\x3d\x1f\xdf\x5d\xcb\x28\x3d\x1f\xef\x46\xe5\x11\x61\x9c\x6a\x68\x93\x6b\xfe\xd0\xb2\xc2\x13\x14\x73\x52\xcb\xdc\x68\x4b\x25\xd1\x84\x98\xe5\xe5\x25\x84\xd5\x42\x6e\xf6\xf3\x65\x5e\x74\xb5\x10\x55\x5f\x03\xad\x6f\x44\x7d\x79\xaf\xe0\x0c\xbf\x01\x00\x00\xff\xff\xea\xf2\x64\xb0\xda\x01\x00\x00"

func tarsSimpleVersionVersionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleVersionVersionTmpl,
		"tars/simple/version/version.tmpl",
	)
}

func tarsSimpleVersionVersionTmpl() (*asset, error) {
	bytes, err := tarsSimpleVersionVersionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/version/version.tmpl", size: 474, mode: os.FileMode(0644), modTime: time.Unix(1586696387, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xec, 0x6c, 0xe5, 0x9e, 0x84, 0x7a, 0x8a, 0xc6, 0x36, 0x96, 0xe2, 0xbe, 0x5b, 0x2e, 0x2c, 0x3e, 0x98, 0x44, 0x25, 0x56, 0xf6, 0x1f, 0x7, 0xca, 0x96, 0x9e, 0x4a, 0xe9, 0xf5, 0xd8, 0x33}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tars/mir/README.tmpl":                                tarsMirReadmeTmpl,
	"tars/mir/gitignore.tmpl":                             tarsMirGitignoreTmpl,
	"tars/mir/go_mod.tmpl":                                tarsMirGo_modTmpl,
	"tars/mir/internal/debug/dump.tmpl":                   tarsMirInternalDebugDumpTmpl,
	"tars/mir/internal/debug/pprof.tmpl":                  tarsMirInternalDebugPprofTmpl,
	"tars/mir/internal/errorx/errorx.tmpl":                tarsMirInternalErrorxErrorxTmpl,
	"tars/mir/internal/errorx/http_error.tmpl":            tarsMirInternalErrorxHttp_errorTmpl,
	"tars/mir/internal/internal.tmpl":                     tarsMirInternalInternalTmpl,
	"tars/mir/internal/locator/comm.tmpl":                 tarsMirInternalLocatorCommTmpl,
	"tars/mir/internal/locator/locator.tmpl":              tarsMirInternalLocatorLocatorTmpl,
	"tars/mir/internal/utils/utils.tmpl":                  tarsMirInternalUtilsUtilsTmpl,
	"tars/mir/internal/utils/utils_test.tmpl":             tarsMirInternalUtilsUtils_testTmpl,
	"tars/mir/main.tmpl":                                  tarsMirMainTmpl,
	"tars/mir/makefile.tmpl":                              tarsMirMakefileTmpl,
	"tars/mir/mirc/gen/api/calculator.tmpl":               tarsMirMircGenApiCalculatorTmpl,
	"tars/mir/mirc/main.tmpl":                             tarsMirMircMainTmpl,
	"tars/mir/mirc/routes/calculator.tmpl":                tarsMirMircRoutesCalculatorTmpl,
	"tars/mir/proto/calculator_tars.tmpl":                 tarsMirProtoCalculator_tarsTmpl,
	"tars/mir/proto/gen/calculator/Calculator_IF.tmpl":    tarsMirProtoGenCalculatorCalculator_ifTmpl,
	"tars/mir/servants/base.tmpl":                         tarsMirServantsBaseTmpl,
	"tars/mir/servants/servants.tmpl":                     tarsMirServantsServantsTmpl,
	"tars/mir/service_conf.tmpl":                          tarsMirService_confTmpl,
	"tars/mir/version/version.tmpl":                       tarsMirVersionVersionTmpl,
	"tars/simple/README.tmpl":                             tarsSimpleReadmeTmpl,
	"tars/simple/gitignore.tmpl":                          tarsSimpleGitignoreTmpl,
	"tars/simple/go_mod.tmpl":                             tarsSimpleGo_modTmpl,
	"tars/simple/internal/client/client.tmpl":             tarsSimpleInternalClientClientTmpl,
	"tars/simple/internal/debug/dump.tmpl":                tarsSimpleInternalDebugDumpTmpl,
	"tars/simple/internal/debug/pprof.tmpl":               tarsSimpleInternalDebugPprofTmpl,
	"tars/simple/internal/internal.tmpl":                  tarsSimpleInternalInternalTmpl,
	"tars/simple/internal/locator/comm.tmpl":              tarsSimpleInternalLocatorCommTmpl,
	"tars/simple/internal/locator/locator.tmpl":           tarsSimpleInternalLocatorLocatorTmpl,
	"tars/simple/internal/utils/utils.tmpl":               tarsSimpleInternalUtilsUtilsTmpl,
	"tars/simple/internal/utils/utils_test.tmpl":          tarsSimpleInternalUtilsUtils_testTmpl,
	"tars/simple/main.tmpl":                               tarsSimpleMainTmpl,
	"tars/simple/makefile.tmpl":                           tarsSimpleMakefileTmpl,
	"tars/simple/proto/calculator_tars.tmpl":              tarsSimpleProtoCalculator_tarsTmpl,
	"tars/simple/proto/gen/calculator/Calculator_IF.tmpl": tarsSimpleProtoGenCalculatorCalculator_ifTmpl,
	"tars/simple/servants/servants.tmpl":                  tarsSimpleServantsServantsTmpl,
	"tars/simple/service_conf.tmpl":                       tarsSimpleService_confTmpl,
	"tars/simple/version/version.tmpl":                    tarsSimpleVersionVersionTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tars": {nil, map[string]*bintree{
		"mir": {nil, map[string]*bintree{
			"README.tmpl":    {tarsMirReadmeTmpl, map[string]*bintree{}},
			"gitignore.tmpl": {tarsMirGitignoreTmpl, map[string]*bintree{}},
			"go_mod.tmpl":    {tarsMirGo_modTmpl, map[string]*bintree{}},
			"internal": {nil, map[string]*bintree{
				"debug": {nil, map[string]*bintree{
					"dump.tmpl":  {tarsMirInternalDebugDumpTmpl, map[string]*bintree{}},
					"pprof.tmpl": {tarsMirInternalDebugPprofTmpl, map[string]*bintree{}},
				}},
				"errorx": {nil, map[string]*bintree{
					"errorx.tmpl":     {tarsMirInternalErrorxErrorxTmpl, map[string]*bintree{}},
					"http_error.tmpl": {tarsMirInternalErrorxHttp_errorTmpl, map[string]*bintree{}},
				}},
				"internal.tmpl": {tarsMirInternalInternalTmpl, map[string]*bintree{}},
				"locator": {nil, map[string]*bintree{
					"comm.tmpl":    {tarsMirInternalLocatorCommTmpl, map[string]*bintree{}},
					"locator.tmpl": {tarsMirInternalLocatorLocatorTmpl, map[string]*bintree{}},
				}},
				"utils": {nil, map[string]*bintree{
					"utils.tmpl":      {tarsMirInternalUtilsUtilsTmpl, map[string]*bintree{}},
					"utils_test.tmpl": {tarsMirInternalUtilsUtils_testTmpl, map[string]*bintree{}},
				}},
			}},
			"main.tmpl":     {tarsMirMainTmpl, map[string]*bintree{}},
			"makefile.tmpl": {tarsMirMakefileTmpl, map[string]*bintree{}},
			"mirc": {nil, map[string]*bintree{
				"gen": {nil, map[string]*bintree{
					"api": {nil, map[string]*bintree{
						"calculator.tmpl": {tarsMirMircGenApiCalculatorTmpl, map[string]*bintree{}},
					}},
				}},
				"main.tmpl": {tarsMirMircMainTmpl, map[string]*bintree{}},
				"routes": {nil, map[string]*bintree{
					"calculator.tmpl": {tarsMirMircRoutesCalculatorTmpl, map[string]*bintree{}},
				}},
			}},
			"proto": {nil, map[string]*bintree{
				"calculator_tars.tmpl": {tarsMirProtoCalculator_tarsTmpl, map[string]*bintree{}},
				"gen": {nil, map[string]*bintree{
					"calculator": {nil, map[string]*bintree{
						"Calculator_IF.tmpl": {tarsMirProtoGenCalculatorCalculator_ifTmpl, map[string]*bintree{}},
					}},
				}},
			}},
			"servants": {nil, map[string]*bintree{
				"base.tmpl":     {tarsMirServantsBaseTmpl, map[string]*bintree{}},
				"servants.tmpl": {tarsMirServantsServantsTmpl, map[string]*bintree{}},
			}},
			"service_conf.tmpl": {tarsMirService_confTmpl, map[string]*bintree{}},
			"version": {nil, map[string]*bintree{
				"version.tmpl": {tarsMirVersionVersionTmpl, map[string]*bintree{}},
			}},
		}},
		"simple": {nil, map[string]*bintree{
			"README.tmpl":    {tarsSimpleReadmeTmpl, map[string]*bintree{}},
			"gitignore.tmpl": {tarsSimpleGitignoreTmpl, map[string]*bintree{}},
			"go_mod.tmpl":    {tarsSimpleGo_modTmpl, map[string]*bintree{}},
			"internal": {nil, map[string]*bintree{
				"client": {nil, map[string]*bintree{
					"client.tmpl": {tarsSimpleInternalClientClientTmpl, map[string]*bintree{}},
				}},
				"debug": {nil, map[string]*bintree{
					"dump.tmpl":  {tarsSimpleInternalDebugDumpTmpl, map[string]*bintree{}},
					"pprof.tmpl": {tarsSimpleInternalDebugPprofTmpl, map[string]*bintree{}},
				}},
				"internal.tmpl": {tarsSimpleInternalInternalTmpl, map[string]*bintree{}},
				"locator": {nil, map[string]*bintree{
					"comm.tmpl":    {tarsSimpleInternalLocatorCommTmpl, map[string]*bintree{}},
					"locator.tmpl": {tarsSimpleInternalLocatorLocatorTmpl, map[string]*bintree{}},
				}},
				"utils": {nil, map[string]*bintree{
					"utils.tmpl":      {tarsSimpleInternalUtilsUtilsTmpl, map[string]*bintree{}},
					"utils_test.tmpl": {tarsSimpleInternalUtilsUtils_testTmpl, map[string]*bintree{}},
				}},
			}},
			"main.tmpl":     {tarsSimpleMainTmpl, map[string]*bintree{}},
			"makefile.tmpl": {tarsSimpleMakefileTmpl, map[string]*bintree{}},
			"proto": {nil, map[string]*bintree{
				"calculator_tars.tmpl": {tarsSimpleProtoCalculator_tarsTmpl, map[string]*bintree{}},
				"gen": {nil, map[string]*bintree{
					"calculator": {nil, map[string]*bintree{
						"Calculator_IF.tmpl": {tarsSimpleProtoGenCalculatorCalculator_ifTmpl, map[string]*bintree{}},
					}},
				}},
			}},
			"servants": {nil, map[string]*bintree{
				"servants.tmpl": {tarsSimpleServantsServantsTmpl, map[string]*bintree{}},
			}},
			"service_conf.tmpl": {tarsSimpleService_confTmpl, map[string]*bintree{}},
			"version": {nil, map[string]*bintree{
				"version.tmpl": {tarsSimpleVersionVersionTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
