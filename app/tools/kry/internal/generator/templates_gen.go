// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/tars/mir/README.tmpl (250B)
// templates/tars/mir/gitignore.tmpl (250B)
// templates/tars/mir/go_mod.tmpl (291B)
// templates/tars/mir/internal/internal.tmpl (17B)
// templates/tars/mir/main.tmpl (714B)
// templates/tars/mir/makefile.tmpl (4.607kB)
// templates/tars/mir/mirc/gen/api/calculator.tmpl (436B)
// templates/tars/mir/mirc/main.tmpl (418B)
// templates/tars/mir/mirc/routes/calculator.tmpl (262B)
// templates/tars/mir/proto/calculator_tars.tmpl (216B)
// templates/tars/mir/proto/gen/calculator/Calculator_IF.tmpl (9.367kB)
// templates/tars/mir/servants/calculator.tmpl (1.464kB)
// templates/tars/mir/servants/servants.tmpl (371B)
// templates/tars/mir/service_conf.tmpl (931B)
// templates/tars/mir/version/version.tmpl (475B)
// templates/tars/simple/README.tmpl (187B)
// templates/tars/simple/gitignore.tmpl (244B)
// templates/tars/simple/go_mod.tmpl (223B)
// templates/tars/simple/internal/client/client.tmpl (745B)
// templates/tars/simple/internal/internal.tmpl (17B)
// templates/tars/simple/main.tmpl (530B)
// templates/tars/simple/makefile.tmpl (4.403kB)
// templates/tars/simple/proto/calculator_tars.tmpl (212B)
// templates/tars/simple/proto/gen/calculator/Calculator_IF.tmpl (9.367kB)
// templates/tars/simple/servants/servants.tmpl (1.216kB)
// templates/tars/simple/service_conf.tmpl (931B)
// templates/tars/simple/version/version.tmpl (475B)

package generator

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() any {
	return nil
}

var _tarsMirReadmeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xb1\xae\x83\x30\x0c\x45\xf7\x7c\xc5\x95\xac\xa7\xb7\xf5\x27\xba\x75\xef\x8e\x09\x26\x20\x02\x46\x8e\xd3\xef\xaf\x88\x40\x55\x7b\xb7\x1c\x9d\x1b\xdb\x44\xb8\x73\x8e\x35\xb3\xab\x85\x47\x2d\x0e\xc6\xe4\xbe\x63\x90\x55\xa1\x23\x9c\xad\x20\x29\x8a\xd8\x4b\xec\x16\x02\x11\x11\x9e\x85\x93\x84\xae\xeb\x7a\x2e\x53\xf8\xc3\xca\x8b\x20\xc9\x26\xc6\x2e\x38\x42\x9f\xe7\xa8\x86\x75\xb6\x4b\x6b\x3f\xe1\x0c\xc1\xea\xd6\xd0\x1c\xe5\x32\x62\x9e\x65\xfb\x36\x1a\x72\xb8\x62\x90\xbe\xa6\xdf\x86\x49\x16\x2e\x72\x35\x76\x8e\x0b\xb4\xfa\x39\xcb\xf5\x38\xe3\xbf\x34\x7e\x2e\xfe\x0e\x00\x00\xff\xff\xde\xeb\x2f\x88\xfa\x00\x00\x00"

func tarsMirReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirReadmeTmpl,
		"tars/mir/README.tmpl",
	)
}

func tarsMirReadmeTmpl() (*asset, error) {
	bytes, err := tarsMirReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/README.tmpl", size: 250, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8d, 0x4e, 0xe4, 0x84, 0xc4, 0x82, 0x9e, 0x2a, 0xbc, 0x47, 0x4f, 0x41, 0x3b, 0xa, 0x8e, 0xd7, 0xf3, 0x3f, 0x6d, 0x9d, 0x59, 0x33, 0x9b, 0x0, 0xac, 0x1d, 0x86, 0x53, 0xd, 0x1e, 0xeb, 0x82}}
	return a, nil
}

var _tarsMirGitignoreTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x8e\x41\x6a\x03\x31\x0c\x45\xf7\x3a\xc5\x87\xec\x4c\xea\xdc\xa1\xb4\x94\x42\xa1\x9b\x1c\x20\xce\x8c\xc6\x51\x51\x46\x83\x2d\x37\x9d\x86\xf4\xec\xc5\xc9\x46\x3c\xd0\xe7\xf1\x36\x78\x96\x39\x15\xe1\x8a\xc9\x0a\x96\x62\xb9\xa4\x73\x45\x9a\x47\x2c\xda\xb2\xcc\x95\x42\xe4\x1f\x7e\xdc\x3f\x0a\x71\x54\xa5\x10\xab\x75\x5c\x55\x8e\x44\x1b\xec\xb9\x3a\x8e\xdd\xb4\x6e\x71\x6c\xa2\x8e\x8b\xf8\x09\x87\x6c\xf0\xfe\x7b\x1a\x0e\x14\x62\xc7\x3e\xff\x6c\xbe\x34\x87\x4d\xf0\x13\x23\x1b\x06\xfb\xe6\x92\x32\xc3\xcd\x74\x8b\xba\xf0\x20\x93\x0c\x49\x75\xc5\xe5\xc4\x33\x5a\xe5\xf1\xa1\xfc\x10\xe7\xf7\x97\x57\x0a\xd1\xda\x5d\xf6\x66\x7a\xaf\x2d\xf6\xc5\x83\x63\x12\xe5\x4a\x51\x46\x4e\x3b\x0a\x51\xce\x4a\xb4\xbb\x5e\x11\xf7\xa9\x64\x76\xdc\x6e\x3d\x24\xff\xfe\x07\x00\x00\xff\xff\x12\x91\xa2\x4c\xfa\x00\x00\x00"

func tarsMirGitignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirGitignoreTmpl,
		"tars/mir/gitignore.tmpl",
	)
}

func tarsMirGitignoreTmpl() (*asset, error) {
	bytes, err := tarsMirGitignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/gitignore.tmpl", size: 250, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0xa, 0x1a, 0xaa, 0xeb, 0x3e, 0xed, 0xfe, 0xed, 0x7f, 0x2e, 0x83, 0x6, 0xee, 0xa, 0xdc, 0x2a, 0x91, 0xf, 0x71, 0x43, 0xe5, 0x9a, 0x30, 0xb0, 0x48, 0x70, 0x46, 0x1d, 0x80, 0xec, 0xef}}
	return a, nil
}

var _tarsMirGo_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcf\xbf\x4a\x04\x41\x0c\x06\xf0\xda\x3c\x45\x4a\x2d\x36\xb3\xb3\x8a\x9d\x36\x16\x76\x62\xe1\x0b\xcc\xee\x85\x31\x38\xb9\x68\xc6\x19\x3c\x8f\x7b\x77\xd9\x53\xf0\x4f\x23\xa4\xf8\x08\xbf\x7c\x10\xb5\x4d\x2b\x8c\xfb\x3d\xd2\xfd\x53\xbe\x4b\xca\x78\x38\x00\x64\xc3\x48\x71\x02\x70\x7e\x69\xe2\x8c\xa7\x70\x92\xe5\xf5\xb1\xcd\xb4\x98\x86\x87\xe4\xf5\xa6\x58\xdb\x1c\xd3\xad\x61\x8f\x14\x29\xfe\x32\xa9\x88\xee\x82\x8a\x87\x3e\x61\x9f\xe8\x82\x46\x40\x44\xfc\x41\xb2\x6c\x87\x6c\x5b\x59\xd6\xb4\x76\x5c\xd2\xf4\xd7\x2c\xe6\x6c\x35\x64\x1b\x2a\x6b\x67\xc7\x3e\xd2\xf9\x77\xd5\xdc\xea\x91\xf1\x5b\x49\x73\x78\x17\x1d\xb4\x86\x22\xb3\x27\xdf\xad\x74\xa4\x08\x67\xeb\x1b\xcf\x25\x2d\xfc\xef\xc5\xd5\x35\x12\x85\xcf\xf9\xda\xc1\x47\x00\x00\x00\xff\xff\x10\x07\xb1\x16\x23\x01\x00\x00"

func tarsMirGo_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirGo_modTmpl,
		"tars/mir/go_mod.tmpl",
	)
}

func tarsMirGo_modTmpl() (*asset, error) {
	bytes, err := tarsMirGo_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/go_mod.tmpl", size: 291, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x26, 0x7f, 0x9e, 0x41, 0xb3, 0x10, 0xc5, 0xec, 0x23, 0xcf, 0x2c, 0x54, 0x2e, 0x4f, 0x1d, 0x2f, 0xaa, 0x7f, 0xbd, 0xf1, 0x24, 0xe5, 0x4b, 0xf9, 0xd5, 0x2a, 0x75, 0x7f, 0xcb, 0x5, 0x51}}
	return a, nil
}

var _tarsMirInternalInternalTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\xcc\x2b\x49\x2d\xca\x4b\xcc\xe1\x02\x04\x00\x00\xff\xff\xea\xb7\x79\x06\x11\x00\x00\x00"

func tarsMirInternalInternalTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirInternalInternalTmpl,
		"tars/mir/internal/internal.tmpl",
	)
}

func tarsMirInternalInternalTmpl() (*asset, error) {
	bytes, err := tarsMirInternalInternalTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/internal/internal.tmpl", size: 17, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0xc8, 0xf2, 0xa7, 0x61, 0xa7, 0xd3, 0xe3, 0x72, 0xd6, 0xef, 0xe2, 0xd1, 0x6f, 0x9b, 0xed, 0x6d, 0xd5, 0xe1, 0xa6, 0xcb, 0x17, 0x5e, 0x39, 0x9b, 0xa7, 0x4e, 0x8a, 0x8f, 0xbb, 0xac, 0x1e}}
	return a, nil
}

var _tarsMirMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x5f\x6f\xdb\x20\x14\xc5\x9f\xcd\xa7\xb8\xe2\x61\xc2\x6b\x0a\xef\x95\xf6\x50\x25\x5b\x33\x69\x6b\xaa\x26\xef\x13\xc6\xd7\x94\x94\x3f\x16\x86\x34\x5b\x94\xef\x3e\x41\xdc\x55\xd3\x2a\xed\xed\xe2\x73\x7e\xf8\xdc\x23\x46\xa9\x9e\xa5\x46\x70\xd2\x78\x42\x8c\x1b\x43\x4c\xc0\x48\x43\xb5\x49\x4f\xb9\xe3\x2a\x38\xb1\x93\x71\x5a\xda\x90\xfb\x3a\xdd\x05\x91\x64\x9c\xe8\xc5\xd3\xe5\xa9\x7a\xf0\x68\x65\x27\x7e\x19\x77\xed\x26\x61\x4d\x17\x65\xfc\x29\x6c\xd0\xb9\x1a\x4f\x27\xe0\x0f\xcf\xfa\x5e\x3a\x84\xf3\x59\x38\x13\x95\xd0\xe8\x85\x1c\xcd\x3b\xf2\x84\xf1\x20\x7d\x7a\x8f\x3c\x60\x9c\x4c\xf0\xf4\xef\x80\xda\xf8\x6b\x1d\xbc\x51\x65\xa2\x84\x34\x3f\xe0\xbf\xd9\x7a\xec\xb2\xa6\xa4\x25\x64\xc8\x5e\x81\xf1\x26\xb1\x16\x4e\xa4\xa9\xa1\xf9\x16\xd3\x37\x3c\xa0\x65\x97\x63\x9d\x57\x05\x69\xc9\x79\x46\x4a\x65\x17\x64\x4e\xc5\xb7\x4f\xe1\xe5\xab\x1f\x02\x6b\x09\x69\x10\x6e\x3e\x81\x36\x9e\xaf\x70\x90\xd9\x26\xd6\x92\x26\xa2\x36\x53\xc2\xb8\x9d\x37\x64\x58\x9c\x2e\x1f\x8b\xf7\x43\xa9\x95\x97\x8a\xd7\x29\x8d\xdf\xf3\xf1\x74\xae\x1a\x5f\x4b\xdf\x5b\xfc\x92\xbd\x62\x54\xd0\x05\x20\x2f\x3c\xae\x77\xbb\x87\x82\xab\x41\x17\xbc\xd2\x77\x98\xaa\x16\x97\xc1\x0f\x46\x97\x7f\x86\x6e\x5f\x64\x35\x68\x7e\x3b\x8e\x70\x05\x94\x53\xb8\xaa\xe7\x8b\xb5\x7e\x2a\x3d\x6f\xba\xfd\xdc\x33\x25\x4d\xbd\xee\xb6\xef\x4b\x96\x39\x2e\x73\xf9\xb8\x80\xd0\xed\xdb\x59\x7e\xcc\x9e\xbd\xf5\xf1\xef\x72\xf0\xb1\xec\xff\xd9\x6b\xe3\xb1\x16\x25\x04\xec\x36\xab\xcd\xcd\x1f\x2f\xc4\x90\x13\x4e\x90\x02\x20\x69\xe4\x68\xf8\xe3\xac\x2c\xa5\x55\xd9\xca\x14\x5e\xef\x63\xb8\x80\xd7\x97\xc1\xef\xf1\xe5\xcd\xc0\xda\x12\xe2\x77\x00\x00\x00\xff\xff\x36\x49\xf2\x80\xca\x02\x00\x00"

func tarsMirMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirMainTmpl,
		"tars/mir/main.tmpl",
	)
}

func tarsMirMainTmpl() (*asset, error) {
	bytes, err := tarsMirMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/main.tmpl", size: 714, mode: os.FileMode(0644), modTime: time.Unix(1586778626, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x55, 0xc5, 0x5, 0x8e, 0xd9, 0xc0, 0x68, 0x5b, 0x56, 0xa2, 0x2, 0xbe, 0x47, 0xf, 0x72, 0x6e, 0xba, 0x88, 0x79, 0x98, 0x5f, 0xd4, 0xc9, 0x86, 0x7, 0xc1, 0xca, 0xb6, 0xb4, 0x6c, 0x8d}}
	return a, nil
}

var _tarsMirMakefileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x7b\x6f\x9b\xc8\x16\xff\x9b\xf9\x14\xe7\xba\x8e\x6c\xd2\x0c\xdc\x46\x57\x57\x2b\x22\x76\x43\x1c\x42\xd2\x25\xc6\xb2\xdd\x6a\xbb\x6d\x65\x11\x18\xf0\xa8\xc0\xb0\xc3\xd8\x79\x35\xdf\x7d\x35\x03\x7e\x6e\x92\xee\x76\xe3\xa2\x28\x1e\xce\x63\xce\xef\x3c\xe6\x9c\xa1\xdd\x25\xf3\x30\x03\x4c\x8b\x28\x9b\xc5\x04\x0c\xc3\xac\xff\xae\x66\x34\x8b\xcd\x3c\xfc\x42\x12\x9a\x11\x43\x84\xbc\xd2\xd1\xd8\x19\x8e\x26\x43\xd7\x77\x9d\x91\x3b\x19\x38\xe3\x73\xb0\x6c\x68\x77\x37\xc8\xc3\x20\x18\xeb\xe6\xfd\x3d\x18\xbd\x50\x90\x94\xf1\x5b\x78\x78\x50\xef\x83\x30\xfa\x42\x44\x3f\xcc\x09\x3c\x3c\x20\xe4\x0c\x06\x50\x3f\x96\x0d\x92\xef\x94\xe5\x82\x39\x76\x86\x9e\x3b\x5e\xe3\x8d\x43\x9e\x12\x21\x59\x97\x67\xbe\xe3\x8d\x6a\x16\x3a\x5d\x7f\xe9\x05\xfd\xb3\x0b\xaf\x51\xaa\x08\x9f\xd3\x88\x18\x11\x2b\x12\x34\x1a\x0f\x2f\x06\x13\x29\x6b\xd9\xd0\x47\xaf\xf0\xcb\x3e\xe8\x55\x42\x6f\x20\x4a\x19\x44\x2c\x2f\x69\x46\x80\x70\xce\x38\x22\x37\x25\xe3\x02\xfc\xde\xc4\xf1\x7d\x00\xb0\x81\x14\x93\x77\x23\xe3\xdd\xf8\x0c\xff\xb4\xe4\x3a\x7d\x85\x79\x8b\xfb\xe2\x18\xbd\x40\x25\xec\x17\x99\xb0\x6a\x4a\xb2\x0c\x52\x06\xa4\x98\x43\xcd\xd0\x91\x17\xc8\xd4\x3d\x2a\xa0\x72\x8a\xbc\xe0\xec\x52\xf1\x53\x96\xe4\x02\x70\x05\xf8\x1a\x79\x01\x34\xe8\xdb\xf7\xb5\xe0\x83\x79\x45\x0b\x33\x65\x68\x2c\x53\x63\x43\x59\x72\x96\x20\xbf\x49\xd5\x6b\x1b\xf0\x6f\xd0\x4a\xa9\xb8\x9a\x55\x46\xc4\x72\x93\xdc\x64\xe1\x95\x79\x47\x73\x9c\x57\x66\x58\x96\xa6\x0c\x4b\x98\x99\xb3\x8a\xf0\xca\x9c\x13\x5e\x51\x56\x18\x27\xb2\x1e\xc7\x34\x27\xf6\x02\x5d\x1c\x0a\x02\x78\x06\x9d\xd7\x7b\x1f\xf0\x5e\x8e\xf7\x62\xd8\xbb\xb0\xf6\x2e\xad\xbd\x11\xec\xfd\xde\xd1\x5b\xff\xda\xa6\x47\xc5\x79\x58\x4d\x97\x16\x53\x2a\x80\x93\x39\x2e\x43\x5e\x11\x38\x77\x9d\x53\xbd\xf5\xf2\x89\xca\xe8\x55\x19\x8a\xa9\xdd\xbe\xaf\x66\x57\x95\x00\xeb\x00\x0e\xda\xdd\x26\x4b\xea\x68\x8c\x0e\x9b\xa8\xab\xd3\x97\x50\x5e\x89\x6b\xc6\x63\x99\xb7\xa5\xc6\x13\x59\xd6\x75\x95\x1d\x79\x9c\x0f\x53\x86\xde\x1e\x7a\x81\x3a\x17\xf5\x66\x98\xcd\x44\x4c\xb9\x5d\x72\x26\x98\x99\x92\xe2\xe5\xbd\x53\xbd\x62\x34\xec\xad\xf0\x5f\xd3\x2c\x8e\x42\x1e\x43\x6d\x75\xbf\xe9\x35\x5e\xb0\x14\xdb\x92\xdb\x37\x52\xa6\xaa\xf1\xc2\x77\x47\x35\xaf\x76\x35\xa1\x45\x0c\x06\xe0\x42\x76\x91\x96\x14\x6b\x01\x16\xb7\x25\x81\x44\x7f\x71\x4f\xa4\x33\x11\x2b\x6f\x65\x7b\x04\x1b\x68\x02\x82\x54\x02\xf0\x1d\xb4\xda\x5d\x67\x30\xd0\x5b\xf0\xf5\xeb\x3a\xad\xee\x69\x7a\xeb\x08\xc4\x94\x14\xf0\x09\xc1\xe6\x43\xa2\x29\x83\xd6\xc7\x8e\x33\x18\x74\x80\x71\xe8\xd4\x0a\x1d\x60\xa5\xa0\xac\x00\x5a\x01\xc9\x4b\x71\x6b\x7c\x6e\x1d\x01\xb9\xa1\x02\xde\x1c\x6d\xee\xa2\x91\xac\x22\xf0\x09\x69\xda\x82\xb0\x40\xf5\x1f\xc0\xb2\x3c\x0e\xf5\x27\x8c\x6b\x5a\x63\xbd\xcf\xa0\x9a\x45\x53\x88\x29\xb7\xa4\xfc\x01\x14\xec\x1a\xae\x09\x44\x9c\xc8\xf3\x46\x85\x34\x5f\xab\x6b\x9a\xa6\xe5\x5f\x62\xca\x01\x97\xf5\xe6\xd2\xb4\xa6\x25\x74\x03\xd7\x72\xef\x1e\x2b\x6f\x41\x85\xab\xdd\x7d\xa3\x03\xfe\x59\x29\x49\x6f\x36\xa4\xa3\x12\xf0\xbc\x16\xa9\x11\xab\x5d\x13\x7a\x84\x90\xe3\xfb\x16\x2c\x23\xb9\x93\x94\x2e\x77\xb7\x20\x25\x05\x96\xb5\x08\xf2\xf4\xc9\x62\xd4\x91\x26\x97\x3a\xa8\xe1\x08\x38\x8b\x93\x2c\x4c\x2b\xe8\xb4\xbb\x4d\xab\xd1\x3b\xb5\xf0\xc9\xbb\x0b\xff\x54\x1d\x2c\x1d\x30\x83\xf6\xf1\x4e\xb0\xaa\xce\xfa\xbd\x38\xb1\x68\x48\xe3\x67\x70\xef\x34\xd4\x72\x44\x93\xe7\xe0\xf3\x59\xf1\x77\x83\x9c\x87\xb4\x30\x52\x06\x18\xcb\x81\x4f\x53\xbb\xdd\xad\xaf\x03\x3b\x84\x8e\xbf\x19\xff\xa7\x1d\xf8\x66\xf4\x7f\xb0\x43\x51\x46\x49\x21\xbe\xcf\x17\x5a\x08\xc2\x8b\x30\x33\xeb\x4d\x9a\x9f\x1f\x08\xde\x18\x9c\x07\xfd\x0f\x2b\xf0\x68\xb1\xb0\x16\x97\xd3\x85\x23\xcd\xf0\x94\x9d\x65\x39\xfa\xf4\x0d\xa1\x1d\xe3\x23\x3c\x14\x04\x2d\x16\x16\xd2\x8e\x53\xb6\xa4\x43\x4e\x79\x64\x36\x99\x47\xda\xb1\x0c\xfc\xd9\xe5\x58\x07\xc3\xdc\x29\xae\x8c\x16\xb3\x1b\x1c\xe6\xf1\xff\xff\x87\xd6\xd6\x8f\x57\x43\xcf\x0b\x26\x6e\xdf\x39\xf1\xdd\x53\xfb\xbf\xe0\x05\xc1\xc8\x56\x3a\xe0\x05\xce\xb0\x77\x6e\x2b\x55\xf8\xce\x3e\xb9\xd3\x7e\xb3\x70\x97\x93\x8c\x84\x15\x41\xcd\xef\x86\xff\xb0\xaa\x54\xed\x98\x26\xf0\xb1\x1e\x9c\x0d\xac\x89\xc8\xcb\x89\x1c\x78\x9f\x97\x73\x74\x31\xdd\x24\x75\x1a\x56\x72\x30\x57\xc2\xfa\x8b\xc6\x01\x84\x57\x8c\x0b\xa3\x55\x8f\xb3\xd5\xf8\x5e\xcd\xec\xb5\x51\xba\xa5\x6c\x2e\x29\xdb\x1f\x5b\xea\x4e\xa7\xc6\xae\x9c\x9a\x3c\x81\x75\xc9\xc6\x91\xe7\xf6\x33\x6b\x38\xd1\x23\x3e\x1e\x81\x08\x39\x60\x4c\x6e\xd4\x97\xa1\xdd\x32\xaa\x79\xd1\x5a\x27\x4c\x6a\x42\x74\x37\x5f\xb3\x6b\x88\xf4\x0e\xd6\xf7\x8f\x62\xc0\xb5\x95\x7c\xfe\x1c\x94\x95\xe2\xb6\x7b\x4a\x99\xe7\x9b\xfe\xad\x60\xae\x72\x20\x01\x47\xf3\xe4\x6e\x0b\x8d\x61\x34\x61\x4f\x28\x42\x34\x29\xc8\x1f\xd0\x5d\x3b\xf2\x07\x3a\x42\x23\x77\xf8\xde\x1d\x4e\xfa\xce\xa5\xbb\xfc\xa4\x55\x75\x88\x48\x11\xd3\x64\xa7\xe5\x28\x2f\x68\x48\xfe\xb3\x20\xc9\x05\xd2\x52\x56\xdf\xd9\xe4\x67\xb8\xb1\x53\xcb\xd2\x5c\x92\x0b\xab\x6e\xf1\xaa\xd3\xa8\x85\xbc\x57\xef\x6a\xcc\x90\xb0\xb0\x90\xca\xa6\xaa\x9a\x53\x77\xe0\xf6\x4f\x27\x2a\x19\xc1\xc9\x5b\x09\xe0\xa2\xff\x3e\xf8\xd5\x9d\x3c\xc2\xf1\x83\x9e\xe3\x2f\x5e\x36\x4e\x84\xe7\x8e\x47\x7a\xbd\xdd\x44\xc2\xd7\xa1\x7d\xdf\xf3\x5d\xa7\x2f\x5f\x1e\xc0\xd8\x37\x62\x43\xe4\x25\xa4\x39\x2b\x0c\x36\x13\xbb\x73\x2e\xcc\xb2\xa7\xfc\x3b\xd7\xb7\x08\xbd\xc1\x60\x9b\xf4\x98\xa7\xe7\x3d\xb7\xd6\x95\x8b\x46\xe7\x9f\x78\xbf\x6f\xb0\x55\x04\xe4\x62\x15\x86\x3f\x03\x00\x00\xff\xff\x47\x2c\x0c\x18\xff\x11\x00\x00"

func tarsMirMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirMakefileTmpl,
		"tars/mir/makefile.tmpl",
	)
}

func tarsMirMakefileTmpl() (*asset, error) {
	bytes, err := tarsMirMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/makefile.tmpl", size: 4607, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0x97, 0x3f, 0x5d, 0x3b, 0x8f, 0x62, 0xde, 0x36, 0x9b, 0x53, 0x5c, 0xff, 0x3, 0x35, 0xc7, 0x6, 0x40, 0x47, 0xe1, 0x29, 0xd6, 0x82, 0x4, 0x79, 0x5e, 0x13, 0x8e, 0x45, 0x2a, 0x4a, 0xb}}
	return a, nil
}

var _tarsMirMircGenApiCalculatorTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4f\x6b\x32\x31\x10\xc6\xcf\x3b\x9f\x62\xd8\xd3\xee\x8b\x26\x77\xe1\x3d\x88\x4a\xdb\x4b\x85\xea\x17\xc8\x26\x63\x1c\xba\x3b\x59\xf2\xa7\x54\x4a\xbf\x7b\x59\x6b\x51\x04\x6f\x21\xcf\x33\xbf\xdf\x30\x5a\xe3\x2a\x38\x42\x4f\x42\xd1\x64\x72\xd8\x9d\xd0\x87\xf9\xc0\x51\xe1\x7a\x8b\xaf\xdb\x3d\x6e\xd6\x2f\x7b\x05\x30\x1a\xfb\x6e\x3c\xa1\x19\x19\x80\x87\x31\xc4\x8c\x0d\x54\xb5\xe7\x7c\x2c\x9d\xb2\x61\xd0\x9e\x65\xee\x83\xb0\x9d\x5e\x35\xb4\x00\xf9\x34\x12\xae\x4c\x6f\x4b\x6f\x72\x88\xc8\x92\x29\x1e\x8c\x25\xfc\x82\x6a\xe9\x5c\xf3\xcf\xb3\xa8\x55\x90\x4c\x9f\xb9\x85\x6a\x57\xba\xbb\xaf\x6f\x00\xad\xf1\x8d\x3c\xa7\x4c\xf1\x8a\xda\x51\xfc\x30\x92\x31\x5e\x92\x5b\x4b\xba\x64\x39\xa0\x67\x81\x43\x11\xfb\x98\xd0\x10\x9e\x8d\x1b\xf1\x2c\x34\xc3\x74\x43\x6a\xa7\x35\x63\x28\x13\x7f\xf1\x1f\x09\xa0\xd2\xfa\xaa\x3c\x27\x09\x59\x0e\x61\x72\xfd\x16\xff\x06\xd4\xb3\x11\xd7\x53\x53\x3f\x6d\xf6\xf5\x0c\x6b\x6d\x9c\xd3\x8b\xfe\x98\xf4\x22\x1e\x53\x3d\xc3\xa4\x96\xce\xb5\x0f\xeb\xa9\x74\x77\xf5\x5d\xe9\xa6\x7b\xfc\x04\x00\x00\xff\xff\x2f\xdd\x8b\x30\xb4\x01\x00\x00"

func tarsMirMircGenApiCalculatorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirMircGenApiCalculatorTmpl,
		"tars/mir/mirc/gen/api/calculator.tmpl",
	)
}

func tarsMirMircGenApiCalculatorTmpl() (*asset, error) {
	bytes, err := tarsMirMircGenApiCalculatorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/mirc/gen/api/calculator.tmpl", size: 436, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0x87, 0x66, 0x87, 0x8e, 0xdb, 0xda, 0xe7, 0x71, 0x3a, 0x36, 0x79, 0xb7, 0x1f, 0x63, 0x23, 0x15, 0xfd, 0x82, 0x82, 0xf4, 0xf, 0x66, 0xe0, 0xca, 0x24, 0x6, 0x57, 0x45, 0xdc, 0x91, 0xd4}}
	return a, nil
}

var _tarsMirMircMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xcd\x6a\xeb\x30\x10\x85\xd7\x9a\xa7\xd0\xd5\x4a\x86\x8b\x05\x5d\xa6\x64\x57\x1a\xba\x68\x1b\x9a\x07\x28\x8a\x33\x51\x86\xc8\x33\x66\x2c\x17\x8a\xf1\xbb\x17\xb9\x25\xcb\x2c\xe7\xe8\xfc\x7c\x1a\x62\x77\x8d\x09\x6d\x1f\x89\x01\xa8\x1f\x44\x8b\xf5\x60\x5c\x96\xe4\x00\x4c\x6b\x5d\xa2\x72\x99\x8e\x6d\x27\x7d\x88\x99\xfa\xef\xd0\x93\x86\xaf\x87\xd0\x89\xa2\xbb\xeb\x40\x4e\xc4\x58\x6b\x3e\xad\x9b\x67\xdb\xee\xaf\xe9\x2d\xf6\x68\x97\xa5\x5a\xba\xa0\x32\x15\x1c\x1d\x34\x00\x21\x24\xd9\x24\x64\xd4\x58\xd0\x26\xb1\x3a\xf1\x4a\xd5\x26\x81\xf3\xc4\xdd\x7a\xf8\xc6\xce\x60\xb2\xa4\x76\xaf\xc4\x25\xb3\x77\xb7\x4c\x27\x27\xb4\x63\x89\x5a\x5c\x03\x46\x86\x32\xda\xcd\xd6\xbe\x0f\x85\x84\xc7\x19\x8c\xf9\x98\xf8\x55\x4e\xe8\x5f\xf8\x80\x4a\x31\x3f\xe1\x71\x4a\x55\x69\xfe\x83\x31\xbb\xdf\x1e\xd1\x4a\xe8\x6f\xd7\x8e\x78\x7d\x3e\x10\x5f\xf7\xb1\x5c\xbc\x6b\x43\x42\x76\x55\x5c\xc0\xd0\xd9\xa2\x6a\x1d\xfa\x4b\xa0\xaf\xcb\xcd\xe3\x2a\xff\xdb\x5a\xa6\x5c\x91\x57\xe6\xe7\x58\x62\xf6\xa8\xda\xac\xd9\x3b\xdf\x38\x13\xd3\x78\x71\x0d\x2c\xf0\x13\x00\x00\xff\xff\x86\x0e\x79\x4b\xa2\x01\x00\x00"

func tarsMirMircMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirMircMainTmpl,
		"tars/mir/mirc/main.tmpl",
	)
}

func tarsMirMircMainTmpl() (*asset, error) {
	bytes, err := tarsMirMircMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/mirc/main.tmpl", size: 418, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0xf7, 0xa3, 0x95, 0x45, 0xba, 0x1e, 0x27, 0x4e, 0x17, 0x7d, 0x50, 0xec, 0x70, 0x26, 0x51, 0x2d, 0xb7, 0xba, 0xb8, 0x33, 0xe8, 0x93, 0x76, 0xd5, 0xd8, 0xd0, 0x2d, 0x22, 0x33, 0xa3, 0x96}}
	return a, nil
}

var _tarsMirMircRoutesCalculatorTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x3d\x4e\xc4\x40\x0c\xc5\xf1\x3a\x3e\x85\x35\x55\xd2\xac\x25\xca\x74\x08\x21\x0e\xc0\x05\x76\x32\x31\x89\xc5\x7c\xc9\xe3\x01\x45\x68\xef\x4e\x83\x20\x34\xdb\xfe\x7f\x4f\xaf\xfa\xf0\xee\x37\x46\x2d\xdd\xb8\x01\x48\xaa\x45\x0d\x47\x18\x2e\xe8\x36\xb1\xbd\x2f\x97\x50\x12\xf9\x28\xe9\xa0\x24\x4a\x1f\x0f\xee\x1e\x12\xe7\x4d\x32\x3b\x98\x00\xde\x7a\x0e\x28\x59\x6c\x9c\xf0\x0b\x86\xc7\x75\x7d\xce\xa6\xc7\x98\xf9\x73\x7c\xf2\x31\xf4\xe8\xad\xe8\x34\xc1\x0d\x80\x08\xff\x12\x7a\x6c\x92\x6a\x64\x0c\xbf\x0d\xec\xa8\x7c\xde\x34\xd3\x1e\xec\xe7\x18\x5f\xd8\xf0\x9a\x44\x67\x47\x7e\x5d\x69\x8e\x7b\xa3\x59\xf7\xe6\xae\x30\xbc\xf6\xe5\xec\xad\x2f\xff\xfc\x06\xdf\x01\x00\x00\xff\xff\xab\xa1\x19\xaf\x06\x01\x00\x00"

func tarsMirMircRoutesCalculatorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirMircRoutesCalculatorTmpl,
		"tars/mir/mirc/routes/calculator.tmpl",
	)
}

func tarsMirMircRoutesCalculatorTmpl() (*asset, error) {
	bytes, err := tarsMirMircRoutesCalculatorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/mirc/routes/calculator.tmpl", size: 262, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x26, 0xa6, 0x52, 0x52, 0xfd, 0xaf, 0x98, 0x4a, 0x97, 0xed, 0x57, 0x85, 0xc4, 0xe6, 0xf4, 0x75, 0x92, 0x6d, 0xd7, 0x76, 0x6, 0x53, 0x87, 0x2d, 0xb8, 0x16, 0xe0, 0x1e, 0xb5, 0x3c, 0xda}}
	return a, nil
}

var _tarsMirProtoCalculator_tarsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\x41\xaa\xc3\x30\x0c\x44\xf7\x3e\xc5\x2c\xff\x87\x40\x0e\xe0\x55\xe9\x11\x72\x02\xdb\x52\x89\xc1\xb1\x40\x91\xe8\xa2\xe4\xee\xc5\x2d\x94\x52\x28\xd5\x46\x33\xbc\xe1\x6d\x42\xde\x18\x25\xb5\xe2\x2d\x99\xe8\x2d\x00\x40\xed\xc6\x7a\x49\x85\x71\xfe\x20\xe3\xe6\x19\x27\x22\x24\x22\xd8\x55\xd0\x7d\xcb\xac\x2f\x5a\xbb\x0d\xfc\x37\x7e\x5b\xa7\x47\xd7\x75\x82\xb8\x3d\x33\xef\xff\x31\xbc\xcb\x16\xcf\xd8\x3d\x9b\xa6\x62\x55\xfa\x37\xe9\xe2\xf9\x87\x74\x2c\x8f\x18\x8e\x18\xee\x01\x00\x00\xff\xff\xc4\x0c\x0c\xee\xd8\x00\x00\x00"

func tarsMirProtoCalculator_tarsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirProtoCalculator_tarsTmpl,
		"tars/mir/proto/calculator_tars.tmpl",
	)
}

func tarsMirProtoCalculator_tarsTmpl() (*asset, error) {
	bytes, err := tarsMirProtoCalculator_tarsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/proto/calculator_tars.tmpl", size: 216, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0x34, 0xca, 0x52, 0x5c, 0xdb, 0xb7, 0xef, 0x9b, 0xf2, 0x39, 0x92, 0x7d, 0x39, 0xb7, 0x91, 0xab, 0xe8, 0x6c, 0xbb, 0x68, 0x70, 0x9d, 0xcf, 0x8, 0x78, 0xe6, 0xe5, 0x2d, 0xb1, 0xbe, 0xc6}}
	return a, nil
}

var _tarsMirProtoGenCalculatorCalculator_ifTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6e\xdb\x3a\x12\xbe\x16\x9f\x62\xd6\x17\x81\x14\x08\x72\x92\x2e\x16\x0b\x03\xbe\x68\x73\x76\xbb\x01\x7a\x0e\x0e\xe2\x60\xcf\x45\x51\x18\xb2\x34\xb2\x58\x4b\xa2\x4a\x52\x4e\x8c\x22\xef\xbe\x18\x52\xbf\x49\x14\x3b\xed\xa2\x3f\xa8\x03\x14\x91\x48\xce\x37\xc3\xe1\xcc\xa7\xe1\x34\xd3\xe9\x9f\x61\xb4\x09\xd7\x08\x97\x61\x16\x55\x59\xa8\x85\x84\x48\xe4\x39\x16\x9a\x4d\xa7\x70\x93\x72\x05\x09\xcf\x10\x6e\x43\x05\x6b\x2c\x50\x86\x1a\x63\x58\xed\x40\x87\x52\x5d\xac\x05\x9c\x07\xe7\xb4\xf2\x6d\x3b\x97\x48\x91\x43\xd4\xc2\x05\xb4\x90\x95\x8f\xd4\x30\xc6\xf3\x52\x48\x0d\x2e\x73\x26\x91\x28\x34\xde\xe9\x09\x73\x26\x49\x6e\x7e\xad\xb9\x4e\xab\x55\x10\x89\x7c\x7a\x13\x4a\x75\x99\x89\x2a\x36\x4f\x6f\xc5\x94\x10\x27\xcc\xc9\x61\xef\xaa\x69\x2e\x62\xcc\x0e\xc1\x9b\x96\x52\x68\x11\x89\x6c\x1a\x89\x18\xa3\x97\x89\x48\x54\x53\x89\x9f\x2a\x54\x3a\x39\x48\xb2\xd2\x3c\x9b\x46\x95\x94\x58\x1c\xb4\x5b\x2b\xa0\x85\xc8\xd4\x84\x79\x8c\x4d\xa7\xbd\xf3\x52\x5a\x56\x91\x66\x7a\x57\x0e\x8e\xd1\x0e\xc3\x67\xe6\x28\xc8\x83\x05\xca\x6d\x58\x68\x76\x4f\xc2\xaf\xe3\x18\xb8\x02\x9d\x22\x94\x52\xdc\xed\x20\xa9\x8a\x48\x73\x51\x40\x22\xa4\x19\xce\x51\xa7\x22\x86\x18\x13\x5e\x60\x0c\xbc\x30\xa3\x64\x8a\x09\x07\x1f\x6e\xb9\x4e\xcd\x58\x7d\x74\x8c\x20\xc0\x5d\x8a\xd5\x47\x38\xed\xac\xf0\xe0\x75\x1c\xbb\xef\x52\xe0\x85\x7e\x75\xe1\xc3\x75\xf7\x84\x0a\x4e\xeb\xe7\xa5\x28\x35\x04\x41\x90\x87\xe5\x7b\xa5\x25\x2f\xd6\x1f\xec\x2f\x0f\x5c\x89\xba\x11\x41\x29\xe9\x1f\xa1\x7e\x66\xcc\xd9\x86\x12\x32\x2c\xd6\xba\xc6\xb4\x23\x69\xb8\x45\x58\x09\x91\xd9\x57\xbd\x83\xd5\x4e\x23\x73\x96\x42\xc1\x6c\x0e\xe6\x74\x83\x3f\xf0\xf6\x4d\x95\x24\x28\x5d\x8f\x39\x04\x3b\x87\xa5\x50\xc1\x5f\x92\x6b\x5c\x1a\x30\xf7\x5d\xea\xc3\xb9\xc7\x1c\x9e\x18\xbd\x7f\x9b\x43\xc1\x33\xf2\xa6\x23\x51\x57\xb2\x00\x89\xda\x98\xc4\x9c\x7b\x36\x06\x72\x9d\xfa\x70\x71\x38\x08\x19\xbc\x54\x3a\xd4\x95\x82\x47\xbe\xa8\xa7\x6b\x7f\x3f\x35\xcf\x13\xf2\x87\x4b\xde\xf4\x60\x3e\x87\x73\xa3\xa9\x95\x98\x1b\x3f\xbf\x3f\xfb\xc0\x9c\x7b\xc0\x4c\x21\x3c\x14\xb8\x18\x15\x70\x1a\xb3\xea\xb1\x73\x02\x61\xce\x52\xa2\x2a\xc9\xad\x05\xde\xba\x4d\x06\x04\xd7\xa8\x4a\x51\x28\x24\x6e\x41\xed\x31\x27\xd2\x77\xd6\xf7\x06\x37\x78\x13\x46\x9b\xb5\x14\x55\x11\xf7\xdd\xbf\xfa\x18\xa8\x80\x62\x7e\xc9\x8b\xad\xd8\xa0\x1b\xe9\x3b\x1f\xce\x7c\x98\xbc\x8e\xe3\x89\x6f\x7c\x7b\x23\xde\xec\x34\x2a\xd7\xf3\x1b\x3f\xf9\xad\x47\x7c\x30\xd6\x1c\xea\x6d\x67\xc9\x87\x01\x71\x8d\x61\x8c\xd2\x35\x49\x16\x5c\x15\xfa\x9f\x56\x99\x6b\x50\x83\x85\x8d\x17\xaf\x33\x98\xab\x80\x44\xea\x93\x3e\x31\xd8\x67\x3e\x68\x59\xe1\x8b\xc3\xe6\x01\x96\x7b\x7a\x8d\xca\xf3\xe1\xd5\x4b\xe1\xac\x17\x51\xff\x1e\x96\x6e\x7b\xb2\xb5\x63\x06\x9e\xb2\xce\xf3\x98\xb3\x84\x79\x9d\x44\xf6\x99\xd2\xc7\x3e\xe9\x1d\x1b\x28\x29\x78\xd6\xb2\xc7\x5f\x5c\xa7\x97\x75\x94\x7c\x43\x22\xe9\xa9\xa5\xe8\x68\x03\xea\xb2\xd9\xd7\x91\x68\x7e\x6d\xa2\x39\x72\xc9\x4f\xc6\x25\x8b\x6a\xf5\xcd\x08\x64\x51\xad\x8e\x95\xc8\x2f\x4e\x10\x5f\x59\x89\x2c\xaa\xd5\x91\x3d\x7e\x28\xf6\xf8\x1e\x95\xc8\x50\xed\xb1\x12\x39\x12\xcd\x97\x54\x22\x47\x2e\xf9\xb1\xb8\x04\x75\xdd\x23\x01\x85\x5a\x81\xaa\x5f\x1a\xfa\xa0\x77\x1e\x61\x30\xce\x0a\x2d\x80\xdb\x6b\xb8\x50\xde\xd6\x1b\x80\x39\x28\xab\x8b\xe2\x61\x81\xfa\x86\xe7\x28\xaa\x5a\x9f\x21\xa3\x7a\xa0\xaf\x93\x6c\xb8\x4d\x79\x94\x12\xbd\xf1\x02\x72\x35\x6e\xc2\x10\xd7\x35\x2c\xd2\x33\x20\x78\x38\xef\x0d\xcc\xf9\x4f\xa8\xd2\x4b\x11\x63\x67\x4f\x1a\xaa\xd4\x84\x92\xb1\x28\xca\x38\x16\x1a\xa2\x30\xcb\x78\xb1\x6e\x0d\x44\x09\x7e\x67\x21\x2d\xfc\x1d\x95\x0a\xd7\x3d\xf1\xbd\x16\x37\xaa\x5d\xa3\x8c\x17\xfa\x1f\x7f\xf7\x6c\xe7\x6a\xd6\x26\x91\x7b\x4a\x5c\xdd\xf8\xf5\x4f\x22\x79\x8f\x39\xed\xa6\x06\x10\xb4\xb1\x31\x95\x4d\x20\x91\x1a\x1f\x24\x71\xf2\x48\x1a\xfb\x40\xd4\xfe\x88\x75\x7c\x50\xfa\x09\xb2\x32\x06\x13\xbd\x74\x3c\x44\xce\xd8\xf8\xb0\xa4\x5d\xc8\xb0\x58\xa3\x01\xa4\x19\x27\xc6\x0c\x75\xcd\x06\x1b\x8f\x39\x94\xbb\xcd\xfa\x6d\xb7\x5e\xa2\x6a\xbe\x29\x56\x2e\xd2\x77\xef\x37\x1f\x60\x0e\x5b\x2b\xd3\xa3\xb5\x8e\xce\xbe\x81\xde\x27\x74\x90\x57\xfa\x3a\x94\x56\x7b\x75\x2c\x2c\xc5\x1a\x31\xa5\xd5\x70\x6b\x6d\xbb\xa1\x49\xcc\x30\x8e\xbb\xc4\x3c\x3c\x33\x3b\x04\x97\xe7\x25\x2c\x79\x5e\x76\xd3\x3e\xd0\xfa\xde\x11\x9a\x28\xeb\x89\x10\x9e\x0f\x3c\x2f\xcd\x4a\xef\x65\x46\xd9\xa2\xa2\xa9\x0e\x0e\xb0\xb0\x5f\x58\x3c\x36\xb6\x37\xbb\xcf\xee\x3e\xd0\x13\x5b\x30\xdd\xe2\x21\x38\x25\x04\xca\x24\x8c\x90\xe0\xf6\xf7\x6d\xc7\x2a\x15\xe6\xec\xbf\x69\x8d\xca\xde\x3f\x65\xd9\xa0\xc8\x7b\x68\xe4\x17\x94\x5f\xcf\x5b\xfe\xff\x04\xbc\x67\xf6\xcc\x47\x0d\x5d\x6e\xc3\xac\xdb\xd3\xe7\x7b\x53\x11\xc0\xa9\xfd\x7e\xdb\xaf\xb3\x4f\x5f\xd2\x66\xc8\x7e\xcf\x6d\xb1\xda\xb8\x84\x4a\x3f\x0f\xdc\x41\xad\xf8\xc2\x52\x91\x5e\xde\xb5\x2b\x9f\xfe\x7e\x9b\xf2\x70\xff\xb7\xbb\xa9\x44\x08\xf2\x7a\x0f\xa4\x29\x16\x5f\x08\x89\xaa\xc1\xe4\xc9\xc0\x0d\xf3\x39\x24\x21\x91\xa1\xa9\xe8\x28\x79\xe8\xe3\xb1\x0d\xb3\xc0\x1d\x86\x93\x67\x91\xed\x41\xd1\x1a\x9e\x97\x81\x8d\x77\x3a\x5e\x1f\x4e\xa8\x50\x61\xce\x13\x06\x0d\x2c\x32\xc5\xc9\x48\x19\x6c\x0b\xa7\xc3\x40\x1a\x12\xdf\x67\x77\x2f\x0d\x46\xb7\x60\x88\xfd\xbb\xed\x63\xfc\x56\x80\xca\x87\x57\x07\x9c\xf1\x81\xb5\x9b\x2d\xdb\x4c\x6a\x8d\xa6\xec\x31\xb5\x7e\x90\xd4\xb2\x9f\x83\x9f\x3a\xb5\xea\x20\xfb\x75\x52\x8b\x4d\xa7\xbf\x71\x55\x86\xda\x96\xf5\x95\xc2\x18\xb4\x30\xc5\x7f\xbf\xf2\x57\x9c\xea\xf5\xbc\xcc\x30\x2f\x50\x1f\xda\x6b\x09\x06\xc1\xa5\x52\x71\x4b\x1a\xe8\x52\xd1\xdc\xc3\x85\x84\x42\x3c\x53\x30\x35\xb6\x1d\x9a\xf9\x12\x3f\x0d\xca\x7c\xf3\xd0\x54\xf9\xe6\x46\x3f\x7e\x09\xd8\xcb\x07\x87\xde\xb9\x25\x7e\xea\xdf\xb8\xc7\xdb\x33\xea\x96\x93\xdf\xcd\xfa\x7f\x57\x45\xf4\x47\x98\x9b\x10\x8e\x42\x85\xf6\xbf\x30\x66\x75\x54\xcd\xe6\xd0\xb2\x3e\xed\xda\x70\x9c\x61\xb5\x81\xdd\x07\x06\x99\xc5\x5f\x54\xab\x3e\x7e\x1b\xfa\x5f\x8d\xcf\x9c\x18\x93\xb0\xca\xf4\xac\x8b\xcd\x24\xd7\xc1\xbf\xc8\x93\x89\x3b\x31\x87\x9d\x73\x95\xd3\xc9\x4e\xbc\x96\x97\x9e\xe9\x0f\x29\x1f\xc4\xc6\x78\xd1\xfe\x31\x45\xf0\x16\x75\x73\x7e\xf6\x6e\x41\xb6\xdb\xe4\x10\x1b\x38\x39\x01\xd5\xb7\xb0\x6b\xf1\xa8\x4e\xdb\x33\xed\xa6\xe8\x19\x75\xbd\x76\x60\x5f\x5f\x34\xd0\xd7\xf5\x99\x22\xa3\xf0\xd4\xc4\xde\x1c\x46\x82\x8f\x64\xae\xfe\x8b\x52\x71\x51\xcc\x80\x7e\xce\x7d\xe6\x38\x97\x76\xf6\x66\x57\xe2\x0c\xe0\x8c\x86\xae\xea\x98\xbe\x8a\x69\x1d\x45\x4e\x37\x62\xe6\xeb\x4b\xb9\x95\x69\x44\xb4\x05\xa5\x1f\x33\x54\x47\x67\x3d\x6a\x03\x98\x42\xf7\x46\x50\x18\xbb\x83\x66\x95\x67\x04\x8c\xff\x1a\x94\xa6\x7b\x45\x13\xd7\xa8\xaa\x4c\xff\x86\x2a\x9a\x01\x4c\x26\xc6\x6c\xbb\xf9\x7a\x75\xdb\xb7\x31\x8e\x18\x90\xcf\xff\x02\x00\x00\xff\xff\xf0\x46\x43\x36\x97\x24\x00\x00"

func tarsMirProtoGenCalculatorCalculator_ifTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirProtoGenCalculatorCalculator_ifTmpl,
		"tars/mir/proto/gen/calculator/Calculator_IF.tmpl",
	)
}

func tarsMirProtoGenCalculatorCalculator_ifTmpl() (*asset, error) {
	bytes, err := tarsMirProtoGenCalculatorCalculator_ifTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/proto/gen/calculator/Calculator_IF.tmpl", size: 9367, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x9a, 0x4a, 0x22, 0x1e, 0x26, 0xb1, 0xde, 0x80, 0x8f, 0x23, 0xda, 0xc3, 0xc8, 0x13, 0xc8, 0x7f, 0x35, 0x77, 0xb3, 0x6f, 0x1, 0xf2, 0x1a, 0xb7, 0x73, 0x4e, 0xcb, 0x3d, 0xa1, 0xd, 0x8}}
	return a, nil
}

var _tarsMirServantsCalculatorTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x54\x41\x6f\x9c\x3c\x10\x3d\xdb\xbf\x62\xc2\x21\x82\x68\x63\x94\xfd\x6e\xf9\xb4\x87\x6d\xd4\x1e\x57\x91\x90\x7a\xad\x8c\x99\x80\x1b\x63\xa3\xb1\x21\x9b\x26\xfb\xdf\x2b\x03\x5b\x48\x15\x55\xbd\xb4\xa7\xee\x09\x7b\xde\xbc\xf7\xfc\xc6\xeb\x4e\xaa\x47\x59\x23\x78\xa4\x41\xda\xe0\x39\xd7\x6d\xe7\x28\x40\xca\x59\xe2\x03\x29\x67\x87\x84\x73\x96\xd4\x3a\x94\xbd\x17\xca\xb5\x39\x1e\x8d\x2c\xf3\x6f\xba\xbd\x6e\x7d\x6e\x74\x49\x92\x9e\xf3\x8a\x92\xdf\x40\x21\x91\xa3\x63\x44\xbe\xbc\x80\xb8\x7f\xac\x0f\xb2\x45\x38\x9d\xf2\x56\x93\xca\x6b\xb4\xb9\xec\xf4\x3b\xe5\x8e\x5c\x70\x63\x5d\x49\xa3\x7a\x23\x83\x3b\xeb\x35\x7d\x39\xea\xd5\xda\x5e\xd7\xce\x6a\x15\xbf\x12\x9e\x71\x1e\x9e\x3b\x84\x05\x5f\xd0\x00\x3e\x50\xaf\x02\xbc\x70\x56\x91\xf8\x20\x3d\x16\xd3\xb9\x39\x53\xd2\x44\xc0\xd5\x82\x17\x77\x3f\x3e\xf9\x89\xf3\x87\xde\x2a\x48\xfd\x1a\x51\xd0\x90\xc1\xbe\xaa\x52\x05\x57\xb5\xb6\xe2\xce\xd9\x80\xc7\x90\x45\x7e\xd3\xf8\x0d\x50\xe3\xe1\x76\x07\x4a\xdc\x4b\x92\x6d\x9a\x98\xc6\x27\xd9\x66\x59\x53\x5c\x73\x36\x48\x8a\x79\x33\xd3\xc4\x96\x0d\x10\x7a\xd0\x36\xfc\xb7\xe5\x8c\x0d\xb0\xfc\x74\x34\xca\x90\xe8\x66\x03\x48\xb4\x05\x18\xf3\xe4\x2c\xe3\x9c\xe9\x07\x18\xc6\xed\x1b\xd8\xc1\x3c\x39\xb1\x0f\x4e\xa7\xa6\xf1\xd9\xff\x73\x65\x07\x56\x9b\xe8\x8f\x99\x06\x76\x93\x4a\x3a\x64\x9c\x9d\x56\x0c\xdb\x9f\x19\xe8\xcc\xb0\x5d\x33\xd0\x7b\x0c\xa3\xcc\xc5\x04\x7a\x7d\x9d\x7a\x2e\x96\x1e\x2f\xf6\xa5\xa3\x90\xaa\xcd\xe4\xfd\x28\x3e\x12\x8d\x69\x1c\x5c\xf8\x2c\x8d\xae\x30\x8b\xd4\x18\x7a\xb2\x67\xce\x2f\x23\x38\x26\xe9\xc5\x34\x27\x11\x53\x3f\xc7\x75\x49\x38\xdb\x5b\xbb\xf3\xa2\xe8\x95\x42\xef\xa3\x56\x44\x70\x76\x02\x34\x1e\xe7\xea\x27\xa9\x4d\x4f\x38\x3b\x19\xfd\xff\x62\xca\x45\x5f\xfe\x9b\xf2\x5f\x9f\x72\x4c\xfd\x4f\x4c\x39\xcf\xe1\x80\x4f\xcb\xff\x1b\x26\x27\x20\x61\xb5\xa7\xdb\xce\x60\x8b\x36\x80\x2b\xbf\xa2\x0a\xd3\xdd\x78\xd3\x97\x66\x20\x3b\xbd\x7a\x28\xa2\xea\xcc\x75\xf9\xe6\x06\x45\x37\xab\xf7\xe6\x16\x2a\x12\x07\x7c\x2a\x46\x91\x79\x33\xcd\x36\x9c\xcd\x0f\xd1\xed\x74\x17\xec\x5a\x6d\xdf\x75\x23\x24\x1e\xe1\x7b\x00\x00\x00\xff\xff\x68\xf0\x7b\xad\xb8\x05\x00\x00"

func tarsMirServantsCalculatorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirServantsCalculatorTmpl,
		"tars/mir/servants/calculator.tmpl",
	)
}

func tarsMirServantsCalculatorTmpl() (*asset, error) {
	bytes, err := tarsMirServantsCalculatorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/servants/calculator.tmpl", size: 1464, mode: os.FileMode(0644), modTime: time.Unix(1586776276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0xbf, 0x45, 0xa0, 0x56, 0x1f, 0x3a, 0x3a, 0xb6, 0x39, 0x8, 0xc2, 0xcc, 0x56, 0x30, 0x12, 0x7b, 0x15, 0x48, 0x66, 0x32, 0xa4, 0x9e, 0xb9, 0xda, 0xe4, 0x34, 0x4e, 0x85, 0xe5, 0x4, 0x65}}
	return a, nil
}

var _tarsMirServantsServantsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xc1\x4e\x03\x21\x10\x86\xcf\xcc\x53\x10\x4e\x60\x14\xee\x26\x1e\x4c\x13\x6f\xda\x26\xfa\x02\x40\x70\xc3\x16\x18\x32\x0b\xb6\x6b\xb3\xef\x6e\xba\x35\xf6\xd2\x83\xc7\x7f\xe6\x9b\x7f\xbe\x6a\xfd\xde\x0e\x81\x4f\x81\xbe\x6c\x69\x13\x40\xcc\x15\xa9\x71\x09\x4c\x0c\xb1\xb9\x3e\x69\x8f\xd9\x84\x63\xb2\xce\x7c\xc7\xfc\x90\x27\x93\xa2\x23\x4b\xb3\x49\xe8\x6d\x43\x12\xff\x40\x7b\x8b\x69\x12\x00\x4c\x9c\x4e\x5c\xef\xf6\xc3\x9b\xcd\x81\x2f\x8b\xa9\x84\x0d\xcd\x10\x8a\xf1\x36\xf9\x9e\x2e\x85\x0a\xe0\xb3\x17\xcf\x4b\x38\x6c\xfe\xc6\xcf\xb5\x4a\xc5\xef\xae\x9c\xbe\xee\xf8\x09\x98\xc7\x9c\xf9\xe3\x13\xff\xd5\xd2\xaf\xf3\x06\x73\xee\x25\xae\x51\x2a\x60\xe8\x46\x7e\x26\x56\x1b\xbd\x75\xe3\x0b\x61\x96\x62\x4f\xb3\xbe\xd9\xba\x75\xa3\x50\xc0\x6c\xad\xeb\x59\x09\x07\x79\x93\x53\x97\xe7\xfa\xbd\x51\x2c\xc3\x07\xee\x08\x8f\xb3\x44\x37\xde\x73\x5b\xab\x02\x46\xa1\x75\x2a\xe7\x00\xcb\x4f\x00\x00\x00\xff\xff\xa5\x13\x0a\x49\x73\x01\x00\x00"

func tarsMirServantsServantsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirServantsServantsTmpl,
		"tars/mir/servants/servants.tmpl",
	)
}

func tarsMirServantsServantsTmpl() (*asset, error) {
	bytes, err := tarsMirServantsServantsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/servants/servants.tmpl", size: 371, mode: os.FileMode(0644), modTime: time.Unix(1586779201, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0x45, 0x54, 0xf3, 0xdf, 0x2c, 0x76, 0x46, 0xbe, 0x59, 0x29, 0xd0, 0x63, 0xbb, 0xbe, 0x43, 0x4d, 0x81, 0x3f, 0x3e, 0xd8, 0xae, 0x1e, 0x23, 0x1c, 0x76, 0xa0, 0x5e, 0x2b, 0x11, 0x45, 0x85}}
	return a, nil
}

var _tarsMirService_confTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x51\x4e\xc3\x30\x0c\x86\x9f\xd9\x29\x72\x81\xb5\xe9\x26\x31\x1e\x12\xa4\x5d\x80\x17\xb8\x80\x95\x46\x4d\x45\x12\x9b\xd4\x1d\xa0\x69\x77\x47\x6d\xc7\x10\x9b\xba\xc6\x8f\xcd\xd7\xdf\xbf\xad\xdf\x8a\x21\x75\xcf\x2b\x71\x2e\x05\x44\xbe\x35\xc0\x2d\xc6\xbf\xaf\x97\xd7\xce\xa6\x83\x4d\xb7\x0f\xbf\x05\x44\xfa\x78\x14\xc5\x9e\xe8\x05\x82\x15\xa7\xd3\x2c\x3a\x49\x8d\xf4\x1b\xa4\xc6\xf2\x3d\xd8\xa3\x01\xaf\xd9\x90\x58\x3b\x51\x6d\x76\x85\x2c\x64\x51\x89\x35\x89\x4a\xca\xed\x4e\xac\x59\x6c\xa5\x94\x72\xf5\x30\x96\xc7\x86\x80\x9d\x2e\x39\xd0\xac\xa6\x1a\x5a\xbf\xa6\xc3\xd9\xe8\xbe\x06\xe2\x7b\xb3\x5d\x66\xf4\x1e\x3f\x17\x29\x1b\x6b\xc2\x36\xf2\xac\xe9\xa7\xc1\xf4\xe3\x68\x7a\x49\xcb\x41\xac\xbd\x6d\x12\xf6\xd3\x76\x6f\x4c\x2f\x2a\x04\xf8\x32\x18\x63\xa7\x37\x32\xab\x23\x25\x64\x34\xe8\xf5\x90\x8e\x45\xfa\xa3\xb7\xbd\x35\x40\xba\xca\x12\x1f\x71\x6e\x83\xc5\x9e\x75\xde\x06\x86\xb0\x40\xe4\xab\xe9\x97\x7f\x73\x61\xb0\x95\xa1\xef\xc2\xbb\xfd\xce\x00\xd9\x25\x0b\x75\xa7\xab\xf9\x58\x95\x99\xb9\x52\xe5\xf5\x35\xa9\xf2\xdf\xf5\xa9\x72\xba\xcd\x9f\x00\x00\x00\xff\xff\x27\x09\x8b\x7e\xa3\x03\x00\x00"

func tarsMirService_confTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirService_confTmpl,
		"tars/mir/service_conf.tmpl",
	)
}

func tarsMirService_confTmpl() (*asset, error) {
	bytes, err := tarsMirService_confTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/service_conf.tmpl", size: 931, mode: os.FileMode(0644), modTime: time.Unix(1586778626, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0x8, 0xf1, 0xab, 0xd3, 0x35, 0x38, 0x20, 0xe, 0xb6, 0xea, 0x59, 0x1a, 0xc3, 0xbc, 0xae, 0xe2, 0xb0, 0x7b, 0x7e, 0x45, 0xbe, 0x14, 0xf7, 0xad, 0x14, 0xd0, 0xd1, 0xc6, 0xcd, 0xf0, 0xf0}}
	return a, nil
}

var _tarsMirVersionVersionTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x31\x6b\xc3\x30\x10\x85\x67\xdf\xaf\x38\x04\x01\x1b\xdc\xa8\x5d\x03\x19\xda\xa5\xed\x10\x28\xb4\x64\x57\x1c\xd9\xbe\xd6\xd6\x09\x9d\x94\x0c\x21\xff\xbd\xc8\x4e\x1a\x32\x75\xf2\xf9\xf8\x9e\xde\xbd\xe7\x4d\xf3\x63\x3a\x8b\x07\x1b\x84\xd8\x01\xd0\xe8\x39\x44\x2c\xa1\x50\x1d\xc5\x3e\xed\x96\x0d\x8f\xba\xe1\x60\x59\x74\xc7\x0f\x62\xc7\x83\x0d\x7a\xfe\xa8\x7b\x4a\x28\x24\x2f\xd6\xe9\x81\xbb\x90\x44\x41\x05\x70\x30\x21\x3f\xa6\x35\xbe\x52\x7c\x33\xd2\xe3\xd6\x0c\xc9\xe2\x91\x86\x01\x77\x16\xc5\x46\xdc\xa7\x40\xae\xc3\x5d\xa2\x61\x0f\xc5\x95\x5b\xa3\x52\x93\xf0\x25\xef\xbf\x68\xb4\xff\x4a\x6f\xe4\x24\xae\x00\xb4\xc6\x67\xef\xb7\x36\xa0\xf1\x7e\xa0\xc6\x44\x62\x77\x4d\x8b\xe4\x5a\x9e\x2e\xbc\x30\x6b\x9c\x73\x2d\xb7\x33\x70\x82\x62\x63\xbe\x39\xac\xf0\xb1\x86\x62\x43\x2e\x8f\x4f\x35\x14\x1f\x26\x36\xfd\xb4\x3d\x4f\x1e\x9f\x3d\x1f\xdf\x5d\xcb\x28\x3d\x1f\xef\xac\xb2\x45\x18\xa7\x19\xda\xe4\x9a\x3f\xb4\xac\xf0\x04\xc5\xdc\xd4\x32\x2f\xda\x52\x49\x34\x21\x66\x79\x79\x29\x61\xb5\x90\x5b\xfc\xfc\x33\x1f\xba\x5a\x48\xa5\xea\x6b\xa3\xf5\x0d\xa9\x2f\x40\x05\x67\xf8\x0d\x00\x00\xff\xff\x8a\x8c\x4a\xa5\xdb\x01\x00\x00"

func tarsMirVersionVersionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsMirVersionVersionTmpl,
		"tars/mir/version/version.tmpl",
	)
}

func tarsMirVersionVersionTmpl() (*asset, error) {
	bytes, err := tarsMirVersionVersionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/mir/version/version.tmpl", size: 475, mode: os.FileMode(0644), modTime: time.Unix(1586782137, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0xf2, 0x93, 0x84, 0x46, 0xa0, 0xb2, 0x6c, 0xc0, 0x2f, 0x68, 0x49, 0xa7, 0x2b, 0xdd, 0x75, 0x87, 0x3c, 0xae, 0x56, 0xe9, 0x6f, 0xf8, 0x11, 0xf2, 0x8c, 0x64, 0xdc, 0x16, 0xd5, 0x48, 0xe7}}
	return a, nil
}

var _tarsSimpleReadmeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xb1\x0e\xc2\x30\x0c\x44\xf7\x7c\xc5\x49\x16\x62\xe3\x27\xd8\xd8\xd9\xeb\xa6\xa6\x54\x4d\x6b\x64\x3b\x7c\x3f\x6a\x08\x0b\xdb\xc9\xf7\xf4\x7c\x44\xb8\x72\xc9\xb5\x70\xa8\xa5\x5b\xf5\x00\x63\x92\x4d\xa1\x0f\x04\x9b\x63\x56\xb8\xd8\x5b\xec\x92\x12\x11\x11\xee\xce\xb3\xa4\x61\x18\x46\xf6\x67\x3a\x61\xe3\x55\xbe\x08\x08\x56\xf7\x96\x97\x2c\xbf\x2a\x97\x45\xf6\x5e\xb5\x1c\x08\xc5\x24\x63\x9d\xff\x51\x93\x22\xec\x87\xe7\xc5\x79\x85\xd6\xe8\xe2\xd0\x63\xcc\xd9\xdb\xbd\xbf\xff\x04\x00\x00\xff\xff\x2e\x02\x2d\x89\xbb\x00\x00\x00"

func tarsSimpleReadmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleReadmeTmpl,
		"tars/simple/README.tmpl",
	)
}

func tarsSimpleReadmeTmpl() (*asset, error) {
	bytes, err := tarsSimpleReadmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/README.tmpl", size: 187, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0x39, 0xa9, 0x29, 0x3f, 0x65, 0xb2, 0xc3, 0x51, 0xd6, 0x13, 0x5d, 0xe6, 0x93, 0x6d, 0x9f, 0x54, 0x37, 0x19, 0x3f, 0xe2, 0x89, 0xa, 0x42, 0xf6, 0xfb, 0x79, 0xe6, 0x31, 0x62, 0x50, 0x37}}
	return a, nil
}

var _tarsSimpleGitignoreTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x8e\x51\x6a\xc3\x30\x10\x44\xff\xf7\x14\x03\xf9\x13\xa9\x72\x87\xd2\x52\x0a\x85\xfe\xe4\x00\x91\xed\xb5\xbc\x65\xe3\x35\xd2\xaa\xa9\x09\xe9\xd9\x83\x93\x9f\xe1\xc1\x0c\x8f\xd9\xe1\x55\xe6\x54\x84\x2b\x46\x2b\x58\x8a\xe5\x92\xce\x15\x69\x1e\xb0\x68\xcb\x32\x57\x0a\x91\xff\xf8\x99\xff\x14\xe2\xa0\x4a\x21\x56\xdb\x70\x55\xe9\x88\x76\x38\x72\x75\x74\x9b\x69\xdd\xa3\x6b\xa2\x8e\x8b\xf8\x84\x53\x36\xf8\xd6\xbd\xf4\x27\x0a\x71\xc3\x6d\xfe\xdd\x7c\x69\x0e\x1b\xe1\x13\x23\x1b\x7a\xfb\xe5\x92\x32\xc3\xcd\x74\x8f\xba\x70\x2f\xa3\xf4\x49\x75\xc5\x65\xe2\x19\xad\xf2\xf0\x54\x7e\x89\xf3\xe7\xdb\x3b\x85\x68\xed\x21\xfb\x30\x7d\xbc\x2d\xf6\xc3\xbd\x63\x14\xe5\x4a\x51\x06\x4e\x07\x0a\x51\xce\x4a\x74\xb8\x5e\x11\x8f\xa9\x64\x76\xdc\x6e\xf7\x00\x00\x00\xff\xff\xc7\xa8\xb8\xb9\xf4\x00\x00\x00"

func tarsSimpleGitignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleGitignoreTmpl,
		"tars/simple/gitignore.tmpl",
	)
}

func tarsSimpleGitignoreTmpl() (*asset, error) {
	bytes, err := tarsSimpleGitignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/gitignore.tmpl", size: 244, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0x28, 0xe9, 0x3d, 0xdd, 0xfa, 0xf4, 0xa3, 0x5a, 0x75, 0x88, 0x7e, 0x55, 0xc3, 0xe8, 0x5a, 0xeb, 0xbe, 0x81, 0x37, 0xa5, 0x2c, 0xe8, 0x60, 0x66, 0x3, 0x51, 0x6f, 0xf0, 0x48, 0x2, 0xd1}}
	return a, nil
}

var _tarsSimpleGo_modTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xce\xb1\x0a\xc2\x30\x10\x06\xe0\xd9\x7b\x8a\x1b\x75\xe8\xa5\xd1\x59\x17\x07\x37\x71\xf0\x05\x92\xf6\x88\xc1\x84\xd3\xc4\x14\xb5\xf4\xdd\xa5\x55\xc1\x4d\xb8\xe1\xf8\xf9\x7e\xf8\xa3\xb4\x25\x30\xf6\x3d\xd2\xe1\xec\xf6\x26\x32\x0e\x03\x80\x13\xd4\xa4\x97\x00\x89\xaf\xc5\x27\xc6\x39\xcc\x9c\xbf\x9d\x8a\xa5\x46\xa2\x3a\x9a\x94\xb7\x41\x4a\x3b\x7d\x3b\xc1\x4e\x93\x26\x0d\x88\x88\x3f\xac\x91\xc4\x92\x95\x93\x2a\x73\xec\x38\x61\x57\xd3\x8a\xea\x2f\xb3\x25\x4f\x8c\xef\xc1\x58\xf5\xf4\xb1\x8a\x59\x05\x6f\x93\x49\x8f\x91\xd6\xa4\x61\x31\x4e\xb8\x04\xd3\xf0\xdf\xc6\x7a\x83\x44\xea\x7d\x9f\x0c\x5e\x01\x00\x00\xff\xff\x0d\x37\xe4\x97\xdf\x00\x00\x00"

func tarsSimpleGo_modTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleGo_modTmpl,
		"tars/simple/go_mod.tmpl",
	)
}

func tarsSimpleGo_modTmpl() (*asset, error) {
	bytes, err := tarsSimpleGo_modTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/go_mod.tmpl", size: 223, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0xf5, 0x96, 0x2b, 0xfb, 0xcc, 0x86, 0xe9, 0xc, 0x85, 0x3a, 0xed, 0xfd, 0xd1, 0xec, 0xec, 0xf0, 0xc3, 0x60, 0x76, 0x34, 0x92, 0x9d, 0xfb, 0xff, 0xeb, 0x93, 0x17, 0xa, 0x12, 0xd0, 0x44}}
	return a, nil
}

var _tarsSimpleInternalClientClientTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xcf\x8e\xd3\x30\x10\x87\xcf\xf6\x53\x0c\x96\x16\x25\x52\xea\xa4\x8b\x04\xa8\x52\x57\x82\x4a\xdc\x80\x95\x16\x89\x03\x70\x70\x9d\x69\xd6\x6d\xfc\xa7\x63\xa7\x9b\xa5\xea\xbb\x23\xa7\x85\x0a\xae\x1c\x22\x4f\x94\xcc\xef\xfb\x3c\x13\x94\xde\xa9\x0e\xc1\x2a\xe3\x38\x37\x36\x78\x4a\x50\x70\x26\xb4\x77\x09\xc7\x24\x38\x13\x1b\x9b\x04\xe7\x4c\x74\x26\xad\x87\x28\xb5\xb7\x35\x8e\xbd\x5a\xd7\x3f\x8d\x9d\xd9\x58\xab\x10\xea\x88\x74\x30\x1a\xeb\x88\x31\x1a\xef\xe2\xcc\x2a\xa7\x3a\xac\x8d\x4b\x48\x4e\xf5\x75\xef\xb5\x4a\x9e\xc4\xff\xe6\x0c\xc9\xf4\x71\xd2\x39\x1e\x41\xde\xef\xba\x4f\xca\x22\x9c\x4e\x75\x20\x9f\x7c\xdd\xa1\xab\xb5\xea\xf5\xd0\x9f\x69\x25\xe7\x9b\xc1\xe9\xe9\x7e\x45\x09\x47\xce\xb4\xb7\x16\x16\x4b\xb8\x08\xc9\x8f\xcf\x2b\x6f\xed\xe0\xcc\xf4\x5a\x94\x9c\xf9\xf5\x36\xff\x30\x91\xe4\xe7\xf5\xf6\x03\x79\x5b\x4c\xb8\x07\x3a\x5c\x70\xa2\x02\x91\x74\x80\xd9\x23\xcc\x6f\xdf\xc8\x46\x36\x72\x0e\xb3\x00\xf3\xa6\xb9\x7d\x0b\xb3\x04\xaf\x9b\xa6\x69\x44\xc9\x99\x0a\x21\xa7\x39\x7c\x2a\xae\x62\x72\xf5\xa7\x2c\xcf\x4a\xf2\x21\x91\x71\xdd\x17\x7f\x4f\x7e\x7c\x2e\xfc\x7a\x5b\x81\x0a\xa1\xe4\x9c\x1d\x14\x01\x61\x04\xe3\xd2\xab\x5b\xce\x74\x8e\xbb\xac\x47\xbe\x57\x7a\xd7\x91\x1f\x5c\x9b\xcd\x69\x3f\xe6\x8f\x56\x85\x6f\x71\x8a\xfb\x71\x3e\x8e\x9c\x31\xd1\xa2\xf5\x62\x01\x22\xd1\x80\xa2\xe2\xec\xc4\x39\xdb\xd8\x24\xef\xc9\xb8\xb4\x29\x04\xe1\x1e\x63\x5a\xde\x81\x6a\x5b\x98\x37\xa0\xdc\x74\xc0\x93\x49\x8f\x40\xb8\x5f\xa5\x71\x71\x73\xf8\xee\x44\x05\xb4\x1f\x33\x0d\x53\x05\x48\x94\x91\x2a\x04\xf9\xae\x6d\xbf\x9a\xf4\xb8\x3a\xab\x15\xba\x82\x79\x73\x7e\x5e\x12\xc6\xdf\x5d\x66\x33\xf5\xbc\x58\x82\x33\x7d\x5e\xc8\x55\xa2\x77\x05\x52\x1e\x48\x8e\x1e\xc8\x65\xc7\x7f\x14\x63\xf0\x2e\xe2\xf2\x0e\x08\xd3\xe2\xa6\xcd\x73\x19\xfa\x4b\xf5\x97\x61\x76\xbb\x52\x4f\xfc\x57\x00\x00\x00\xff\xff\xd6\x29\x32\xef\xe9\x02\x00\x00"

func tarsSimpleInternalClientClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleInternalClientClientTmpl,
		"tars/simple/internal/client/client.tmpl",
	)
}

func tarsSimpleInternalClientClientTmpl() (*asset, error) {
	bytes, err := tarsSimpleInternalClientClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/internal/client/client.tmpl", size: 745, mode: os.FileMode(0644), modTime: time.Unix(1586778626, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0x1b, 0xad, 0xb7, 0xf6, 0xbc, 0xc5, 0x2d, 0x9c, 0xc9, 0x8e, 0x18, 0x11, 0x1b, 0x69, 0x2f, 0x64, 0x4f, 0x21, 0x88, 0x8e, 0x70, 0xb0, 0xcb, 0xa4, 0xc1, 0xf5, 0x9b, 0x55, 0xc9, 0xcb, 0x5}}
	return a, nil
}

var _tarsSimpleInternalInternalTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\xcc\x2b\x49\x2d\xca\x4b\xcc\xe1\x02\x04\x00\x00\xff\xff\xea\xb7\x79\x06\x11\x00\x00\x00"

func tarsSimpleInternalInternalTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleInternalInternalTmpl,
		"tars/simple/internal/internal.tmpl",
	)
}

func tarsSimpleInternalInternalTmpl() (*asset, error) {
	bytes, err := tarsSimpleInternalInternalTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/internal/internal.tmpl", size: 17, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0xc8, 0xf2, 0xa7, 0x61, 0xa7, 0xd3, 0xe3, 0x72, 0xd6, 0xef, 0xe2, 0xd1, 0x6f, 0x9b, 0xed, 0x6d, 0xd5, 0xe1, 0xa6, 0xcb, 0x17, 0x5e, 0x39, 0x9b, 0xa7, 0x4e, 0x8a, 0x8f, 0xbb, 0xac, 0x1e}}
	return a, nil
}

var _tarsSimpleMainTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x4f\x6b\xe3\x30\x10\xc5\xcf\xd6\xa7\x10\x3e\xc9\x64\x57\xba\x2f\xec\x21\x78\x21\x2c\x94\xb4\xd4\x85\x1e\x8b\x64\x8f\x15\x25\xb6\xc6\xe8\x8f\x93\x36\xe4\xbb\x17\xc9\x69\x73\x09\xf4\x36\xd2\xfb\x3d\xe6\xcd\x9b\x64\x7b\x90\x1a\xe8\x28\x8d\x25\xc4\x8c\x13\xba\x40\x19\x29\x4a\x6d\xc2\x2e\x2a\xde\xe2\x28\x5e\xa4\xf3\xf5\x80\xb1\xcb\xd3\x06\x45\x90\xce\x97\x0b\xa3\xa2\xcf\x0c\x9c\x06\xa9\xc4\x87\x19\x7f\x8f\x5e\x0c\x46\x39\xe9\xde\xc5\x80\x3a\x66\xf0\x7c\xa6\xfc\xe9\xa0\xb7\x72\x04\x7a\xb9\x88\xc9\x61\x40\xa1\xc1\x8a\x56\x0e\x6d\x1c\x64\x40\x77\x07\x9b\xc1\x79\x83\xf6\x8e\xe2\xc1\xcd\xd2\x06\x5f\x12\x52\xbc\xd1\x1f\x73\x74\xa0\xa2\x2e\x49\x45\x48\x1f\x6d\x4b\x8d\x35\x81\x55\xf4\x4c\x8a\x1c\x90\x37\x10\x1e\x60\x86\x81\x2d\xcf\x3c\xff\x4b\x96\x8a\x5c\xae\x96\x54\xcf\x62\xb9\x86\xe2\xcd\x0e\x8f\xff\x6d\x8f\xac\x22\xa4\x90\xd3\x44\xff\xfc\xa5\x16\x8e\xec\x76\x11\xaf\xbf\xc7\x8a\x14\xde\xcd\x09\xf9\x4a\xce\xb7\x70\xbc\xe9\xac\x22\x45\xdb\xeb\x04\xa4\x6e\xf9\x06\x42\x03\x6e\x06\x57\xa3\xed\x8d\x4e\x32\xaa\x7d\x92\xdb\x5e\xf3\xf5\x34\xd1\x15\x2d\x79\x49\x57\xf9\xbd\xa0\xf9\x2b\xf5\xf4\xa8\xf6\xd7\x9e\xca\x9c\x8c\xaf\xbb\xae\x59\xd6\xbe\x9a\xb0\xab\xd1\x06\x38\x05\xe6\xdd\xfc\x8b\xa2\xda\x57\xa4\xc8\x3b\x9f\xa3\x65\xe9\xe0\xcf\x00\x00\x00\xff\xff\x28\xbe\x4e\xa1\x12\x02\x00\x00"

func tarsSimpleMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleMainTmpl,
		"tars/simple/main.tmpl",
	)
}

func tarsSimpleMainTmpl() (*asset, error) {
	bytes, err := tarsSimpleMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/main.tmpl", size: 530, mode: os.FileMode(0644), modTime: time.Unix(1586778626, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0xae, 0xb, 0xf, 0x6c, 0xc3, 0xb8, 0x41, 0xae, 0xbd, 0xae, 0xa3, 0xa0, 0x62, 0x4b, 0xc0, 0x91, 0x71, 0xa4, 0x5e, 0x94, 0xb2, 0x44, 0x32, 0x0, 0x42, 0xb6, 0xfc, 0x6, 0x8b, 0xf4, 0xcb}}
	return a, nil
}

var _tarsSimpleMakefileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x7b\x6f\x9b\xc8\x16\xff\x9b\xf9\x14\xe7\xba\xb6\x6c\xd2\x0c\xbe\x8d\xae\xae\x56\x44\xec\x96\x38\x04\xa7\x4b\x8c\x65\xbb\xd5\x76\xdb\xca\x22\x30\xe0\x51\x80\x61\x87\xb1\xf3\x6a\xbe\xfb\x6a\x06\xfc\xdc\x24\xed\x56\x71\x51\x14\xc3\x79\xcd\xef\x77\xce\x99\x39\xd0\xec\x90\x45\x90\x02\xa6\x79\x98\xce\x23\x02\x86\xd1\xad\xfe\x2e\xe7\x34\x8d\xba\x59\x70\x45\x62\x9a\x12\x43\x04\xbc\xd4\xd1\xc4\x1e\x8d\xa7\x23\xc7\x73\xec\xb1\x33\x1d\xda\x93\x3e\x98\x16\x34\x3b\x5b\xe2\x91\xef\x4f\xf4\xee\xfd\x3d\x18\xbd\x40\x90\x84\xf1\x5b\x78\x78\x50\xcf\xc3\x20\xbc\x22\x62\x10\x64\x04\x1e\x1e\x10\xb2\x87\x43\xa8\x2e\xd3\x02\xa9\xb7\x8b\x62\xa9\x9c\xd8\x23\xd7\x99\x6c\xe8\x26\x01\x4f\x88\x90\xaa\x8b\x33\xcf\x76\xc7\x95\x0a\x9d\x6e\x3e\xf4\xfc\xc1\xd9\xb9\x5b\x3b\x95\x84\x2f\x68\x48\x8c\x90\xe5\x31\x1a\x4f\x46\xe7\xc3\xa9\xb4\x35\x2d\x18\xa0\x57\xf8\x65\x2f\xf4\x2a\xa6\x37\x10\x26\x0c\x42\x96\x15\x34\x25\x40\x38\x67\x1c\x91\x9b\x82\x71\x01\x5e\x6f\x6a\x7b\x1e\x00\x58\x40\xf2\xe9\xfb\xb1\xf1\x7e\x72\x86\x7f\x59\x69\xed\x81\xc2\xbc\xa3\x7d\x71\x8c\xae\xaf\x0a\xf6\x9b\x2c\x58\x39\x23\x69\x0a\x09\x03\x92\x2f\xa0\x52\xe8\xc8\xf5\x65\xe9\x1e\x35\x50\x35\x45\xae\x7f\x76\xa1\xf4\x09\x8b\x33\x01\xb8\x04\x7c\x8d\x5c\x1f\x6a\xf4\xcd\xfb\xca\xf0\xa1\x7b\x49\xf3\x6e\xc2\xd0\x44\x96\xc6\x82\xa2\xe0\x2c\x46\x5e\x5d\xaa\xd7\x16\xe0\x3f\xa0\xa1\xfa\xe1\x2a\xa9\xeb\xdd\x5d\x10\x5e\x52\x96\x1b\x27\xb2\xeb\x26\x34\x23\xd6\x12\x43\x14\x08\x02\x78\x0e\xed\xd7\xad\x8f\xb8\x95\xe1\x56\x04\xad\x73\xb3\x75\x61\xb6\xc6\xd0\xfa\xb3\xad\x37\xbe\x33\xb2\x4b\x45\x3f\x28\x67\xab\xb8\x09\x15\xc0\xc9\x02\x17\x01\x2f\x09\xf4\x1d\xfb\x54\x6f\xbc\x7c\xd2\x53\x7a\x59\x04\x62\x66\x35\xef\xcb\xf9\x65\x29\xc0\x3c\x84\xc3\x66\xa7\xce\xb8\x6a\xf3\xf1\x51\x9d\x41\xb5\x93\x62\xca\x4b\x71\xcd\x78\x24\x6b\xb0\xf2\x78\xa2\x62\xba\xae\x32\x2d\xb7\xe6\x51\xc2\xd0\xbb\x23\xd7\x57\x3d\x5e\x05\xc3\x6c\x2e\x22\xca\xad\x82\x33\xc1\xba\x09\xc9\x5f\x9e\x9d\xda\xf7\xe3\x51\x6f\x8d\xff\x9a\xa6\x51\x18\xf0\x08\xaa\x55\x0f\xea\x73\xc3\xf5\x57\x66\x3b\x76\x07\x46\xc2\x54\x67\x9d\x7b\xce\xb8\xd2\x55\x54\x63\x9a\x47\x60\x00\xce\x65\x1d\x1b\xd2\xac\x01\x58\xdc\x16\x04\x62\xfd\xc5\x99\x48\x32\x21\x2b\x6e\xe5\x51\x07\x16\xd0\x18\x04\x29\x05\xe0\x3b\x68\x34\x3b\xf6\x70\xa8\x37\xe0\xeb\xd7\x4d\x59\x75\x3e\xe9\x8d\x63\x10\x33\x92\xc3\x67\x04\xdb\x17\x09\x67\x0c\x1a\x9f\xda\xf6\x70\xd8\x06\xc6\xa1\x5d\x39\xb4\x81\x15\x82\xb2\x1c\x68\x09\x24\x2b\xc4\xad\xf1\xa5\x71\x0c\xe4\x86\x0a\x78\x73\xbc\x1d\x45\x23\x69\x49\xe0\x33\xd2\xb4\xa5\x60\x89\xea\x3f\x80\x65\x7b\x1c\xe9\x4f\x2c\xae\x69\xf5\xea\x03\x06\xe5\x3c\x9c\x41\x44\xb9\x29\xed\x0f\x21\x67\xd7\x70\x4d\x20\xe4\x44\xee\x2a\x2a\xe4\xf2\x95\xbb\xa6\x69\x5a\x76\x15\x51\x0e\xb8\xa8\x82\xcb\xa5\x35\x2d\xa6\x5b\xb8\x56\xb1\x7b\xac\xb8\x05\x95\xae\x66\xe7\x8d\x0e\xf8\x57\xe5\x24\xd9\x6c\x59\x87\x05\xe0\x45\x65\x52\x21\x56\x51\x63\x7a\x8c\x90\xed\x79\x26\xac\x32\xb9\x97\x92\xae\xa2\x9b\x90\x90\x1c\xcb\x5e\x04\xb9\xfb\x64\x33\xea\x48\x93\xb7\x3a\xa8\x41\x07\x38\x8d\xe2\x34\x48\x4a\x68\x37\x3b\xf5\x81\xa2\xb7\x2b\xe3\x93\xf7\xe7\xde\xa9\xda\x58\x3a\x60\x06\xcd\xb7\x7b\xc1\xaa\x4e\xc9\x1f\xc5\x89\x45\x2d\x9a\x3c\x83\x7b\xaf\xa9\x96\xe3\x96\x3c\x07\x9f\xcf\xf3\xef\x4d\x72\x16\xd0\xdc\x48\x18\x60\x2c\x87\x37\x4d\xac\x66\xa7\x1a\xed\x7b\x84\x8e\xbf\x99\xff\xa7\x09\x7c\x33\xfb\x3f\x99\x50\x98\x52\x92\x8b\x1f\xe3\x42\x73\x41\x78\x1e\xa4\xdd\x2a\x48\xfd\xf3\x13\xc1\x1b\xc3\xbe\x3f\xf8\xb8\x06\x8f\x96\x37\xe6\xf2\x45\x73\x49\xa4\x1e\x9e\xf2\x64\x59\x8d\x3e\x7d\xcb\x68\x9f\xf8\x52\x9a\xcf\x6f\x70\x90\x45\xff\xff\x1f\xda\xb8\x7f\x3c\xeb\x3d\xd7\x9f\x3a\x03\xfb\xc4\x73\x4e\xad\xff\x82\xeb\xfb\x63\x4b\xf9\x80\xeb\xdb\xa3\x5e\xdf\x52\xae\xf0\x83\xe7\xd1\x5e\xf7\xf5\x92\x2e\x27\x29\x09\x4a\x82\xea\xdf\x2d\xfe\xb0\xee\x08\xed\x2d\x8d\xe1\x53\x35\xa0\x6a\x58\x53\x91\x15\x53\x39\x58\xbe\xac\xe6\xd5\x72\x8a\x48\xe9\x2c\x28\xe5\x00\x2c\x85\xf9\x0f\x8f\x43\x08\x2e\x19\x17\x46\xa3\x1a\x1b\xeb\x31\xb9\x9e\x8d\x1b\x23\x6b\xc7\xb9\xbb\x92\xec\x7e\xa0\xa8\x77\x27\x35\xde\xe4\x74\xe2\x31\x6c\x5a\xd6\x44\x9e\x8b\xd7\xad\xe0\x84\x8f\x70\x3c\x06\x11\x70\xc0\x98\xdc\xa8\xaf\x29\xab\x61\x94\x8b\xbc\xb1\x29\x98\x56\x82\xf0\x6e\xb1\xb1\xae\x21\x92\x3b\xd8\x8c\x1f\x46\x80\xab\x55\xb2\xc5\x73\x50\xd6\x8e\xbb\xf4\x94\x33\xcf\xb6\xf9\xad\x61\xae\x6b\x20\x01\x87\x8b\xf8\x6e\x07\x8d\x61\xd4\x69\x8f\x29\x42\x34\xce\xc9\x5f\xd0\xd9\xd8\x5a\x87\x3a\x42\x63\x67\xf4\xc1\x19\x4d\x07\xf6\x85\xb3\xfa\x0c\x54\x7d\x88\x48\x1e\xd1\x78\xaf\xed\x28\x5f\x84\x90\xfc\x67\x42\x9c\x09\xa4\x25\xac\x7a\x37\x92\x9f\xae\xc6\x5e\x57\x96\xcb\xc5\x99\x30\xab\xa3\xf4\xec\x42\x75\x4d\xfd\xfe\xba\xaf\xe3\x9c\x04\xb9\x89\x54\x35\x55\xd7\x9c\x3a\x43\x67\x70\x3a\x55\xc5\xf0\x4f\xde\x49\x00\xe7\x83\x0f\xfe\xef\xce\xf4\x11\x8d\xe7\xf7\x6c\x6f\xf9\xb0\xb5\x23\x5c\x67\x32\xd6\xab\x70\x53\x09\x5f\x87\xe6\x7d\xcf\x73\xec\x81\x7c\x78\x00\xe3\xc0\x88\x0c\x91\x15\x90\x64\x2c\x37\xd8\x5c\xec\x8f\x5c\x90\xa6\x4f\xf1\xeb\xeb\x3b\x82\xde\x70\xb8\x2b\x7a\x8c\x69\xbf\xe7\x54\xbe\xf2\xa6\xf6\xf9\x37\xec\x0f\x0c\xb6\xce\x80\xbc\x59\xa7\xe1\xef\x00\x00\x00\xff\xff\x45\xf7\xdb\xb4\x33\x11\x00\x00"

func tarsSimpleMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleMakefileTmpl,
		"tars/simple/makefile.tmpl",
	)
}

func tarsSimpleMakefileTmpl() (*asset, error) {
	bytes, err := tarsSimpleMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/makefile.tmpl", size: 4403, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0xa3, 0x86, 0xe8, 0x11, 0x79, 0xd3, 0xa7, 0x48, 0xa1, 0xb7, 0x5f, 0x5e, 0x6e, 0xcd, 0x1b, 0x91, 0xe1, 0x71, 0xa, 0xa8, 0x22, 0x16, 0x71, 0xbe, 0x98, 0xd, 0xcf, 0x9, 0x5c, 0xab, 0xd1}}
	return a, nil
}

var _tarsSimpleProtoCalculator_tarsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x3d\x0a\x02\x41\x0c\xc5\xf1\x7e\x4e\xf1\x4a\x85\x85\x3d\xc0\x54\xe2\x11\xf6\x04\xf3\x11\xd9\x81\xd9\x09\x64\x13\x2c\x64\xef\x2e\xb1\x10\x11\x34\xcd\x2b\x7e\xe1\xbf\x71\xb5\x4e\x28\xa9\x17\xeb\x49\x59\x1e\x01\x00\xda\x50\x92\x5b\x2a\x84\xeb\x97\xf8\xcd\x33\x2e\xb5\x22\xd5\x0a\xbd\x33\x86\x6d\x99\xe4\xad\x6d\xa8\xf3\xc9\xb7\xaf\x93\x8f\xac\x13\x9b\xbe\x44\x68\x3f\xc7\xf0\x99\x5a\x2c\x63\xb7\xac\x92\x8a\x36\x1e\xbf\x92\x8b\xe5\xbf\x49\xff\x3b\x62\x38\x62\x78\x06\x00\x00\xff\xff\x06\xc9\x90\xb6\xd4\x00\x00\x00"

func tarsSimpleProtoCalculator_tarsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleProtoCalculator_tarsTmpl,
		"tars/simple/proto/calculator_tars.tmpl",
	)
}

func tarsSimpleProtoCalculator_tarsTmpl() (*asset, error) {
	bytes, err := tarsSimpleProtoCalculator_tarsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/proto/calculator_tars.tmpl", size: 212, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0x4f, 0x74, 0xda, 0xab, 0x9a, 0xf9, 0x2e, 0x5, 0x85, 0x6, 0x4e, 0x29, 0x5e, 0x16, 0xb7, 0xd7, 0xe6, 0x6a, 0x9a, 0xb4, 0x4e, 0xb9, 0xb4, 0x13, 0x73, 0x71, 0xe1, 0x13, 0xc7, 0x37, 0xc8}}
	return a, nil
}

var _tarsSimpleProtoGenCalculatorCalculator_ifTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6e\xdb\x3a\x12\xbe\x16\x9f\x62\xd6\x17\x81\x14\x08\x72\x92\x2e\x16\x0b\x03\xbe\x68\x73\x76\xbb\x01\x7a\x0e\x0e\xe2\x60\xcf\x45\x51\x18\xb2\x34\xb2\x58\x4b\xa2\x4a\x52\x4e\x8c\x22\xef\xbe\x18\x52\xbf\x49\x14\x3b\xed\xa2\x3f\xa8\x03\x14\x91\x48\xce\x37\xc3\xe1\xcc\xa7\xe1\x34\xd3\xe9\x9f\x61\xb4\x09\xd7\x08\x97\x61\x16\x55\x59\xa8\x85\x84\x48\xe4\x39\x16\x9a\x4d\xa7\x70\x93\x72\x05\x09\xcf\x10\x6e\x43\x05\x6b\x2c\x50\x86\x1a\x63\x58\xed\x40\x87\x52\x5d\xac\x05\x9c\x07\xe7\xb4\xf2\x6d\x3b\x97\x48\x91\x43\xd4\xc2\x05\xb4\x90\x95\x8f\xd4\x30\xc6\xf3\x52\x48\x0d\x2e\x73\x26\x91\x28\x34\xde\xe9\x09\x73\x26\x49\x6e\x7e\xad\xb9\x4e\xab\x55\x10\x89\x7c\x7a\x13\x4a\x75\x99\x89\x2a\x36\x4f\x6f\xc5\x94\x10\x27\xcc\xc9\x61\xef\xaa\x69\x2e\x62\xcc\x0e\xc1\x9b\x96\x52\x68\x11\x89\x6c\x1a\x89\x18\xa3\x97\x89\x48\x54\x53\x89\x9f\x2a\x54\x3a\x39\x48\xb2\xd2\x3c\x9b\x46\x95\x94\x58\x1c\xb4\x5b\x2b\xa0\x85\xc8\xd4\x84\x79\x8c\x4d\xa7\xbd\xf3\x52\x5a\x56\x91\x66\x7a\x57\x0e\x8e\xd1\x0e\xc3\x67\xe6\x28\xc8\x83\x05\xca\x6d\x58\x68\x76\x4f\xc2\xaf\xe3\x18\xb8\x02\x9d\x22\x94\x52\xdc\xed\x20\xa9\x8a\x48\x73\x51\x40\x22\xa4\x19\xce\x51\xa7\x22\x86\x18\x13\x5e\x60\x0c\xbc\x30\xa3\x64\x8a\x09\x07\x1f\x6e\xb9\x4e\xcd\x58\x7d\x74\x8c\x20\xc0\x5d\x8a\xd5\x47\x38\xed\xac\xf0\xe0\x75\x1c\xbb\xef\x52\xe0\x85\x7e\x75\xe1\xc3\x75\xf7\x84\x0a\x4e\xeb\xe7\xa5\x28\x35\x04\x41\x90\x87\xe5\x7b\xa5\x25\x2f\xd6\x1f\xec\x2f\x0f\x5c\x89\xba\x11\x41\x29\xe9\x1f\xa1\x7e\x66\xcc\xd9\x86\x12\x32\x2c\xd6\xba\xc6\xb4\x23\x69\xb8\x45\x58\x09\x91\xd9\x57\xbd\x83\xd5\x4e\x23\x73\x96\x42\xc1\x6c\x0e\xe6\x74\x83\x3f\xf0\xf6\x4d\x95\x24\x28\x5d\x8f\x39\x04\x3b\x87\xa5\x50\xc1\x5f\x92\x6b\x5c\x1a\x30\xf7\x5d\xea\xc3\xb9\xc7\x1c\x9e\x18\xbd\x7f\x9b\x43\xc1\x33\xf2\xa6\x23\x51\x57\xb2\x00\x89\xda\x98\xc4\x9c\x7b\x36\x06\x72\x9d\xfa\x70\x71\x38\x08\x19\xbc\x54\x3a\xd4\x95\x82\x47\xbe\xa8\xa7\x6b\x7f\x3f\x35\xcf\x13\xf2\x87\x4b\xde\xf4\x60\x3e\x87\x73\xa3\xa9\x95\x98\x1b\x3f\xbf\x3f\xfb\xc0\x9c\x7b\xc0\x4c\x21\x3c\x14\xb8\x18\x15\x70\x1a\xb3\xea\xb1\x73\x02\x61\xce\x52\xa2\x2a\xc9\xad\x05\xde\xba\x4d\x06\x04\xd7\xa8\x4a\x51\x28\x24\x6e\x41\xed\x31\x27\xd2\x77\xd6\xf7\x06\x37\x78\x13\x46\x9b\xb5\x14\x55\x11\xf7\xdd\xbf\xfa\x18\xa8\x80\x62\x7e\xc9\x8b\xad\xd8\xa0\x1b\xe9\x3b\x1f\xce\x7c\x98\xbc\x8e\xe3\x89\x6f\x7c\x7b\x23\xde\xec\x34\x2a\xd7\xf3\x1b\x3f\xf9\xad\x47\x7c\x30\xd6\x1c\xea\x6d\x67\xc9\x87\x01\x71\x8d\x61\x8c\xd2\x35\x49\x16\x5c\x15\xfa\x9f\x56\x99\x6b\x50\x83\x85\x8d\x17\xaf\x33\x98\xab\x80\x44\xea\x93\x3e\x31\xd8\x67\x3e\x68\x59\xe1\x8b\xc3\xe6\x01\x96\x7b\x7a\x8d\xca\xf3\xe1\xd5\x4b\xe1\xac\x17\x51\xff\x1e\x96\x6e\x7b\xb2\xb5\x63\x06\x9e\xb2\xce\xf3\x98\xb3\x84\x79\x9d\x44\xf6\x99\xd2\xc7\x3e\xe9\x1d\x1b\x28\x29\x78\xd6\xb2\xc7\x5f\x5c\xa7\x97\x75\x94\x7c\x43\x22\xe9\xa9\xa5\xe8\x68\x03\xea\xb2\xd9\xd7\x91\x68\x7e\x6d\xa2\x39\x72\xc9\x4f\xc6\x25\x8b\x6a\xf5\xcd\x08\x64\x51\xad\x8e\x95\xc8\x2f\x4e\x10\x5f\x59\x89\x2c\xaa\xd5\x91\x3d\x7e\x28\xf6\xf8\x1e\x95\xc8\x50\xed\xb1\x12\x39\x12\xcd\x97\x54\x22\x47\x2e\xf9\xb1\xb8\x04\x75\xdd\x23\x01\x85\x5a\x81\xaa\x5f\x1a\xfa\xa0\x77\x1e\x61\x30\xce\x0a\x2d\x80\xdb\x6b\xb8\x50\xde\xd6\x1b\x80\x39\x28\xab\x8b\xe2\x61\x81\xfa\x86\xe7\x28\xaa\x5a\x9f\x21\xa3\x7a\xa0\xaf\x93\x6c\xb8\x4d\x79\x94\x12\xbd\xf1\x02\x72\x35\x6e\xc2\x10\xd7\x35\x2c\xd2\x33\x20\x78\x38\xef\x0d\xcc\xf9\x4f\xa8\xd2\x4b\x11\x63\x67\x4f\x1a\xaa\xd4\x84\x92\xb1\x28\xca\x38\x16\x1a\xa2\x30\xcb\x78\xb1\x6e\x0d\x44\x09\x7e\x67\x21\x2d\xfc\x1d\x95\x0a\xd7\x3d\xf1\xbd\x16\x37\xaa\x5d\xa3\x8c\x17\xfa\x1f\x7f\xf7\x6c\xe7\x6a\xd6\x26\x91\x7b\x4a\x5c\xdd\xf8\xf5\x4f\x22\x79\x8f\x39\xed\xa6\x06\x10\xb4\xb1\x31\x95\x4d\x20\x91\x1a\x1f\x24\x71\xf2\x48\x1a\xfb\x40\xd4\xfe\x88\x75\x7c\x50\xfa\x09\xb2\x32\x06\x13\xbd\x74\x3c\x44\xce\xd8\xf8\xb0\xa4\x5d\xc8\xb0\x58\xa3\x01\xa4\x19\x27\xc6\x0c\x75\xcd\x06\x1b\x8f\x39\x94\xbb\xcd\xfa\x6d\xb7\x5e\xa2\x6a\xbe\x29\x56\x2e\xd2\x77\xef\x37\x1f\x60\x0e\x5b\x2b\xd3\xa3\xb5\x8e\xce\xbe\x81\xde\x27\x74\x90\x57\xfa\x3a\x94\x56\x7b\x75\x2c\x2c\xc5\x1a\x31\xa5\xd5\x70\x6b\x6d\xbb\xa1\x49\xcc\x30\x8e\xbb\xc4\x3c\x3c\x33\x3b\x04\x97\xe7\x25\x2c\x79\x5e\x76\xd3\x3e\xd0\xfa\xde\x11\x9a\x28\xeb\x89\x10\x9e\x0f\x3c\x2f\xcd\x4a\xef\x65\x46\xd9\xa2\xa2\xa9\x0e\x0e\xb0\xb0\x5f\x58\x3c\x36\xb6\x37\xbb\xcf\xee\x3e\xd0\x13\x5b\x30\xdd\xe2\x21\x38\x25\x04\xca\x24\x8c\x90\xe0\xf6\xf7\x6d\xc7\x2a\x15\xe6\xec\xbf\x69\x8d\xca\xde\x3f\x65\xd9\xa0\xc8\x7b\x68\xe4\x17\x94\x5f\xcf\x5b\xfe\xff\x04\xbc\x67\xf6\xcc\x47\x0d\x5d\x6e\xc3\xac\xdb\xd3\xe7\x7b\x53\x11\xc0\xa9\xfd\x7e\xdb\xaf\xb3\x4f\x5f\xd2\x66\xc8\x7e\xcf\x6d\xb1\xda\xb8\x84\x4a\x3f\x0f\xdc\x41\xad\xf8\xc2\x52\x91\x5e\xde\xb5\x2b\x9f\xfe\x7e\x9b\xf2\x70\xff\xb7\xbb\xa9\x44\x08\xf2\x7a\x0f\xa4\x29\x16\x5f\x08\x89\xaa\xc1\xe4\xc9\xc0\x0d\xf3\x39\x24\x21\x91\xa1\xa9\xe8\x28\x79\xe8\xe3\xb1\x0d\xb3\xc0\x1d\x86\x93\x67\x91\xed\x41\xd1\x1a\x9e\x97\x81\x8d\x77\x3a\x5e\x1f\x4e\xa8\x50\x61\xce\x13\x06\x0d\x2c\x32\xc5\xc9\x48\x19\x6c\x0b\xa7\xc3\x40\x1a\x12\xdf\x67\x77\x2f\x0d\x46\xb7\x60\x88\xfd\xbb\xed\x63\xfc\x56\x80\xca\x87\x57\x07\x9c\xf1\x81\xb5\x9b\x2d\xdb\x4c\x6a\x8d\xa6\xec\x31\xb5\x7e\x90\xd4\xb2\x9f\x83\x9f\x3a\xb5\xea\x20\xfb\x75\x52\x8b\x4d\xa7\xbf\x71\x55\x86\xda\x96\xf5\x95\xc2\x18\xb4\x30\xc5\x7f\xbf\xf2\x57\x9c\xea\xf5\xbc\xcc\x30\x2f\x50\x1f\xda\x6b\x09\x06\xc1\xa5\x52\x71\x4b\x1a\xe8\x52\xd1\xdc\xc3\x85\x84\x42\x3c\x53\x30\x35\xb6\x1d\x9a\xf9\x12\x3f\x0d\xca\x7c\xf3\xd0\x54\xf9\xe6\x46\x3f\x7e\x09\xd8\xcb\x07\x87\xde\xb9\x25\x7e\xea\xdf\xb8\xc7\xdb\x33\xea\x96\x93\xdf\xcd\xfa\x7f\x57\x45\xf4\x47\x98\x9b\x10\x8e\x42\x85\xf6\xbf\x30\x66\x75\x54\xcd\xe6\xd0\xb2\x3e\xed\xda\x70\x9c\x61\xb5\x81\xdd\x07\x06\x99\xc5\x5f\x54\xab\x3e\x7e\x1b\xfa\x5f\x8d\xcf\x9c\x18\x93\xb0\xca\xf4\xac\x8b\xcd\x24\xd7\xc1\xbf\xc8\x93\x89\x3b\x31\x87\x9d\x73\x95\xd3\xc9\x4e\xbc\x96\x97\x9e\xe9\x0f\x29\x1f\xc4\xc6\x78\xd1\xfe\x31\x45\xf0\x16\x75\x73\x7e\xf6\x6e\x41\xb6\xdb\xe4\x10\x1b\x38\x39\x01\xd5\xb7\xb0\x6b\xf1\xa8\x4e\xdb\x33\xed\xa6\xe8\x19\x75\xbd\x76\x60\x5f\x5f\x34\xd0\xd7\xf5\x99\x22\xa3\xf0\xd4\xc4\xde\x1c\x46\x82\x8f\x64\xae\xfe\x8b\x52\x71\x51\xcc\x80\x7e\xce\x7d\xe6\x38\x97\x76\xf6\x66\x57\xe2\x0c\xe0\x8c\x86\xae\xea\x98\xbe\x8a\x69\x1d\x45\x4e\x37\x62\xe6\xeb\x4b\xb9\x95\x69\x44\xb4\x05\xa5\x1f\x33\x54\x47\x67\x3d\x6a\x03\x98\x42\xf7\x46\x50\x18\xbb\x83\x66\x95\x67\x04\x8c\xff\x1a\x94\xa6\x7b\x45\x13\xd7\xa8\xaa\x4c\xff\x86\x2a\x9a\x01\x4c\x26\xc6\x6c\xbb\xf9\x7a\x75\xdb\xb7\x31\x8e\x18\x90\xcf\xff\x02\x00\x00\xff\xff\xf0\x46\x43\x36\x97\x24\x00\x00"

func tarsSimpleProtoGenCalculatorCalculator_ifTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleProtoGenCalculatorCalculator_ifTmpl,
		"tars/simple/proto/gen/calculator/Calculator_IF.tmpl",
	)
}

func tarsSimpleProtoGenCalculatorCalculator_ifTmpl() (*asset, error) {
	bytes, err := tarsSimpleProtoGenCalculatorCalculator_ifTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/proto/gen/calculator/Calculator_IF.tmpl", size: 9367, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x9a, 0x4a, 0x22, 0x1e, 0x26, 0xb1, 0xde, 0x80, 0x8f, 0x23, 0xda, 0xc3, 0xc8, 0x13, 0xc8, 0x7f, 0x35, 0x77, 0xb3, 0x6f, 0x1, 0xf2, 0x1a, 0xb7, 0x73, 0x4e, 0xcb, 0x3d, 0xa1, 0xd, 0x8}}
	return a, nil
}

var _tarsSimpleServantsServantsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x51\x6b\xdb\x30\x14\x85\x9f\xad\x5f\x71\x26\x28\xd8\x9d\x17\x8f\xed\x2d\xa3\x0f\x23\x6c\xa5\x30\xc6\x58\xf7\x56\xfa\xe0\x3a\xd7\x8e\x1a\x5b\x52\xae\xae\xb3\x84\x92\xff\x3e\xe4\x78\x69\x52\xba\xb2\xc1\x9e\x24\xae\x8e\x74\xbe\x7b\x7d\xb0\x2f\xab\x65\xd9\x10\x02\xf1\xba\xb4\x12\x94\x32\x9d\x77\x2c\x48\x55\xa2\x2b\x67\x85\x36\xa2\x95\x4a\x74\x63\x64\xd1\xdf\x4d\x2a\xd7\x15\x3f\x4a\x0e\xb3\xd6\xf5\xf3\x61\x77\xe9\x0a\x29\x39\xe8\xbf\xd0\x14\xbd\x98\xb6\xa8\x7a\x66\xb2\xa2\x55\xa6\x94\x6c\x3d\xa1\x2a\xdb\xaa\x6f\x4b\x71\x7c\xcd\x6b\x04\xe1\xbe\x12\x3c\xa8\xa4\x28\x70\xdf\x07\x01\x75\x5e\xb6\x6a\xa7\x54\xdd\xdb\x0a\x69\x38\xbd\x90\xe1\xe3\x7c\x9e\x56\x18\x61\x27\xb3\xfd\x9a\xa3\x5d\xc0\x58\x79\xff\x2e\x07\x3f\xee\x28\xe0\x7c\xd8\x67\x48\xc7\x1a\x31\x3b\xce\xa2\x61\xeb\x9a\x86\x18\xd3\x0b\x44\xda\xc9\x25\xc9\x97\xa1\x92\x1e\x26\x91\xa9\xc4\xf8\x1c\x6e\x19\x45\x63\x23\x51\x37\x6b\x0d\x59\xb9\xfa\xf6\x99\x5d\x37\x02\xa4\x55\x14\xd7\x78\xe5\x96\xf1\xed\xf1\xf1\xc9\xa7\xe8\x96\xea\x61\x41\x43\x22\xc6\x36\x30\x1e\x35\xbb\x0e\x47\x36\xbb\xdf\x38\x93\x2b\x5b\xbb\x3a\xd5\x97\x24\xd8\xdb\xe0\xca\x63\x8a\xb3\x70\x7a\x27\x87\xf1\x99\x4a\x78\xb5\x79\x86\xef\x3b\xad\x7a\x0a\x72\x8c\xc6\x61\x13\x45\x5d\xe9\x6f\x82\xb0\xb1\xcd\xed\x7e\x89\xac\x9a\x29\x78\x3d\xc5\xb0\xd6\x8e\x8f\x5c\x06\x32\x53\xe3\xb4\xab\x23\xc6\x51\x79\x02\x37\xc5\xd9\x5a\xe7\xe0\xd5\x26\x53\x49\x52\x3b\xc6\x32\xc7\x3a\xda\x73\x69\x1b\x8a\x07\xc3\x6b\x11\xea\x66\x7d\x8b\x0b\x2c\x55\x12\x8d\x76\xa0\x36\xd0\x70\x16\x8f\xb4\x75\xbc\xda\xe8\x28\xd0\x5b\x8a\x99\x7b\x71\xac\x4c\xab\xe7\x68\xc6\xf1\xee\x9b\x78\x1c\xd3\x75\x1c\x53\xf0\xce\x06\x3a\xcc\x29\x07\x87\x4d\xf6\xe1\x0f\x1f\x71\x48\x0e\xc2\xc1\x2d\x78\x17\xe8\x89\x4b\x51\x88\x9b\xbb\x29\x82\xeb\x48\x16\xc3\xc7\xb6\xd8\xba\x9e\x11\xd3\x2c\xc6\x59\x95\x9c\xc7\x58\x5e\xc4\xc0\xbe\x06\x2f\x54\xc2\x24\x3d\x5b\xbc\xcd\x61\x4d\xfb\x42\xf0\xaf\xfb\xbb\xff\x13\xfc\x7f\x83\x7c\xf3\x3c\x64\x51\xe0\x2b\xfd\x9c\x1d\x10\x31\x2a\x4a\x1c\xd5\x4c\xe7\x5b\xea\x62\x88\xdd\xdd\x3d\x55\xb2\x6f\xed\xe4\x5e\x9a\x3d\xf9\x23\x3c\x1c\xcc\x4e\xea\x0f\x3b\xb5\x53\xbf\x02\x00\x00\xff\xff\x5e\xc8\xc8\x31\xc0\x04\x00\x00"

func tarsSimpleServantsServantsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleServantsServantsTmpl,
		"tars/simple/servants/servants.tmpl",
	)
}

func tarsSimpleServantsServantsTmpl() (*asset, error) {
	bytes, err := tarsSimpleServantsServantsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/servants/servants.tmpl", size: 1216, mode: os.FileMode(0644), modTime: time.Unix(1586763276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0xe7, 0xb9, 0x20, 0xa3, 0x86, 0xad, 0x8e, 0x2b, 0xa2, 0x21, 0xcf, 0xe3, 0x8, 0x5e, 0x33, 0xc9, 0x18, 0x18, 0xca, 0xe, 0x4c, 0x5e, 0xb6, 0x7b, 0x92, 0xf4, 0xb7, 0xff, 0x6a, 0x74, 0x12}}
	return a, nil
}

var _tarsSimpleService_confTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xd1\x6e\xb3\x30\x0c\x85\xaf\xff\x3e\x45\x5e\xa0\x10\xf8\xa5\x75\x17\xc9\xa4\xbe\xc0\x6e\xb6\x17\xb0\x42\x44\xd0\x92\xd8\x0b\xa6\xdb\x54\xf5\xdd\x27\xa0\xeb\xb4\x56\x94\xf8\x92\x7c\x1c\x1f\x5b\xc7\x8a\x21\xf5\x4f\x1b\x71\x2e\x05\x44\xbe\x33\xc0\x1d\xc6\xdf\xaf\x97\xd7\xde\xa6\x83\x4d\xb7\x0f\x3f\x05\x44\xfa\x78\x14\xc5\x9e\xe8\x19\x82\x15\xa7\xd3\x22\x3a\x4b\x4d\xf4\x2b\xa4\xd6\xf2\x3d\xd8\xa3\x01\xaf\xd9\x90\xd8\x3a\x51\xd5\xbb\x42\x16\xb2\xa8\xc4\x96\x44\x25\x65\xbd\x13\x5b\x16\xff\xa5\x94\x72\xf3\x6f\x2a\x8f\x2d\x01\x3b\x5d\x72\xa0\x45\x4d\x35\xb6\x7e\x49\x87\xb3\xd1\x7d\x03\xc4\xf7\x66\xbb\xcc\xe8\x3d\x7e\xac\x52\x36\x36\x84\x5d\xe4\x45\xd3\x8f\xa3\xe9\x87\xc9\xf4\x9a\x96\x83\xd8\x78\xdb\x26\x1c\xe6\xed\xde\x98\x5e\x55\x08\xf0\x69\x30\xc6\x5e\xd7\x32\xab\x23\x25\x64\x34\xe8\xf5\x98\x8e\x55\xfa\x7d\xb0\x83\x35\x40\xba\xca\x12\x9f\x70\xee\x82\xc5\x81\x75\xde\x06\xc6\xb0\x40\xe4\xab\xe9\xd7\x7f\x73\x61\xb4\x95\xa1\xef\xc2\x9b\xfd\xca\x00\xd9\x25\x0b\x4d\xaf\xab\xe5\x58\x95\x99\xb9\x52\xe5\xf5\x35\xa9\xf2\xcf\xf5\xa9\x72\xbe\xcd\xef\x00\x00\x00\xff\xff\x5a\x61\x3f\xdb\xa3\x03\x00\x00"

func tarsSimpleService_confTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleService_confTmpl,
		"tars/simple/service_conf.tmpl",
	)
}

func tarsSimpleService_confTmpl() (*asset, error) {
	bytes, err := tarsSimpleService_confTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/service_conf.tmpl", size: 931, mode: os.FileMode(0644), modTime: time.Unix(1586778626, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe5, 0xdb, 0x5, 0xb, 0x96, 0x24, 0xf7, 0x88, 0x21, 0x5d, 0xa5, 0x74, 0xa7, 0xf9, 0xdb, 0xe8, 0x53, 0x77, 0xff, 0xe2, 0xaa, 0x4a, 0x19, 0xaa, 0xd1, 0xce, 0x36, 0xca, 0x3c, 0x3e, 0xd6, 0x7}}
	return a, nil
}

var _tarsSimpleVersionVersionTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x31\x6b\xc3\x30\x10\x85\x67\xdf\xaf\x38\x04\x01\x1b\xdc\xa8\x5d\x03\x19\xda\xa5\xed\x10\x28\xb4\x64\x57\x1c\xd9\xbe\xd6\xd6\x09\x9d\x94\x0c\x21\xff\xbd\xc8\x4e\x1a\x32\x75\xf2\xf9\xf8\x9e\xde\xbd\xe7\x4d\xf3\x63\x3a\x8b\x07\x1b\x84\xd8\x01\xd0\xe8\x39\x44\x2c\xa1\x50\x1d\xc5\x3e\xed\x96\x0d\x8f\xba\xe1\x60\x59\x74\xc7\x0f\x62\xc7\x83\x0d\x7a\xfe\xa8\x7b\x4a\x28\x24\x2f\xd6\xe9\x81\xbb\x90\x44\x41\x05\x70\x30\x21\x3f\xa6\x35\xbe\x52\x7c\x33\xd2\xe3\xd6\x0c\xc9\xe2\x91\x86\x01\x77\x16\xc5\x46\xdc\xa7\x40\xae\xc3\x5d\xa2\x61\x0f\xc5\x95\x5b\xa3\x52\x93\xf0\x25\xef\xbf\x68\xb4\xff\x4a\x6f\xe4\x24\xae\x00\xb4\xc6\x67\xef\xb7\x36\xa0\xf1\x7e\xa0\xc6\x44\x62\x77\x4d\x8b\xe4\x5a\x9e\x2e\xbc\x30\x6b\x9c\x73\x2d\xb7\x33\x70\x82\x62\x63\xbe\x39\xac\xf0\xb1\x86\x62\x43\x2e\x8f\x4f\x35\x14\x1f\x26\x36\xfd\xb4\x3d\x4f\x1e\x9f\x3d\x1f\xdf\x5d\xcb\x28\x3d\x1f\xef\xac\xb2\x45\x18\xa7\x19\xda\xe4\x9a\x3f\xb4\xac\xf0\x04\xc5\xdc\xd4\x32\x2f\xda\x52\x49\x34\x21\x66\x79\x79\x29\x61\xb5\x90\x5b\xfc\xfc\x33\x1f\xba\x5a\x48\xa5\xea\x6b\xa3\xf5\x0d\xa9\x2f\x40\x05\x67\xf8\x0d\x00\x00\xff\xff\x8a\x8c\x4a\xa5\xdb\x01\x00\x00"

func tarsSimpleVersionVersionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tarsSimpleVersionVersionTmpl,
		"tars/simple/version/version.tmpl",
	)
}

func tarsSimpleVersionVersionTmpl() (*asset, error) {
	bytes, err := tarsSimpleVersionVersionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tars/simple/version/version.tmpl", size: 475, mode: os.FileMode(0644), modTime: time.Unix(1586782137, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0xf2, 0x93, 0x84, 0x46, 0xa0, 0xb2, 0x6c, 0xc0, 0x2f, 0x68, 0x49, 0xa7, 0x2b, 0xdd, 0x75, 0x87, 0x3c, 0xae, 0x56, 0xe9, 0x6f, 0xf8, 0x11, 0xf2, 0x8c, 0x64, 0xdc, 0x16, 0xd5, 0x48, 0xe7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tars/mir/README.tmpl":                                tarsMirReadmeTmpl,
	"tars/mir/gitignore.tmpl":                             tarsMirGitignoreTmpl,
	"tars/mir/go_mod.tmpl":                                tarsMirGo_modTmpl,
	"tars/mir/internal/internal.tmpl":                     tarsMirInternalInternalTmpl,
	"tars/mir/main.tmpl":                                  tarsMirMainTmpl,
	"tars/mir/makefile.tmpl":                              tarsMirMakefileTmpl,
	"tars/mir/mirc/gen/api/calculator.tmpl":               tarsMirMircGenApiCalculatorTmpl,
	"tars/mir/mirc/main.tmpl":                             tarsMirMircMainTmpl,
	"tars/mir/mirc/routes/calculator.tmpl":                tarsMirMircRoutesCalculatorTmpl,
	"tars/mir/proto/calculator_tars.tmpl":                 tarsMirProtoCalculator_tarsTmpl,
	"tars/mir/proto/gen/calculator/Calculator_IF.tmpl":    tarsMirProtoGenCalculatorCalculator_ifTmpl,
	"tars/mir/servants/calculator.tmpl":                   tarsMirServantsCalculatorTmpl,
	"tars/mir/servants/servants.tmpl":                     tarsMirServantsServantsTmpl,
	"tars/mir/service_conf.tmpl":                          tarsMirService_confTmpl,
	"tars/mir/version/version.tmpl":                       tarsMirVersionVersionTmpl,
	"tars/simple/README.tmpl":                             tarsSimpleReadmeTmpl,
	"tars/simple/gitignore.tmpl":                          tarsSimpleGitignoreTmpl,
	"tars/simple/go_mod.tmpl":                             tarsSimpleGo_modTmpl,
	"tars/simple/internal/client/client.tmpl":             tarsSimpleInternalClientClientTmpl,
	"tars/simple/internal/internal.tmpl":                  tarsSimpleInternalInternalTmpl,
	"tars/simple/main.tmpl":                               tarsSimpleMainTmpl,
	"tars/simple/makefile.tmpl":                           tarsSimpleMakefileTmpl,
	"tars/simple/proto/calculator_tars.tmpl":              tarsSimpleProtoCalculator_tarsTmpl,
	"tars/simple/proto/gen/calculator/Calculator_IF.tmpl": tarsSimpleProtoGenCalculatorCalculator_ifTmpl,
	"tars/simple/servants/servants.tmpl":                  tarsSimpleServantsServantsTmpl,
	"tars/simple/service_conf.tmpl":                       tarsSimpleService_confTmpl,
	"tars/simple/version/version.tmpl":                    tarsSimpleVersionVersionTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tars": {nil, map[string]*bintree{
		"mir": {nil, map[string]*bintree{
			"README.tmpl":    {tarsMirReadmeTmpl, map[string]*bintree{}},
			"gitignore.tmpl": {tarsMirGitignoreTmpl, map[string]*bintree{}},
			"go_mod.tmpl":    {tarsMirGo_modTmpl, map[string]*bintree{}},
			"internal": {nil, map[string]*bintree{
				"internal.tmpl": {tarsMirInternalInternalTmpl, map[string]*bintree{}},
			}},
			"main.tmpl":     {tarsMirMainTmpl, map[string]*bintree{}},
			"makefile.tmpl": {tarsMirMakefileTmpl, map[string]*bintree{}},
			"mirc": {nil, map[string]*bintree{
				"gen": {nil, map[string]*bintree{
					"api": {nil, map[string]*bintree{
						"calculator.tmpl": {tarsMirMircGenApiCalculatorTmpl, map[string]*bintree{}},
					}},
				}},
				"main.tmpl": {tarsMirMircMainTmpl, map[string]*bintree{}},
				"routes": {nil, map[string]*bintree{
					"calculator.tmpl": {tarsMirMircRoutesCalculatorTmpl, map[string]*bintree{}},
				}},
			}},
			"proto": {nil, map[string]*bintree{
				"calculator_tars.tmpl": {tarsMirProtoCalculator_tarsTmpl, map[string]*bintree{}},
				"gen": {nil, map[string]*bintree{
					"calculator": {nil, map[string]*bintree{
						"Calculator_IF.tmpl": {tarsMirProtoGenCalculatorCalculator_ifTmpl, map[string]*bintree{}},
					}},
				}},
			}},
			"servants": {nil, map[string]*bintree{
				"calculator.tmpl": {tarsMirServantsCalculatorTmpl, map[string]*bintree{}},
				"servants.tmpl":   {tarsMirServantsServantsTmpl, map[string]*bintree{}},
			}},
			"service_conf.tmpl": {tarsMirService_confTmpl, map[string]*bintree{}},
			"version": {nil, map[string]*bintree{
				"version.tmpl": {tarsMirVersionVersionTmpl, map[string]*bintree{}},
			}},
		}},
		"simple": {nil, map[string]*bintree{
			"README.tmpl":    {tarsSimpleReadmeTmpl, map[string]*bintree{}},
			"gitignore.tmpl": {tarsSimpleGitignoreTmpl, map[string]*bintree{}},
			"go_mod.tmpl":    {tarsSimpleGo_modTmpl, map[string]*bintree{}},
			"internal": {nil, map[string]*bintree{
				"client": {nil, map[string]*bintree{
					"client.tmpl": {tarsSimpleInternalClientClientTmpl, map[string]*bintree{}},
				}},
				"internal.tmpl": {tarsSimpleInternalInternalTmpl, map[string]*bintree{}},
			}},
			"main.tmpl":     {tarsSimpleMainTmpl, map[string]*bintree{}},
			"makefile.tmpl": {tarsSimpleMakefileTmpl, map[string]*bintree{}},
			"proto": {nil, map[string]*bintree{
				"calculator_tars.tmpl": {tarsSimpleProtoCalculator_tarsTmpl, map[string]*bintree{}},
				"gen": {nil, map[string]*bintree{
					"calculator": {nil, map[string]*bintree{
						"Calculator_IF.tmpl": {tarsSimpleProtoGenCalculatorCalculator_ifTmpl, map[string]*bintree{}},
					}},
				}},
			}},
			"servants": {nil, map[string]*bintree{
				"servants.tmpl": {tarsSimpleServantsServantsTmpl, map[string]*bintree{}},
			}},
			"service_conf.tmpl": {tarsSimpleService_confTmpl, map[string]*bintree{}},
			"version": {nil, map[string]*bintree{
				"version.tmpl": {tarsSimpleVersionVersionTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
